
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019c  00800200  000020da  0000216e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d1  0080039c  0080039c  0000230a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000230a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000233c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000620  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e50e  00000000  00000000  0000299c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034c1  00000000  00000000  00010eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003da5  00000000  00000000  0001436b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013e4  00000000  00000000  00018110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000347e  00000000  00000000  000194f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007012  00000000  00000000  0001c972  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e8  00000000  00000000  00023984  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c1       	rjmp	.+670    	; 0x2a0 <__ctors_end>
       2:	00 00       	nop
       4:	7e c1       	rjmp	.+764    	; 0x302 <__bad_interrupt>
       6:	00 00       	nop
       8:	7c c1       	rjmp	.+760    	; 0x302 <__bad_interrupt>
       a:	00 00       	nop
       c:	7a c1       	rjmp	.+756    	; 0x302 <__bad_interrupt>
       e:	00 00       	nop
      10:	78 c1       	rjmp	.+752    	; 0x302 <__bad_interrupt>
      12:	00 00       	nop
      14:	76 c1       	rjmp	.+748    	; 0x302 <__bad_interrupt>
      16:	00 00       	nop
      18:	74 c1       	rjmp	.+744    	; 0x302 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	72 c1       	rjmp	.+740    	; 0x302 <__bad_interrupt>
      1e:	00 00       	nop
      20:	70 c1       	rjmp	.+736    	; 0x302 <__bad_interrupt>
      22:	00 00       	nop
      24:	6e c1       	rjmp	.+732    	; 0x302 <__bad_interrupt>
      26:	00 00       	nop
      28:	6c c1       	rjmp	.+728    	; 0x302 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6a c1       	rjmp	.+724    	; 0x302 <__bad_interrupt>
      2e:	00 00       	nop
      30:	68 c1       	rjmp	.+720    	; 0x302 <__bad_interrupt>
      32:	00 00       	nop
      34:	66 c1       	rjmp	.+716    	; 0x302 <__bad_interrupt>
      36:	00 00       	nop
      38:	64 c1       	rjmp	.+712    	; 0x302 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	62 c1       	rjmp	.+708    	; 0x302 <__bad_interrupt>
      3e:	00 00       	nop
      40:	60 c1       	rjmp	.+704    	; 0x302 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__vector_17>
      48:	5c c1       	rjmp	.+696    	; 0x302 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5a c1       	rjmp	.+692    	; 0x302 <__bad_interrupt>
      4e:	00 00       	nop
      50:	58 c1       	rjmp	.+688    	; 0x302 <__bad_interrupt>
      52:	00 00       	nop
      54:	56 c1       	rjmp	.+684    	; 0x302 <__bad_interrupt>
      56:	00 00       	nop
      58:	54 c1       	rjmp	.+680    	; 0x302 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__vector_23>
      60:	50 c1       	rjmp	.+672    	; 0x302 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__vector_25>
      68:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__vector_26>
      6c:	4a c1       	rjmp	.+660    	; 0x302 <__bad_interrupt>
      6e:	00 00       	nop
      70:	48 c1       	rjmp	.+656    	; 0x302 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c1       	rjmp	.+652    	; 0x302 <__bad_interrupt>
      76:	00 00       	nop
      78:	44 c1       	rjmp	.+648    	; 0x302 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	42 c1       	rjmp	.+644    	; 0x302 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__vector_32>
      84:	3e c1       	rjmp	.+636    	; 0x302 <__bad_interrupt>
      86:	00 00       	nop
      88:	3c c1       	rjmp	.+632    	; 0x302 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3a c1       	rjmp	.+628    	; 0x302 <__bad_interrupt>
      8e:	00 00       	nop
      90:	38 c1       	rjmp	.+624    	; 0x302 <__bad_interrupt>
      92:	00 00       	nop
      94:	36 c1       	rjmp	.+620    	; 0x302 <__bad_interrupt>
      96:	00 00       	nop
      98:	34 c1       	rjmp	.+616    	; 0x302 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	32 c1       	rjmp	.+612    	; 0x302 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	30 c1       	rjmp	.+608    	; 0x302 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2e c1       	rjmp	.+604    	; 0x302 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 87 08 	jmp	0x110e	; 0x110e <__vector_42>
      ac:	2a c1       	rjmp	.+596    	; 0x302 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	28 c1       	rjmp	.+592    	; 0x302 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	26 c1       	rjmp	.+588    	; 0x302 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	24 c1       	rjmp	.+584    	; 0x302 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__vector_47>
      c0:	20 c1       	rjmp	.+576    	; 0x302 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1e c1       	rjmp	.+572    	; 0x302 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	1c c1       	rjmp	.+568    	; 0x302 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	1a c1       	rjmp	.+564    	; 0x302 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	18 c1       	rjmp	.+560    	; 0x302 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	16 c1       	rjmp	.+556    	; 0x302 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	14 c1       	rjmp	.+552    	; 0x302 <__bad_interrupt>
      da:	00 00       	nop
      dc:	12 c1       	rjmp	.+548    	; 0x302 <__bad_interrupt>
      de:	00 00       	nop
      e0:	10 c1       	rjmp	.+544    	; 0x302 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a7 01       	movw	r20, r14
      e6:	c1 01       	movw	r24, r2
      e8:	93 02       	muls	r25, r19
      ea:	db 01       	movw	r26, r22
      ec:	f5 01       	movw	r30, r10
      ee:	02 02       	muls	r16, r18
      f0:	1c 02       	muls	r17, r28
      f2:	36 02       	muls	r19, r22
      f4:	5d 02       	muls	r21, r29
      f6:	93 02       	muls	r25, r19
      f8:	a3 02       	muls	r26, r19
      fa:	c4 02       	muls	r28, r20
      fc:	e3 02       	muls	r30, r19
      fe:	08 00       	.word	0x0008	; ????
     100:	00 00       	nop
     102:	be 92       	st	-X, r11
     104:	24 49       	sbci	r18, 0x94	; 148
     106:	12 3e       	cpi	r17, 0xE2	; 226
     108:	ab aa       	std	Y+51, r10	; 0x33
     10a:	aa 2a       	or	r10, r26
     10c:	be cd       	rjmp	.-1156   	; 0xfffffc8a <__eeprom_end+0xff7efc8a>
     10e:	cc cc       	rjmp	.-1640   	; 0xfffffaa8 <__eeprom_end+0xff7efaa8>
     110:	4c 3e       	cpi	r20, 0xEC	; 236
     112:	00 00       	nop
     114:	00 80       	ld	r0, Z
     116:	be ab       	std	Y+54, r27	; 0x36
     118:	aa aa       	std	Y+50, r10	; 0x32
     11a:	aa 3e       	cpi	r26, 0xEA	; 234
     11c:	00 00       	nop
     11e:	00 00       	nop
     120:	bf 00       	.word	0x00bf	; ????
     122:	00 00       	nop
     124:	80 3f       	cpi	r24, 0xF0	; 240
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	00 08       	sbc	r0, r0
     12c:	41 78       	andi	r20, 0x81	; 129
     12e:	d3 bb       	out	0x13, r29	; 19
     130:	43 87       	std	Z+11, r20	; 0x0b
     132:	d1 13       	cpse	r29, r17
     134:	3d 19       	sub	r19, r13
     136:	0e 3c       	cpi	r16, 0xCE	; 206
     138:	c3 bd       	out	0x23, r28	; 35
     13a:	42 82       	std	Z+2, r4	; 0x02
     13c:	ad 2b       	or	r26, r29
     13e:	3e 68       	ori	r19, 0x8E	; 142
     140:	ec 82       	std	Y+4, r14	; 0x04
     142:	76 be       	out	0x36, r7	; 54
     144:	d9 8f       	std	Y+25, r29	; 0x19
     146:	e1 a9       	ldd	r30, Z+49	; 0x31
     148:	3e 4c       	sbci	r19, 0xCE	; 206
     14a:	80 ef       	ldi	r24, 0xF0	; 240
     14c:	ff be       	out	0x3f, r15	; 63
     14e:	01 c4       	rjmp	.+2050   	; 0x952 <_ZN3DHT4readEb+0x1b8>
     150:	ff 7f       	andi	r31, 0xFF	; 255
     152:	3f 00       	.word	0x003f	; ????
     154:	00 00       	nop
     156:	00 00       	nop
     158:	6b 0e       	add	r6, r27
     15a:	6e 0e       	add	r6, r30
     15c:	5d 0e       	add	r5, r29
     15e:	61 0e       	add	r6, r17
     160:	67 0e       	add	r6, r23
     162:	a5 0e       	add	r10, r21
     164:	72 0e       	add	r7, r18
     166:	76 0e       	add	r7, r22
     168:	7c 0e       	add	r7, r28
     16a:	80 0e       	add	r8, r16
     16c:	84 0e       	add	r8, r20
     16e:	8a 0e       	add	r8, r26
     170:	8e 0e       	add	r8, r30
     172:	92 0e       	add	r9, r18
     174:	a5 0e       	add	r10, r21
     176:	98 0e       	add	r9, r24
     178:	9c 0e       	add	r9, r28
     17a:	a0 0e       	add	r10, r16

0000017c <__trampolines_end>:
     17c:	00 00       	nop
     17e:	0a 0b       	sbc	r16, r26
     180:	02 09       	sbc	r16, r2
     182:	0c 0d       	add	r16, r12
     184:	0e 08       	sbc	r0, r14
     186:	07 03       	mulsu	r16, r23
     188:	04 01       	movw	r0, r8
	...
     1a6:	00 00       	nop
     1a8:	12 11       	cpse	r17, r2
     1aa:	10 00       	.word	0x0010	; ????
	...

000001c2 <digital_pin_to_bit_mask_PGM>:
     1c2:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1d2:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1e2:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1f2:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     202:	04 08 10 20 40 80                                   ... @.

00000208 <digital_pin_to_port_PGM>:
     208:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     218:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     228:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     238:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     248:	0b 0b 0b 0b 0b 0b                                   ......

0000024e <port_to_input_PGM>:
     24e:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     25e:	00 01 00 00 03 01 06 01 09 01                       ..........

00000268 <port_to_output_PGM>:
     268:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     278:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000282 <port_to_mode_PGM>:
     282:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     292:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000029c <__ctors_start>:
     29c:	32 03       	mulsu	r19, r18
     29e:	0d 0c       	add	r0, r13

000002a0 <__ctors_end>:
     2a0:	11 24       	eor	r1, r1
     2a2:	1f be       	out	0x3f, r1	; 63
     2a4:	cf ef       	ldi	r28, 0xFF	; 255
     2a6:	d1 e2       	ldi	r29, 0x21	; 33
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0c bf       	out	0x3c, r16	; 60

000002b0 <__do_copy_data>:
     2b0:	13 e0       	ldi	r17, 0x03	; 3
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b2 e0       	ldi	r27, 0x02	; 2
     2b6:	ea ed       	ldi	r30, 0xDA	; 218
     2b8:	f0 e2       	ldi	r31, 0x20	; 32
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	0b bf       	out	0x3b, r16	; 59
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x14>
     2c0:	07 90       	elpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	ac 39       	cpi	r26, 0x9C	; 156
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0x10>

000002ca <__do_clear_bss>:
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	ac e9       	ldi	r26, 0x9C	; 156
     2ce:	b3 e0       	ldi	r27, 0x03	; 3
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	ad 36       	cpi	r26, 0x6D	; 109
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>

000002da <__do_global_ctors>:
     2da:	11 e0       	ldi	r17, 0x01	; 1
     2dc:	c0 e5       	ldi	r28, 0x50	; 80
     2de:	d1 e0       	ldi	r29, 0x01	; 1
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <__do_global_ctors+0x16>
     2e4:	21 97       	sbiw	r28, 0x01	; 1
     2e6:	01 09       	sbc	r16, r1
     2e8:	80 2f       	mov	r24, r16
     2ea:	fe 01       	movw	r30, r28
     2ec:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__tablejump2__>
     2f0:	ce 34       	cpi	r28, 0x4E	; 78
     2f2:	d1 07       	cpc	r29, r17
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	08 07       	cpc	r16, r24
     2f8:	a9 f7       	brne	.-22     	; 0x2e4 <__do_global_ctors+0xa>
     2fa:	0e 94 3b 0c 	call	0x1876	; 0x1876 <main>
     2fe:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <_exit>

00000302 <__bad_interrupt>:
     302:	7e ce       	rjmp	.-772    	; 0x0 <__vectors>

00000304 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     304:	61 15       	cp	r22, r1
     306:	71 05       	cpc	r23, r1
     308:	79 f0       	breq	.+30     	; 0x328 <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
     30a:	fb 01       	movw	r30, r22
     30c:	01 90       	ld	r0, Z+
     30e:	00 20       	and	r0, r0
     310:	e9 f7       	brne	.-6      	; 0x30c <_ZN5Print5writeEPKc+0x8>
     312:	31 97       	sbiw	r30, 0x01	; 1
     314:	af 01       	movw	r20, r30
     316:	46 1b       	sub	r20, r22
     318:	57 0b       	sbc	r21, r23
     31a:	dc 01       	movw	r26, r24
     31c:	ed 91       	ld	r30, X+
     31e:	fc 91       	ld	r31, X
     320:	02 80       	ldd	r0, Z+2	; 0x02
     322:	f3 81       	ldd	r31, Z+3	; 0x03
     324:	e0 2d       	mov	r30, r0
     326:	19 94       	eijmp
    }
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	08 95       	ret

0000032e <_Z13lcdMenuLoaderii>:
#include "MenuControl.h"

void lcdMenuLoader(int menuStage = 0, int ns = 0)
{
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	eb 01       	movw	r28, r22
	switch (menuStage)
     334:	8d 30       	cpi	r24, 0x0D	; 13
     336:	91 05       	cpc	r25, r1
     338:	08 f0       	brcs	.+2      	; 0x33c <_Z13lcdMenuLoaderii+0xe>
     33a:	6e c1       	rjmp	.+732    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     33c:	fc 01       	movw	r30, r24
			lcd.setCursor(0, 1);
			lcd.write("A<Set Allowed");
		break;
		//Set allowed humidity
		case 12:
			lcd.setCursor(0, 0);
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	60 e0       	ldi	r22, 0x00	; 0
#include "MenuControl.h"

void lcdMenuLoader(int menuStage = 0, int ns = 0)
{
	switch (menuStage)
     342:	88 27       	eor	r24, r24
     344:	ee 58       	subi	r30, 0x8E	; 142
     346:	ff 4f       	sbci	r31, 0xFF	; 255
     348:	8f 4f       	sbci	r24, 0xFF	; 255
     34a:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <__tablejump2__>
	{
		//Main menu
		case 0:
			lcd.setCursor(0, 0);
     34e:	83 e1       	ldi	r24, 0x13	; 19
     350:	94 e0       	ldi	r25, 0x04	; 4
     352:	f5 d4       	rcall	.+2538   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("<>Chose Option<>");
     354:	61 e2       	ldi	r22, 0x21	; 33
     356:	72 e0       	ldi	r23, 0x02	; 2
     358:	83 e1       	ldi	r24, 0x13	; 19
     35a:	94 e0       	ldi	r25, 0x04	; 4
     35c:	d3 df       	rcall	.-90     	; 0x304 <_ZN5Print5writeEPKc>
			lcd.setCursor(0, 1);
     35e:	41 e0       	ldi	r20, 0x01	; 1
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	83 e1       	ldi	r24, 0x13	; 19
     364:	94 e0       	ldi	r25, 0x04	; 4
     366:	eb d4       	rcall	.+2518   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("A<Heat");
     368:	62 e3       	ldi	r22, 0x32	; 50
     36a:	72 e0       	ldi	r23, 0x02	; 2
     36c:	83 e1       	ldi	r24, 0x13	; 19
     36e:	94 e0       	ldi	r25, 0x04	; 4
     370:	c9 df       	rcall	.-110    	; 0x304 <_ZN5Print5writeEPKc>
			lcd.setCursor(8, 1);
     372:	41 e0       	ldi	r20, 0x01	; 1
     374:	68 e0       	ldi	r22, 0x08	; 8
     376:	83 e1       	ldi	r24, 0x13	; 19
     378:	94 e0       	ldi	r25, 0x04	; 4
     37a:	e1 d4       	rcall	.+2498   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Lights>B");
     37c:	69 e3       	ldi	r22, 0x39	; 57
     37e:	72 e0       	ldi	r23, 0x02	; 2
		break;
		
#pragma region Heat Menus
		//Heat menu
		case 1:
			lcd.setCursor(0, 0);
     380:	5c c1       	rjmp	.+696    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     382:	83 e1       	ldi	r24, 0x13	; 19
     384:	94 e0       	ldi	r25, 0x04	; 4
			lcd.write("A<Fan");
     386:	db d4       	rcall	.+2486   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     388:	62 e4       	ldi	r22, 0x42	; 66
     38a:	72 e0       	ldi	r23, 0x02	; 2
     38c:	83 e1       	ldi	r24, 0x13	; 19
     38e:	94 e0       	ldi	r25, 0x04	; 4
			lcd.setCursor(9 ,0);
     390:	b9 df       	rcall	.-142    	; 0x304 <_ZN5Print5writeEPKc>
     392:	40 e0       	ldi	r20, 0x00	; 0
     394:	69 e0       	ldi	r22, 0x09	; 9
     396:	83 e1       	ldi	r24, 0x13	; 19
     398:	94 e0       	ldi	r25, 0x04	; 4
			lcd.write("Temps>B");
     39a:	d1 d4       	rcall	.+2466   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     39c:	68 e4       	ldi	r22, 0x48	; 72
     39e:	72 e0       	ldi	r23, 0x02	; 2
     3a0:	83 e1       	ldi	r24, 0x13	; 19
     3a2:	94 e0       	ldi	r25, 0x04	; 4
			lcd.setCursor(0, 1);
     3a4:	af df       	rcall	.-162    	; 0x304 <_ZN5Print5writeEPKc>
     3a6:	41 e0       	ldi	r20, 0x01	; 1
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	83 e1       	ldi	r24, 0x13	; 19
     3ac:	94 e0       	ldi	r25, 0x04	; 4
			lcd.write("C<Window");
     3ae:	c7 d4       	rcall	.+2446   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     3b0:	60 e5       	ldi	r22, 0x50	; 80
			lcd.write("A<T.Off");
		break;
		
		//Fan Control menu if Auto Mode is off
		case 3:
			lcd.setCursor(0, 0);
     3b2:	72 e0       	ldi	r23, 0x02	; 2
     3b4:	42 c1       	rjmp	.+644    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     3b6:	83 e1       	ldi	r24, 0x13	; 19
			lcd.write("<>Fan Controls<>");
     3b8:	94 e0       	ldi	r25, 0x04	; 4
     3ba:	c1 d4       	rcall	.+2434   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     3bc:	62 e7       	ldi	r22, 0x72	; 114
     3be:	72 e0       	ldi	r23, 0x02	; 2
     3c0:	83 e1       	ldi	r24, 0x13	; 19
			lcd.setCursor(0, 1);
     3c2:	94 e0       	ldi	r25, 0x04	; 4
     3c4:	9f df       	rcall	.-194    	; 0x304 <_ZN5Print5writeEPKc>
     3c6:	41 e0       	ldi	r20, 0x01	; 1
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	83 e1       	ldi	r24, 0x13	; 19
			lcd.write("A<T.Auto");
     3cc:	94 e0       	ldi	r25, 0x04	; 4
     3ce:	b7 d4       	rcall	.+2414   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     3d0:	63 e8       	ldi	r22, 0x83	; 131
     3d2:	72 e0       	ldi	r23, 0x02	; 2
     3d4:	83 e1       	ldi	r24, 0x13	; 19
			lcd.setCursor(9, 1);
     3d6:	94 e0       	ldi	r25, 0x04	; 4
     3d8:	95 df       	rcall	.-214    	; 0x304 <_ZN5Print5writeEPKc>
     3da:	41 e0       	ldi	r20, 0x01	; 1
     3dc:	69 e0       	ldi	r22, 0x09	; 9
     3de:	83 e1       	ldi	r24, 0x13	; 19
			lcd.write("Speed>B");
     3e0:	94 e0       	ldi	r25, 0x04	; 4
     3e2:	ad d4       	rcall	.+2394   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     3e4:	6c e8       	ldi	r22, 0x8C	; 140
		break;
		
		//Fan Speed Control menu
		case 4:
			lcd.setCursor(0, 0);
     3e6:	72 e0       	ldi	r23, 0x02	; 2
     3e8:	28 c1       	rjmp	.+592    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     3ea:	83 e1       	ldi	r24, 0x13	; 19
			lcd.write("Speed:"); lcd.print(currentFanSpeed); lcd.write("%");
     3ec:	94 e0       	ldi	r25, 0x04	; 4
     3ee:	a7 d4       	rcall	.+2382   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     3f0:	64 e9       	ldi	r22, 0x94	; 148
     3f2:	72 e0       	ldi	r23, 0x02	; 2
     3f4:	83 e1       	ldi	r24, 0x13	; 19
     3f6:	94 e0       	ldi	r25, 0x04	; 4
     3f8:	85 df       	rcall	.-246    	; 0x304 <_ZN5Print5writeEPKc>
     3fa:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <currentFanSpeed>
#pragma endregion
		
#pragma region Temperature Menus
		//Temperature Menu
		case 5:
			lcd.setCursor(0, 0);
     3fe:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <currentFanSpeed+0x1>
     402:	ed c0       	rjmp	.+474    	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
			lcd.write("<>Temperatures<>");
     404:	83 e1       	ldi	r24, 0x13	; 19
     406:	94 e0       	ldi	r25, 0x04	; 4
     408:	9a d4       	rcall	.+2356   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     40a:	6b ea       	ldi	r22, 0xAB	; 171
     40c:	72 e0       	ldi	r23, 0x02	; 2
			lcd.setCursor(0, 1);
     40e:	83 e1       	ldi	r24, 0x13	; 19
     410:	94 e0       	ldi	r25, 0x04	; 4
     412:	78 df       	rcall	.-272    	; 0x304 <_ZN5Print5writeEPKc>
     414:	41 e0       	ldi	r20, 0x01	; 1
     416:	60 e0       	ldi	r22, 0x00	; 0
			lcd.write("A<Set");
     418:	83 e1       	ldi	r24, 0x13	; 19
     41a:	94 e0       	ldi	r25, 0x04	; 4
     41c:	90 d4       	rcall	.+2336   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     41e:	6c eb       	ldi	r22, 0xBC	; 188
     420:	72 e0       	ldi	r23, 0x02	; 2
			lcd.setCursor(9, 1);
     422:	83 e1       	ldi	r24, 0x13	; 19
     424:	94 e0       	ldi	r25, 0x04	; 4
     426:	6e df       	rcall	.-292    	; 0x304 <_ZN5Print5writeEPKc>
     428:	41 e0       	ldi	r20, 0x01	; 1
     42a:	69 e0       	ldi	r22, 0x09	; 9
			lcd.write("Check>B");
     42c:	83 e1       	ldi	r24, 0x13	; 19
     42e:	94 e0       	ldi	r25, 0x04	; 4
     430:	86 d4       	rcall	.+2316   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
		break;
		
		//Set temperature chose room Menu
		case 6:
			lcd.setCursor(0, 0);
     432:	62 ec       	ldi	r22, 0xC2	; 194
     434:	72 e0       	ldi	r23, 0x02	; 2
     436:	01 c1       	rjmp	.+514    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
			lcd.write("<->Chose Room<->");
     438:	83 e1       	ldi	r24, 0x13	; 19
     43a:	94 e0       	ldi	r25, 0x04	; 4
     43c:	80 d4       	rcall	.+2304   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     43e:	6a ec       	ldi	r22, 0xCA	; 202
     440:	72 e0       	ldi	r23, 0x02	; 2
			lcd.setCursor(0, 1);
     442:	83 e1       	ldi	r24, 0x13	; 19
     444:	94 e0       	ldi	r25, 0x04	; 4
     446:	5e df       	rcall	.-324    	; 0x304 <_ZN5Print5writeEPKc>
     448:	41 e0       	ldi	r20, 0x01	; 1
     44a:	60 e0       	ldi	r22, 0x00	; 0
			lcd.write("A<Dining");
     44c:	83 e1       	ldi	r24, 0x13	; 19
     44e:	94 e0       	ldi	r25, 0x04	; 4
     450:	76 d4       	rcall	.+2284   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     452:	6b ed       	ldi	r22, 0xDB	; 219
     454:	72 e0       	ldi	r23, 0x02	; 2
     456:	83 e1       	ldi	r24, 0x13	; 19
			lcd.setCursor(10, 1);
     458:	94 e0       	ldi	r25, 0x04	; 4
     45a:	54 df       	rcall	.-344    	; 0x304 <_ZN5Print5writeEPKc>
     45c:	41 e0       	ldi	r20, 0x01	; 1
     45e:	6a e0       	ldi	r22, 0x0A	; 10
     460:	83 e1       	ldi	r24, 0x13	; 19
     462:	94 e0       	ldi	r25, 0x04	; 4
			lcd.write("Kids>B");
     464:	6c d4       	rcall	.+2264   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     466:	64 ee       	ldi	r22, 0xE4	; 228
     468:	72 e0       	ldi	r23, 0x02	; 2
		break;
		
		//Set temperatures for room Menu
		//ns1 = Dining Room, ns2 = Kids Room
		case 7:
			lcd.setCursor(0, 0);
     46a:	e7 c0       	rjmp	.+462    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     46c:	83 e1       	ldi	r24, 0x13	; 19
     46e:	94 e0       	ldi	r25, 0x04	; 4
     470:	66 d4       	rcall	.+2252   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Set temp:"); 
     472:	6b ee       	ldi	r22, 0xEB	; 235
     474:	72 e0       	ldi	r23, 0x02	; 2
     476:	83 e1       	ldi	r24, 0x13	; 19
     478:	94 e0       	ldi	r25, 0x04	; 4
     47a:	44 df       	rcall	.-376    	; 0x304 <_ZN5Print5writeEPKc>
			if (ns == 1)
     47c:	c1 30       	cpi	r28, 0x01	; 1
     47e:	d1 05       	cpc	r29, r1
			{
				lcd.print(currentSetTemperatureDining); 
     480:	29 f4       	brne	.+10     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     482:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <currentSetTemperatureDining>
     486:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <currentSetTemperatureDining+0x1>
			}
			else if (ns == 2)
			{
				lcd.print(currentSetTemperatureKids);
     48a:	06 c0       	rjmp	.+12     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     48c:	22 97       	sbiw	r28, 0x02	; 2
     48e:	59 f4       	brne	.+22     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     490:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <currentSetTemperatureKids>
     494:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <currentSetTemperatureKids+0x1>
     498:	4a e0       	ldi	r20, 0x0A	; 10
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	83 e1       	ldi	r24, 0x13	; 19
     49e:	94 e0       	ldi	r25, 0x04	; 4
			}
			else
			{
				lcd.write("??");
     4a0:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_ZN5Print5printEii>
     4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4a6:	65 ef       	ldi	r22, 0xF5	; 245
     4a8:	72 e0       	ldi	r23, 0x02	; 2
			}
			lcd.write(223);
     4aa:	83 e1       	ldi	r24, 0x13	; 19
     4ac:	94 e0       	ldi	r25, 0x04	; 4
     4ae:	2a df       	rcall	.-428    	; 0x304 <_ZN5Print5writeEPKc>
     4b0:	6f ed       	ldi	r22, 0xDF	; 223
     4b2:	83 e1       	ldi	r24, 0x13	; 19
			lcd.write("Inc.>B");
		break;
		
		//Current temperatures menu
		case 8:
			lcd.setCursor(0, 0);
     4b4:	94 e0       	ldi	r25, 0x04	; 4
     4b6:	08 d5       	rcall	.+2576   	; 0xec8 <_ZN13LiquidCrystal5writeEh>
     4b8:	9d c0       	rjmp	.+314    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
			lcd.write("Dining:"); lcd.print(currentTemperaturesDining); lcd.write(223);;
     4ba:	83 e1       	ldi	r24, 0x13	; 19
     4bc:	94 e0       	ldi	r25, 0x04	; 4
     4be:	3f d4       	rcall	.+2174   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     4c0:	68 ef       	ldi	r22, 0xF8	; 248
     4c2:	72 e0       	ldi	r23, 0x02	; 2
     4c4:	83 e1       	ldi	r24, 0x13	; 19
     4c6:	94 e0       	ldi	r25, 0x04	; 4
     4c8:	1d df       	rcall	.-454    	; 0x304 <_ZN5Print5writeEPKc>
     4ca:	60 91 30 04 	lds	r22, 0x0430	; 0x800430 <currentTemperaturesDining>
     4ce:	70 91 31 04 	lds	r23, 0x0431	; 0x800431 <currentTemperaturesDining+0x1>
     4d2:	4a e0       	ldi	r20, 0x0A	; 10
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	83 e1       	ldi	r24, 0x13	; 19
     4d8:	94 e0       	ldi	r25, 0x04	; 4
     4da:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_ZN5Print5printEii>
     4de:	6f ed       	ldi	r22, 0xDF	; 223
			lcd.setCursor(0, 1);
     4e0:	83 e1       	ldi	r24, 0x13	; 19
     4e2:	94 e0       	ldi	r25, 0x04	; 4
     4e4:	f1 d4       	rcall	.+2530   	; 0xec8 <_ZN13LiquidCrystal5writeEh>
     4e6:	41 e0       	ldi	r20, 0x01	; 1
     4e8:	60 e0       	ldi	r22, 0x00	; 0
			lcd.write("Kids:  "); lcd.print(currentTemperaturesKids); lcd.write(223);
     4ea:	83 e1       	ldi	r24, 0x13	; 19
     4ec:	94 e0       	ldi	r25, 0x04	; 4
     4ee:	27 d4       	rcall	.+2126   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	73 e0       	ldi	r23, 0x03	; 3
     4f4:	83 e1       	ldi	r24, 0x13	; 19
     4f6:	94 e0       	ldi	r25, 0x04	; 4
     4f8:	05 df       	rcall	.-502    	; 0x304 <_ZN5Print5writeEPKc>
     4fa:	60 91 2e 04 	lds	r22, 0x042E	; 0x80042e <currentTemperaturesKids>
     4fe:	70 91 2f 04 	lds	r23, 0x042F	; 0x80042f <currentTemperaturesKids+0x1>
     502:	4a e0       	ldi	r20, 0x0A	; 10
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	83 e1       	ldi	r24, 0x13	; 19
     508:	94 e0       	ldi	r25, 0x04	; 4
     50a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_ZN5Print5printEii>
     50e:	6f ed       	ldi	r22, 0xDF	; 223
			lcd.setCursor(11, 1);
     510:	83 e1       	ldi	r24, 0x13	; 19
     512:	94 e0       	ldi	r25, 0x04	; 4
     514:	d9 d4       	rcall	.+2482   	; 0xec8 <_ZN13LiquidCrystal5writeEh>
     516:	41 e0       	ldi	r20, 0x01	; 1
     518:	6b e0       	ldi	r22, 0x0B	; 11
			lcd.write("Set>A");
     51a:	83 e1       	ldi	r24, 0x13	; 19
     51c:	94 e0       	ldi	r25, 0x04	; 4
#pragma endregion

#pragma region Windows Menus
		//Window control menu if Auto Mode is on
		case 9:
			lcd.setCursor(0, 0);
     51e:	0f d4       	rcall	.+2078   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     520:	68 e0       	ldi	r22, 0x08	; 8
     522:	73 e0       	ldi	r23, 0x03	; 3
			lcd.write("Auto Mode is on!");
     524:	8a c0       	rjmp	.+276    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     526:	83 e1       	ldi	r24, 0x13	; 19
     528:	94 e0       	ldi	r25, 0x04	; 4
     52a:	09 d4       	rcall	.+2066   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     52c:	69 e5       	ldi	r22, 0x59	; 89
			lcd.setCursor(0, 1);
     52e:	72 e0       	ldi	r23, 0x02	; 2
     530:	83 e1       	ldi	r24, 0x13	; 19
     532:	94 e0       	ldi	r25, 0x04	; 4
     534:	e7 de       	rcall	.-562    	; 0x304 <_ZN5Print5writeEPKc>
     536:	41 e0       	ldi	r20, 0x01	; 1
			lcd.write("A<T.Off");
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	83 e1       	ldi	r24, 0x13	; 19
		break;
		
		//Window control menu if Auto Mode is Off
		case 10:
			lcd.setCursor(0, 0);
     53c:	94 e0       	ldi	r25, 0x04	; 4
     53e:	ff d3       	rcall	.+2046   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     540:	6a e6       	ldi	r22, 0x6A	; 106
     542:	72 e0       	ldi	r23, 0x02	; 2
			if (WindowIsOpen)
     544:	7a c0       	rjmp	.+244    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     546:	83 e1       	ldi	r24, 0x13	; 19
     548:	94 e0       	ldi	r25, 0x04	; 4
     54a:	f9 d3       	rcall	.+2034   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
			{
				lcd.write("A<Close window");
     54c:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <WindowIsOpen>
     550:	88 23       	and	r24, r24
			}
			else if (!WindowIsOpen)
			{
				lcd.write("A<Open window");
     552:	19 f0       	breq	.+6      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     554:	6e e0       	ldi	r22, 0x0E	; 14
     556:	73 e0       	ldi	r23, 0x03	; 3
     558:	02 c0       	rjmp	.+4      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     55a:	6d e1       	ldi	r22, 0x1D	; 29
			}
			lcd.setCursor(0, 1);
     55c:	73 e0       	ldi	r23, 0x03	; 3
     55e:	83 e1       	ldi	r24, 0x13	; 19
     560:	94 e0       	ldi	r25, 0x04	; 4
     562:	d0 de       	rcall	.-608    	; 0x304 <_ZN5Print5writeEPKc>
     564:	41 e0       	ldi	r20, 0x01	; 1
			lcd.write("B<T.Auto");
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	83 e1       	ldi	r24, 0x13	; 19
     56a:	94 e0       	ldi	r25, 0x04	; 4
     56c:	e8 d3       	rcall	.+2000   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     56e:	6b e2       	ldi	r22, 0x2B	; 43
			lcd.setCursor(10, 1);
     570:	73 e0       	ldi	r23, 0x03	; 3
     572:	83 e1       	ldi	r24, 0x13	; 19
     574:	94 e0       	ldi	r25, 0x04	; 4
     576:	c6 de       	rcall	.-628    	; 0x304 <_ZN5Print5writeEPKc>
     578:	41 e0       	ldi	r20, 0x01	; 1
			lcd.write("Humi>C");
     57a:	6a e0       	ldi	r22, 0x0A	; 10
     57c:	83 e1       	ldi	r24, 0x13	; 19
     57e:	94 e0       	ldi	r25, 0x04	; 4
		break;
		
		case 11:
			lcd.setCursor(0, 0);
     580:	de d3       	rcall	.+1980   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     582:	64 e3       	ldi	r22, 0x34	; 52
     584:	73 e0       	ldi	r23, 0x03	; 3
     586:	59 c0       	rjmp	.+178    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
			lcd.write("Humidity:"); lcd.print(currentHumidity); lcd.write("%");
     588:	83 e1       	ldi	r24, 0x13	; 19
     58a:	94 e0       	ldi	r25, 0x04	; 4
     58c:	d8 d3       	rcall	.+1968   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     58e:	6c e4       	ldi	r22, 0x4C	; 76
     590:	73 e0       	ldi	r23, 0x03	; 3
     592:	83 e1       	ldi	r24, 0x13	; 19
     594:	94 e0       	ldi	r25, 0x04	; 4
     596:	b6 de       	rcall	.-660    	; 0x304 <_ZN5Print5writeEPKc>
     598:	60 91 2c 04 	lds	r22, 0x042C	; 0x80042c <currentHumidity>
     59c:	70 91 2d 04 	lds	r23, 0x042D	; 0x80042d <currentHumidity+0x1>
     5a0:	4a e0       	ldi	r20, 0x0A	; 10
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	83 e1       	ldi	r24, 0x13	; 19
     5a6:	94 e0       	ldi	r25, 0x04	; 4
     5a8:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_ZN5Print5printEii>
			lcd.setCursor(0, 1);
     5ac:	6b e9       	ldi	r22, 0x9B	; 155
     5ae:	72 e0       	ldi	r23, 0x02	; 2
     5b0:	83 e1       	ldi	r24, 0x13	; 19
     5b2:	94 e0       	ldi	r25, 0x04	; 4
     5b4:	a7 de       	rcall	.-690    	; 0x304 <_ZN5Print5writeEPKc>
			lcd.write("A<Set Allowed");
     5b6:	41 e0       	ldi	r20, 0x01	; 1
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	83 e1       	ldi	r24, 0x13	; 19
		break;
		//Set allowed humidity
		case 12:
			lcd.setCursor(0, 0);
     5bc:	94 e0       	ldi	r25, 0x04	; 4
     5be:	bf d3       	rcall	.+1918   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     5c0:	6b e3       	ldi	r22, 0x3B	; 59
			lcd.write("Al.Humidity:"); lcd.print(currentSetHumidity); lcd.write("%");
     5c2:	73 e0       	ldi	r23, 0x03	; 3
     5c4:	3a c0       	rjmp	.+116    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     5c6:	83 e1       	ldi	r24, 0x13	; 19
     5c8:	94 e0       	ldi	r25, 0x04	; 4
     5ca:	b9 d3       	rcall	.+1906   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     5cc:	69 e4       	ldi	r22, 0x49	; 73
     5ce:	73 e0       	ldi	r23, 0x03	; 3
     5d0:	83 e1       	ldi	r24, 0x13	; 19
     5d2:	94 e0       	ldi	r25, 0x04	; 4
     5d4:	97 de       	rcall	.-722    	; 0x304 <_ZN5Print5writeEPKc>
     5d6:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <currentSetHumidity>
     5da:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <currentSetHumidity+0x1>
     5de:	4a e0       	ldi	r20, 0x0A	; 10
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	83 e1       	ldi	r24, 0x13	; 19
     5e4:	94 e0       	ldi	r25, 0x04	; 4
     5e6:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_ZN5Print5printEii>
			lcd.setCursor(0, 1);
     5ea:	6b e9       	ldi	r22, 0x9B	; 155
     5ec:	72 e0       	ldi	r23, 0x02	; 2
     5ee:	83 e1       	ldi	r24, 0x13	; 19
     5f0:	94 e0       	ldi	r25, 0x04	; 4
     5f2:	88 de       	rcall	.-752    	; 0x304 <_ZN5Print5writeEPKc>
     5f4:	41 e0       	ldi	r20, 0x01	; 1
			lcd.write("A<Dec.");
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	83 e1       	ldi	r24, 0x13	; 19
     5fa:	94 e0       	ldi	r25, 0x04	; 4
     5fc:	a0 d3       	rcall	.+1856   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     5fe:	6d e9       	ldi	r22, 0x9D	; 157
     600:	72 e0       	ldi	r23, 0x02	; 2
			lcd.setCursor(10, 1);
     602:	83 e1       	ldi	r24, 0x13	; 19
     604:	94 e0       	ldi	r25, 0x04	; 4
     606:	7e de       	rcall	.-772    	; 0x304 <_ZN5Print5writeEPKc>
     608:	41 e0       	ldi	r20, 0x01	; 1
     60a:	6a e0       	ldi	r22, 0x0A	; 10
     60c:	83 e1       	ldi	r24, 0x13	; 19
			lcd.write("Inc.>B");
     60e:	94 e0       	ldi	r25, 0x04	; 4
     610:	96 d3       	rcall	.+1836   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     612:	64 ea       	ldi	r22, 0xA4	; 164

#pragma endregion
		
		//Error menu
		default:
			lcd.setCursor(0, 0);
     614:	72 e0       	ldi	r23, 0x02	; 2
     616:	11 c0       	rjmp	.+34     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	83 e1       	ldi	r24, 0x13	; 19
     61e:	94 e0       	ldi	r25, 0x04	; 4
			lcd.write("Unknown Stage!");
     620:	8e d3       	rcall	.+1820   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     622:	66 e5       	ldi	r22, 0x56	; 86
     624:	73 e0       	ldi	r23, 0x03	; 3
     626:	83 e1       	ldi	r24, 0x13	; 19
     628:	94 e0       	ldi	r25, 0x04	; 4
     62a:	6c de       	rcall	.-808    	; 0x304 <_ZN5Print5writeEPKc>
			lcd.setCursor(0, 1);
     62c:	41 e0       	ldi	r20, 0x01	; 1
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	83 e1       	ldi	r24, 0x13	; 19
     632:	94 e0       	ldi	r25, 0x04	; 4
     634:	84 d3       	rcall	.+1800   	; 0xd3e <_ZN13LiquidCrystal9setCursorEhh>
     636:	65 e6       	ldi	r22, 0x65	; 101
			lcd.write("Try \"Reset\"!!!");
     638:	73 e0       	ldi	r23, 0x03	; 3
     63a:	83 e1       	ldi	r24, 0x13	; 19
     63c:	94 e0       	ldi	r25, 0x04	; 4
     63e:	df 91       	pop	r29
		break;
	}
     640:	cf 91       	pop	r28
     642:	60 ce       	rjmp	.-832    	; 0x304 <_ZN5Print5writeEPKc>

00000644 <setup>:
DHT dht(DHTPIN, DHTTYPE);
#pragma endregion

void setup() 
{
	lcd.begin(16, 2);
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	42 e0       	ldi	r20, 0x02	; 2
     648:	60 e1       	ldi	r22, 0x10	; 16
     64a:	83 e1       	ldi	r24, 0x13	; 19
     64c:	94 e0       	ldi	r25, 0x04	; 4
     64e:	90 d3       	rcall	.+1824   	; 0xd70 <_ZN13LiquidCrystal5beginEhhh>
	dht.begin();
     650:	67 e3       	ldi	r22, 0x37	; 55
     652:	8c e9       	ldi	r24, 0x9C	; 156
     654:	93 e0       	ldi	r25, 0x03	; 3
     656:	4a c0       	rjmp	.+148    	; 0x6ec <_ZN3DHT5beginEh>

00000658 <loop>:
}

void loop() 
{
	lcdMenuLoader(11, NULL);
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	8b e0       	ldi	r24, 0x0B	; 11
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	66 de       	rcall	.-820    	; 0x32e <_Z13lcdMenuLoaderii>
	GetCurrentTemperatureAndHumidity();
     662:	f0 c5       	rjmp	.+3040   	; 0x1244 <_Z32GetCurrentTemperatureAndHumidityv>

00000664 <_GLOBAL__sub_I_motorPin>:
     664:	cf 92       	push	r12
}
     666:	ef 92       	push	r14
     668:	0f 93       	push	r16

#pragma region LCD setup
//LCD is connected to these pins
const int rs = 8, en = 9, d4 = 10, d5 = 11, d6 = 12, d7 = 13;

LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
     66a:	8d e0       	ldi	r24, 0x0D	; 13
     66c:	c8 2e       	mov	r12, r24
     66e:	9c e0       	ldi	r25, 0x0C	; 12
     670:	e9 2e       	mov	r14, r25
     672:	0b e0       	ldi	r16, 0x0B	; 11
     674:	2a e0       	ldi	r18, 0x0A	; 10
     676:	49 e0       	ldi	r20, 0x09	; 9
     678:	68 e0       	ldi	r22, 0x08	; 8
     67a:	83 e1       	ldi	r24, 0x13	; 19
     67c:	94 e0       	ldi	r25, 0x04	; 4
     67e:	05 d4       	rcall	.+2058   	; 0xe8a <_ZN13LiquidCrystalC1Ehhhhhh>
// Connected keypad ROW0, ROW1, ROW2 and ROW3 to these pins.
byte rowPins[Rows] = {29, 28, 27, 26};
// Connected keypad COL0, COL1 and COL2 to these pins.
byte colPins[Cols] = {25, 24, 23, 22};
	
Keypad kpd = Keypad(makeKeymap(Keys), rowPins, colPins, Rows, Cols);
     680:	24 e0       	ldi	r18, 0x04	; 4
     682:	e2 2e       	mov	r14, r18
     684:	04 e0       	ldi	r16, 0x04	; 4
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	32 e0       	ldi	r19, 0x02	; 2
     68a:	44 e0       	ldi	r20, 0x04	; 4
     68c:	52 e0       	ldi	r21, 0x02	; 2
     68e:	68 e0       	ldi	r22, 0x08	; 8
     690:	72 e0       	ldi	r23, 0x02	; 2
     692:	8f ea       	ldi	r24, 0xAF	; 175
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	55 d2       	rcall	.+1194   	; 0xb42 <_ZN6KeypadC1EPcPhS1_hh>

#pragma region DHT11 sensor setup
#define DHTTYPE DHT11
#define DHTPIN 2

DHT dht(DHTPIN, DHTTYPE);
     698:	26 e0       	ldi	r18, 0x06	; 6
     69a:	4b e0       	ldi	r20, 0x0B	; 11
     69c:	62 e0       	ldi	r22, 0x02	; 2
     69e:	8c e9       	ldi	r24, 0x9C	; 156
     6a0:	93 e0       	ldi	r25, 0x03	; 3

void loop() 
{
	lcdMenuLoader(11, NULL);
	GetCurrentTemperatureAndHumidity();
}
     6a2:	0f 91       	pop	r16
     6a4:	ef 90       	pop	r14

#pragma region DHT11 sensor setup
#define DHTTYPE DHT11
#define DHTPIN 2

DHT dht(DHTPIN, DHTTYPE);
     6a6:	cf 90       	pop	r12
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <_ZN3DHTC1Ehhh>

000006aa <_ZN3DHTC1Ehhh>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     6aa:	dc 01       	movw	r26, r24
     6ac:	15 96       	adiw	r26, 0x05	; 5
     6ae:	6c 93       	st	X, r22
     6b0:	15 97       	sbiw	r26, 0x05	; 5
     6b2:	16 96       	adiw	r26, 0x06	; 6
     6b4:	4c 93       	st	X, r20
     6b6:	16 97       	sbiw	r26, 0x06	; 6
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	fb 01       	movw	r30, r22
     6bc:	ee 53       	subi	r30, 0x3E	; 62
     6be:	fe 4f       	sbci	r31, 0xFE	; 254
     6c0:	e4 91       	lpm	r30, Z
     6c2:	17 96       	adiw	r26, 0x07	; 7
     6c4:	ec 93       	st	X, r30
     6c6:	17 97       	sbiw	r26, 0x07	; 7
     6c8:	fb 01       	movw	r30, r22
     6ca:	e8 5f       	subi	r30, 0xF8	; 248
     6cc:	fd 4f       	sbci	r31, 0xFD	; 253
     6ce:	64 91       	lpm	r22, Z
     6d0:	18 96       	adiw	r26, 0x08	; 8
     6d2:	6c 93       	st	X, r22
     6d4:	18 97       	sbiw	r26, 0x08	; 8
     6d6:	40 e8       	ldi	r20, 0x80	; 128
     6d8:	5e e3       	ldi	r21, 0x3E	; 62
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	1d 96       	adiw	r26, 0x0d	; 13
     6e0:	4d 93       	st	X+, r20
     6e2:	5d 93       	st	X+, r21
     6e4:	6d 93       	st	X+, r22
     6e6:	7c 93       	st	X, r23
     6e8:	50 97       	sbiw	r26, 0x10	; 16
     6ea:	08 95       	ret

000006ec <_ZN3DHT5beginEh>:
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
     6f4:	16 2f       	mov	r17, r22
     6f6:	62 e0       	ldi	r22, 0x02	; 2
     6f8:	8d 81       	ldd	r24, Y+5	; 0x05
     6fa:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <pinMode>
     6fe:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <millis>
     702:	dc 01       	movw	r26, r24
     704:	cb 01       	movw	r24, r22
     706:	80 5d       	subi	r24, 0xD0	; 208
     708:	97 40       	sbci	r25, 0x07	; 7
     70a:	a1 09       	sbc	r26, r1
     70c:	b1 09       	sbc	r27, r1
     70e:	89 87       	std	Y+9, r24	; 0x09
     710:	9a 87       	std	Y+10, r25	; 0x0a
     712:	ab 87       	std	Y+11, r26	; 0x0b
     714:	bc 87       	std	Y+12, r27	; 0x0c
     716:	1a 8b       	std	Y+18, r17	; 0x12
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	08 95       	ret

00000720 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
     720:	cf 92       	push	r12
     722:	df 92       	push	r13
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	ec 01       	movw	r28, r24
     730:	1f 81       	ldd	r17, Y+7	; 0x07
  uint16_t count = 0; // To work fast enough on slower AVR boards
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
     732:	66 23       	and	r22, r22
     734:	11 f0       	breq	.+4      	; 0x73a <_ZN3DHT11expectPulseEb+0x1a>
     736:	91 2f       	mov	r25, r17
     738:	01 c0       	rjmp	.+2      	; 0x73c <_ZN3DHT11expectPulseEb+0x1c>
     73a:	90 e0       	ldi	r25, 0x00	; 0
  while ((*portInputRegister(_port) & _bit) == portState) {
     73c:	28 85       	ldd	r18, Y+8	; 0x08
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	22 0f       	add	r18, r18
     742:	33 1f       	adc	r19, r19
     744:	22 5b       	subi	r18, 0xB2	; 178
     746:	3d 4f       	sbci	r19, 0xFD	; 253
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
  while ((*portInputRegister(_port) & _bit) == portState) {
     74c:	f9 01       	movw	r30, r18
     74e:	45 91       	lpm	r20, Z+
     750:	54 91       	lpm	r21, Z
     752:	fa 01       	movw	r30, r20
     754:	80 81       	ld	r24, Z
     756:	81 23       	and	r24, r17
     758:	ad 01       	movw	r20, r26
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	98 13       	cpse	r25, r24
     760:	0f c0       	rjmp	.+30     	; 0x780 <_ZN3DHT11expectPulseEb+0x60>
    if (count++ >= _maxcycles) {
     762:	11 96       	adiw	r26, 0x01	; 1
     764:	cd 84       	ldd	r12, Y+13	; 0x0d
     766:	de 84       	ldd	r13, Y+14	; 0x0e
     768:	ef 84       	ldd	r14, Y+15	; 0x0f
     76a:	f8 88       	ldd	r15, Y+16	; 0x10
     76c:	4c 15       	cp	r20, r12
     76e:	5d 05       	cpc	r21, r13
     770:	6e 05       	cpc	r22, r14
     772:	7f 05       	cpc	r23, r15
     774:	58 f3       	brcs	.-42     	; 0x74c <_ZN3DHT11expectPulseEb+0x2c>
      return TIMEOUT; // Exceeded timeout, fail.
     776:	3f ef       	ldi	r19, 0xFF	; 255
     778:	2f ef       	ldi	r18, 0xFF	; 255
     77a:	8f ef       	ldi	r24, 0xFF	; 255
     77c:	9f ef       	ldi	r25, 0xFF	; 255
     77e:	03 c0       	rjmp	.+6      	; 0x786 <_ZN3DHT11expectPulseEb+0x66>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
     780:	3a 2f       	mov	r19, r26
     782:	25 2f       	mov	r18, r21
     784:	cb 01       	movw	r24, r22
}
     786:	63 2f       	mov	r22, r19
     788:	72 2f       	mov	r23, r18
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	08 95       	ret

0000079a <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
     79a:	8f 92       	push	r8
     79c:	9f 92       	push	r9
     79e:	af 92       	push	r10
     7a0:	bf 92       	push	r11
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	c0 54       	subi	r28, 0x40	; 64
     7b8:	d1 40       	sbci	r29, 0x01	; 1
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	8c 01       	movw	r16, r24
     7c6:	f6 2e       	mov	r15, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
     7c8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <millis>
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
     7cc:	f1 10       	cpse	r15, r1
     7ce:	16 c0       	rjmp	.+44     	; 0x7fc <_ZN3DHT4readEb+0x62>
     7d0:	f8 01       	movw	r30, r16
     7d2:	c1 84       	ldd	r12, Z+9	; 0x09
     7d4:	d2 84       	ldd	r13, Z+10	; 0x0a
     7d6:	e3 84       	ldd	r14, Z+11	; 0x0b
     7d8:	f4 84       	ldd	r15, Z+12	; 0x0c
     7da:	9b 01       	movw	r18, r22
     7dc:	ac 01       	movw	r20, r24
     7de:	2c 19       	sub	r18, r12
     7e0:	3d 09       	sbc	r19, r13
     7e2:	4e 09       	sbc	r20, r14
     7e4:	5f 09       	sbc	r21, r15
     7e6:	69 01       	movw	r12, r18
     7e8:	7a 01       	movw	r14, r20
     7ea:	30 ed       	ldi	r19, 0xD0	; 208
     7ec:	c3 16       	cp	r12, r19
     7ee:	37 e0       	ldi	r19, 0x07	; 7
     7f0:	d3 06       	cpc	r13, r19
     7f2:	e1 04       	cpc	r14, r1
     7f4:	f1 04       	cpc	r15, r1
     7f6:	10 f4       	brcc	.+4      	; 0x7fc <_ZN3DHT4readEb+0x62>
    return _lastresult; // return last correct measurement
     7f8:	81 89       	ldd	r24, Z+17	; 0x11
     7fa:	b6 c0       	rjmp	.+364    	; 0x968 <_ZN3DHT4readEb+0x1ce>
  }
  _lastreadtime = currenttime;
     7fc:	f8 01       	movw	r30, r16
     7fe:	61 87       	std	Z+9, r22	; 0x09
     800:	72 87       	std	Z+10, r23	; 0x0a
     802:	83 87       	std	Z+11, r24	; 0x0b
     804:	94 87       	std	Z+12, r25	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
     806:	14 82       	std	Z+4, r1	; 0x04
     808:	13 82       	std	Z+3, r1	; 0x03
     80a:	12 82       	std	Z+2, r1	; 0x02
     80c:	11 82       	std	Z+1, r1	; 0x01
     80e:	10 82       	st	Z, r1
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
     810:	62 e0       	ldi	r22, 0x02	; 2
     812:	85 81       	ldd	r24, Z+5	; 0x05
     814:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <pinMode>
  delay(1);
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	f8 01       	movw	r30, r16
     828:	85 81       	ldd	r24, Z+5	; 0x05
     82a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <pinMode>
  digitalWrite(_pin, LOW);
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	f8 01       	movw	r30, r16
     832:	85 81       	ldd	r24, Z+5	; 0x05
     834:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <digitalWrite>
  switch (_type) {
     838:	f8 01       	movw	r30, r16
     83a:	86 81       	ldd	r24, Z+6	; 0x06
     83c:	85 51       	subi	r24, 0x15	; 21
     83e:	82 30       	cpi	r24, 0x02	; 2
     840:	28 f4       	brcc	.+10     	; 0x84c <_ZN3DHT4readEb+0xb2>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
     842:	8c e4       	ldi	r24, 0x4C	; 76
     844:	94 e0       	ldi	r25, 0x04	; 4
     846:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <delayMicroseconds>
    break;
     84a:	06 c0       	rjmp	.+12     	; 0x858 <_ZN3DHT4readEb+0xbe>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
     84c:	64 e1       	ldi	r22, 0x14	; 20
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <delay>
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
     858:	62 e0       	ldi	r22, 0x02	; 2
     85a:	f8 01       	movw	r30, r16
     85c:	85 81       	ldd	r24, Z+5	; 0x05
     85e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
     862:	f8 01       	movw	r30, r16
     864:	82 89       	ldd	r24, Z+18	; 0x12
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <delayMicroseconds>
 */
class InterruptLock {
public:
  InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    noInterrupts();
     86c:	f8 94       	cli
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	c8 01       	movw	r24, r16
     872:	56 df       	rcall	.-340    	; 0x720 <_ZN3DHT11expectPulseEb>
     874:	6f 3f       	cpi	r22, 0xFF	; 255
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	8f 4f       	sbci	r24, 0xFF	; 255
     87a:	9f 4f       	sbci	r25, 0xFF	; 255
     87c:	21 f4       	brne	.+8      	; 0x886 <_ZN3DHT4readEb+0xec>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
     87e:	f8 01       	movw	r30, r16
     880:	11 8a       	std	Z+17, r1	; 0x11
#endif
  }
  ~InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    interrupts();
     882:	78 94       	sei
     884:	42 c0       	rjmp	.+132    	; 0x90a <_ZN3DHT4readEb+0x170>
      return _lastresult;
    }
    if (expectPulse(HIGH) == TIMEOUT) {
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	c8 01       	movw	r24, r16
     88a:	4a df       	rcall	.-364    	; 0x720 <_ZN3DHT11expectPulseEb>
     88c:	6f 3f       	cpi	r22, 0xFF	; 255
     88e:	7f 4f       	sbci	r23, 0xFF	; 255
     890:	8f 4f       	sbci	r24, 0xFF	; 255
     892:	9f 4f       	sbci	r25, 0xFF	; 255
     894:	a1 f3       	breq	.-24     	; 0x87e <_ZN3DHT4readEb+0xe4>
     896:	9e 01       	movw	r18, r28
     898:	2f 5f       	subi	r18, 0xFF	; 255
     89a:	3f 4f       	sbci	r19, 0xFF	; 255
     89c:	79 01       	movw	r14, r18
     89e:	5e 01       	movw	r10, r28
     8a0:	3f eb       	ldi	r19, 0xBF	; 191
     8a2:	a3 1a       	sub	r10, r19
     8a4:	3e ef       	ldi	r19, 0xFE	; 254
     8a6:	b3 0a       	sbc	r11, r19
     8a8:	67 01       	movw	r12, r14
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
      cycles[i] = expectPulse(LOW);
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	c8 01       	movw	r24, r16
     8ae:	38 df       	rcall	.-400    	; 0x720 <_ZN3DHT11expectPulseEb>
     8b0:	f6 01       	movw	r30, r12
     8b2:	60 83       	st	Z, r22
     8b4:	71 83       	std	Z+1, r23	; 0x01
     8b6:	82 83       	std	Z+2, r24	; 0x02
     8b8:	93 83       	std	Z+3, r25	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	c8 01       	movw	r24, r16
     8be:	30 df       	rcall	.-416    	; 0x720 <_ZN3DHT11expectPulseEb>
     8c0:	f6 01       	movw	r30, r12
     8c2:	64 83       	std	Z+4, r22	; 0x04
     8c4:	75 83       	std	Z+5, r23	; 0x05
     8c6:	86 83       	std	Z+6, r24	; 0x06
     8c8:	97 83       	std	Z+7, r25	; 0x07
     8ca:	f8 e0       	ldi	r31, 0x08	; 8
     8cc:	cf 0e       	add	r12, r31
     8ce:	d1 1c       	adc	r13, r1
     8d0:	ca 14       	cp	r12, r10
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
     8d2:	db 04       	cpc	r13, r11
     8d4:	51 f7       	brne	.-44     	; 0x8aa <_ZN3DHT4readEb+0x110>
     8d6:	78 94       	sei
     8d8:	20 e0       	ldi	r18, 0x00	; 0
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	f7 01       	movw	r30, r14
    uint32_t lowCycles = cycles[2 * i];
     8de:	80 80       	ld	r8, Z
     8e0:	91 80       	ldd	r9, Z+1	; 0x01
     8e2:	a2 80       	ldd	r10, Z+2	; 0x02
     8e4:	b3 80       	ldd	r11, Z+3	; 0x03
     8e6:	44 81       	ldd	r20, Z+4	; 0x04
    uint32_t highCycles = cycles[2 * i + 1];
     8e8:	55 81       	ldd	r21, Z+5	; 0x05
     8ea:	66 81       	ldd	r22, Z+6	; 0x06
     8ec:	77 81       	ldd	r23, Z+7	; 0x07
     8ee:	ff ef       	ldi	r31, 0xFF	; 255
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
     8f0:	8f 16       	cp	r8, r31
     8f2:	9f 06       	cpc	r9, r31
     8f4:	af 06       	cpc	r10, r31
     8f6:	bf 06       	cpc	r11, r31
     8f8:	31 f0       	breq	.+12     	; 0x906 <_ZN3DHT4readEb+0x16c>
     8fa:	4f 3f       	cpi	r20, 0xFF	; 255
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	58 07       	cpc	r21, r24
     900:	68 07       	cpc	r22, r24
     902:	78 07       	cpc	r23, r24
     904:	21 f4       	brne	.+8      	; 0x90e <_ZN3DHT4readEb+0x174>
     906:	f8 01       	movw	r30, r16
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
     908:	11 8a       	std	Z+17, r1	; 0x11
     90a:	80 e0       	ldi	r24, 0x00	; 0
      return _lastresult;
     90c:	2d c0       	rjmp	.+90     	; 0x968 <_ZN3DHT4readEb+0x1ce>
     90e:	f9 01       	movw	r30, r18
    }
    data[i / 8] <<= 1;
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	f5 95       	asr	r31
     914:	e7 95       	ror	r30
     916:	8a 95       	dec	r24
     918:	e1 f7       	brne	.-8      	; 0x912 <_ZN3DHT4readEb+0x178>
     91a:	e0 0f       	add	r30, r16
     91c:	f1 1f       	adc	r31, r17
     91e:	80 81       	ld	r24, Z
     920:	88 0f       	add	r24, r24
     922:	84 16       	cp	r8, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
     924:	95 06       	cpc	r9, r21
     926:	a6 06       	cpc	r10, r22
     928:	b7 06       	cpc	r11, r23
     92a:	08 f4       	brcc	.+2      	; 0x92e <_ZN3DHT4readEb+0x194>
     92c:	81 60       	ori	r24, 0x01	; 1
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
     92e:	80 83       	st	Z, r24
     930:	2f 5f       	subi	r18, 0xFF	; 255
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
     932:	3f 4f       	sbci	r19, 0xFF	; 255
     934:	f8 e0       	ldi	r31, 0x08	; 8
     936:	ef 0e       	add	r14, r31
     938:	f1 1c       	adc	r15, r1
     93a:	28 32       	cpi	r18, 0x28	; 40
     93c:	31 05       	cpc	r19, r1
     93e:	71 f6       	brne	.-100    	; 0x8dc <_ZN3DHT4readEb+0x142>
     940:	f8 01       	movw	r30, r16
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
     942:	24 81       	ldd	r18, Z+4	; 0x04
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 81       	ld	r20, Z
     948:	81 81       	ldd	r24, Z+1	; 0x01
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	84 0f       	add	r24, r20
     94e:	91 1d       	adc	r25, r1
     950:	42 81       	ldd	r20, Z+2	; 0x02
     952:	84 0f       	add	r24, r20
     954:	91 1d       	adc	r25, r1
     956:	43 81       	ldd	r20, Z+3	; 0x03
     958:	84 0f       	add	r24, r20
     95a:	91 1d       	adc	r25, r1
     95c:	99 27       	eor	r25, r25
     95e:	28 17       	cp	r18, r24
     960:	39 07       	cpc	r19, r25
     962:	89 f6       	brne	.-94     	; 0x906 <_ZN3DHT4readEb+0x16c>
     964:	81 e0       	ldi	r24, 0x01	; 1
    _lastresult = true;
     966:	81 8b       	std	Z+17, r24	; 0x11
     968:	c0 5c       	subi	r28, 0xC0	; 192
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
     96a:	de 4f       	sbci	r29, 0xFE	; 254
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	bf 90       	pop	r11
     988:	af 90       	pop	r10
     98a:	9f 90       	pop	r9
     98c:	8f 90       	pop	r8
     98e:	08 95       	ret

00000990 <_ZN3DHT15readTemperatureEbb>:
     990:	cf 92       	push	r12
 *					- false = Celcius
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
     992:	df 92       	push	r13
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	8c 01       	movw	r16, r24
     9a2:	c6 2f       	mov	r28, r22
  float f = NAN;

  if (read(force)) {
     9a4:	64 2f       	mov	r22, r20
     9a6:	f9 de       	rcall	.-526    	; 0x79a <_ZN3DHT4readEb>
     9a8:	88 23       	and	r24, r24
     9aa:	09 f4       	brne	.+2      	; 0x9ae <_ZN3DHT15readTemperatureEbb+0x1e>
     9ac:	6b c0       	rjmp	.+214    	; 0xa84 <_ZN3DHT15readTemperatureEbb+0xf4>
    switch (_type) {
     9ae:	f8 01       	movw	r30, r16
     9b0:	86 81       	ldd	r24, Z+6	; 0x06
     9b2:	8c 30       	cpi	r24, 0x0C	; 12
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <_ZN3DHT15readTemperatureEbb+0x28>
     9b6:	3e c0       	rjmp	.+124    	; 0xa34 <_ZN3DHT15readTemperatureEbb+0xa4>
     9b8:	18 f4       	brcc	.+6      	; 0x9c0 <_ZN3DHT15readTemperatureEbb+0x30>
     9ba:	8b 30       	cpi	r24, 0x0B	; 11
     9bc:	b9 f0       	breq	.+46     	; 0x9ec <_ZN3DHT15readTemperatureEbb+0x5c>
     9be:	62 c0       	rjmp	.+196    	; 0xa84 <_ZN3DHT15readTemperatureEbb+0xf4>
     9c0:	85 51       	subi	r24, 0x15	; 21
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	08 f0       	brcs	.+2      	; 0x9c8 <_ZN3DHT15readTemperatureEbb+0x38>
     9c6:	5e c0       	rjmp	.+188    	; 0xa84 <_ZN3DHT15readTemperatureEbb+0xf4>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
     9c8:	f8 01       	movw	r30, r16
     9ca:	d2 81       	ldd	r29, Z+2	; 0x02
      f *= 0.1;
     9cc:	6d 2f       	mov	r22, r29
     9ce:	6f 77       	andi	r22, 0x7F	; 127
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	76 2f       	mov	r23, r22
     9d4:	66 27       	eor	r22, r22
     9d6:	83 81       	ldd	r24, Z+3	; 0x03
     9d8:	68 2b       	or	r22, r24
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	4c d5       	rcall	.+2712   	; 0x1478 <__floatunsisf>
     9e0:	2d ec       	ldi	r18, 0xCD	; 205
     9e2:	3c ec       	ldi	r19, 0xCC	; 204
     9e4:	4c ec       	ldi	r20, 0xCC	; 204
     9e6:	5d e3       	ldi	r21, 0x3D	; 61
     9e8:	1a d6       	rcall	.+3124   	; 0x161e <__mulsf3>
     9ea:	3d c0       	rjmp	.+122    	; 0xa66 <_ZN3DHT15readTemperatureEbb+0xd6>
  float f = NAN;

  if (read(force)) {
    switch (_type) {
    case DHT11:
      f = data[2];
     9ec:	f8 01       	movw	r30, r16
     9ee:	62 81       	ldd	r22, Z+2	; 0x02
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	40 d5       	rcall	.+2688   	; 0x1478 <__floatunsisf>
     9f8:	6b 01       	movw	r12, r22
     9fa:	7c 01       	movw	r14, r24
      if (data[3] & 0x80) {
     9fc:	f8 01       	movw	r30, r16
     9fe:	d3 81       	ldd	r29, Z+3	; 0x03
     a00:	d7 ff       	sbrs	r29, 7
     a02:	09 c0       	rjmp	.+18     	; 0xa16 <_ZN3DHT15readTemperatureEbb+0x86>
        f = -1 - f;
     a04:	9b 01       	movw	r18, r22
     a06:	ac 01       	movw	r20, r24
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	80 e8       	ldi	r24, 0x80	; 128
     a0e:	9f eb       	ldi	r25, 0xBF	; 191
     a10:	35 d4       	rcall	.+2154   	; 0x127c <__subsf3>
     a12:	6b 01       	movw	r12, r22
     a14:	7c 01       	movw	r14, r24
      }
      f += (data[3] & 0x0f) * 0.1;
     a16:	6d 2f       	mov	r22, r29
     a18:	6f 70       	andi	r22, 0x0F	; 15
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	2d d5       	rcall	.+2650   	; 0x147c <__floatsisf>
     a22:	2d ec       	ldi	r18, 0xCD	; 205
     a24:	3c ec       	ldi	r19, 0xCC	; 204
     a26:	4c ec       	ldi	r20, 0xCC	; 204
     a28:	5d e3       	ldi	r21, 0x3D	; 61
     a2a:	f9 d5       	rcall	.+3058   	; 0x161e <__mulsf3>
     a2c:	a7 01       	movw	r20, r14
     a2e:	96 01       	movw	r18, r12
     a30:	26 d4       	rcall	.+2124   	; 0x127e <__addsf3>
     a32:	1b c0       	rjmp	.+54     	; 0xa6a <_ZN3DHT15readTemperatureEbb+0xda>
      if (S) {
        f = convertCtoF(f);
      }
      break;
    case DHT12:
      f = data[2];
     a34:	f8 01       	movw	r30, r16
     a36:	d2 81       	ldd	r29, Z+2	; 0x02
      f += (data[3] & 0x0f) * 0.1;
     a38:	63 81       	ldd	r22, Z+3	; 0x03
     a3a:	6f 70       	andi	r22, 0x0F	; 15
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	1c d5       	rcall	.+2616   	; 0x147c <__floatsisf>
     a44:	2d ec       	ldi	r18, 0xCD	; 205
     a46:	3c ec       	ldi	r19, 0xCC	; 204
     a48:	4c ec       	ldi	r20, 0xCC	; 204
     a4a:	5d e3       	ldi	r21, 0x3D	; 61
     a4c:	e8 d5       	rcall	.+3024   	; 0x161e <__mulsf3>
     a4e:	6b 01       	movw	r12, r22
     a50:	7c 01       	movw	r14, r24
     a52:	6d 2f       	mov	r22, r29
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e d5       	rcall	.+2588   	; 0x1478 <__floatunsisf>
     a5c:	9b 01       	movw	r18, r22
     a5e:	ac 01       	movw	r20, r24
     a60:	c7 01       	movw	r24, r14
     a62:	b6 01       	movw	r22, r12
     a64:	0c d4       	rcall	.+2072   	; 0x127e <__addsf3>
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
     a66:	d7 fd       	sbrc	r29, 7
        f *= -1;
      }
      if (S) {
     a68:	90 58       	subi	r25, 0x80	; 128
     a6a:	cc 23       	and	r28, r28
 *  @brief  Converts Celcius to Fahrenheit
 *  @param  c
 *					value in Celcius
 *	@return float value in Fahrenheit
 */
float DHT::convertCtoF(float c) { return c * 1.8 + 32; }
     a6c:	79 f0       	breq	.+30     	; 0xa8c <_ZN3DHT15readTemperatureEbb+0xfc>
     a6e:	26 e6       	ldi	r18, 0x66	; 102
     a70:	36 e6       	ldi	r19, 0x66	; 102
     a72:	46 ee       	ldi	r20, 0xE6	; 230
     a74:	5f e3       	ldi	r21, 0x3F	; 63
     a76:	d3 d5       	rcall	.+2982   	; 0x161e <__mulsf3>
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	52 e4       	ldi	r21, 0x42	; 66
     a80:	fe d3       	rcall	.+2044   	; 0x127e <__addsf3>
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <_ZN3DHT15readTemperatureEbb+0xfc>
     a84:	60 e0       	ldi	r22, 0x00	; 0
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	80 ec       	ldi	r24, 0xC0	; 192
     a8a:	9f e7       	ldi	r25, 0x7F	; 127
     a8c:	df 91       	pop	r29
      }
      break;
    }
  }
  return f;
}
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	df 90       	pop	r13
     a9a:	cf 90       	pop	r12
     a9c:	08 95       	ret

00000a9e <_ZN3DHT12readHumidityEb>:
     a9e:	cf 92       	push	r12
 *  @brief  Read Humidity
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	ec 01       	movw	r28, r24
  float f = NAN;
  if (read(force)) {
     aac:	76 de       	rcall	.-788    	; 0x79a <_ZN3DHT4readEb>
     aae:	88 23       	and	r24, r24
     ab0:	69 f1       	breq	.+90     	; 0xb0c <_ZN3DHT12readHumidityEb+0x6e>
    switch (_type) {
     ab2:	8e 81       	ldd	r24, Y+6	; 0x06
     ab4:	8b 30       	cpi	r24, 0x0B	; 11
     ab6:	50 f1       	brcs	.+84     	; 0xb0c <_ZN3DHT12readHumidityEb+0x6e>
     ab8:	8d 30       	cpi	r24, 0x0D	; 13
     aba:	88 f0       	brcs	.+34     	; 0xade <_ZN3DHT12readHumidityEb+0x40>
     abc:	85 51       	subi	r24, 0x15	; 21
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	28 f5       	brcc	.+74     	; 0xb0c <_ZN3DHT12readHumidityEb+0x6e>
    case DHT12:
      f = data[0] + data[1] * 0.1;
      break;
    case DHT22:
    case DHT21:
      f = ((word)data[0]) << 8 | data[1];
     ac2:	68 81       	ld	r22, Y
     ac4:	79 81       	ldd	r23, Y+1	; 0x01
     ac6:	76 27       	eor	r23, r22
     ac8:	67 27       	eor	r22, r23
     aca:	76 27       	eor	r23, r22
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	d3 d4       	rcall	.+2470   	; 0x1478 <__floatunsisf>
      f *= 0.1;
     ad2:	2d ec       	ldi	r18, 0xCD	; 205
     ad4:	3c ec       	ldi	r19, 0xCC	; 204
     ad6:	4c ec       	ldi	r20, 0xCC	; 204
     ad8:	5d e3       	ldi	r21, 0x3D	; 61
     ada:	a1 d5       	rcall	.+2882   	; 0x161e <__mulsf3>
      break;
     adc:	1b c0       	rjmp	.+54     	; 0xb14 <_ZN3DHT12readHumidityEb+0x76>
  float f = NAN;
  if (read(force)) {
    switch (_type) {
    case DHT11:
    case DHT12:
      f = data[0] + data[1] * 0.1;
     ade:	69 81       	ldd	r22, Y+1	; 0x01
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	ca d4       	rcall	.+2452   	; 0x147c <__floatsisf>
     ae8:	2d ec       	ldi	r18, 0xCD	; 205
     aea:	3c ec       	ldi	r19, 0xCC	; 204
     aec:	4c ec       	ldi	r20, 0xCC	; 204
     aee:	5d e3       	ldi	r21, 0x3D	; 61
     af0:	96 d5       	rcall	.+2860   	; 0x161e <__mulsf3>
     af2:	6b 01       	movw	r12, r22
     af4:	7c 01       	movw	r14, r24
     af6:	68 81       	ld	r22, Y
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	be d4       	rcall	.+2428   	; 0x147c <__floatsisf>
     b00:	9b 01       	movw	r18, r22
     b02:	ac 01       	movw	r20, r24
     b04:	c7 01       	movw	r24, r14
     b06:	b6 01       	movw	r22, r12
     b08:	ba d3       	rcall	.+1908   	; 0x127e <__addsf3>
     b0a:	04 c0       	rjmp	.+8      	; 0xb14 <_ZN3DHT12readHumidityEb+0x76>
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
  float f = NAN;
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	80 ec       	ldi	r24, 0xC0	; 192
     b12:	9f e7       	ldi	r25, 0x7F	; 127
      f *= 0.1;
      break;
    }
  }
  return f;
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	cf 90       	pop	r12
     b20:	08 95       	ret

00000b22 <_ZN3KeyC1Ev>:
*/
#include <Key.h>


// default constructor
Key::Key() {
     b22:	fc 01       	movw	r30, r24
	kchar = NO_KEY;
     b24:	10 82       	st	Z, r1
	kstate = IDLE;
     b26:	13 82       	std	Z+3, r1	; 0x03
	stateChanged = false;
     b28:	14 82       	std	Z+4, r1	; 0x04
     b2a:	08 95       	ret

00000b2c <_ZN6Keypad8pin_readEh>:

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
	virtual void pin_write(byte pinNum, boolean level) { digitalWrite(pinNum, level); }
	virtual int  pin_read(byte pinNum) { return digitalRead(pinNum); }
     b2c:	86 2f       	mov	r24, r22
     b2e:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <digitalRead>

00000b32 <_ZN6Keypad9pin_writeEhb>:
public:

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
	virtual void pin_write(byte pinNum, boolean level) { digitalWrite(pinNum, level); }
     b32:	86 2f       	mov	r24, r22
     b34:	64 2f       	mov	r22, r20
     b36:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <digitalWrite>

00000b3a <_ZN6Keypad8pin_modeEhh>:
class Keypad : public Key {
public:

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
     b3a:	86 2f       	mov	r24, r22
     b3c:	64 2f       	mov	r22, r20
     b3e:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <pinMode>

00000b42 <_ZN6KeypadC1EPcPhS1_hh>:
||
*/
#include <Keypad.h>

// <<constructor>> Allows custom keymap, pin configuration, and keypad sizes.
Keypad::Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols) {
     b42:	4f 92       	push	r4
     b44:	5f 92       	push	r5
     b46:	6f 92       	push	r6
     b48:	7f 92       	push	r7
     b4a:	8f 92       	push	r8
     b4c:	9f 92       	push	r9
     b4e:	af 92       	push	r10
     b50:	bf 92       	push	r11
     b52:	cf 92       	push	r12
     b54:	df 92       	push	r13
     b56:	ef 92       	push	r14
     b58:	0f 93       	push	r16
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	ec 01       	movw	r28, r24
     b60:	6b 01       	movw	r12, r22
     b62:	4a 01       	movw	r8, r20
     b64:	59 01       	movw	r10, r18
     b66:	02 96       	adiw	r24, 0x02	; 2
     b68:	dc df       	rcall	.-72     	; 0xb22 <_ZN3KeyC1Ev>
     b6a:	88 e7       	ldi	r24, 0x78	; 120
     b6c:	93 e0       	ldi	r25, 0x03	; 3
     b6e:	99 83       	std	Y+1, r25	; 0x01
     b70:	88 83       	st	Y, r24
     b72:	2e 01       	movw	r4, r28
     b74:	8b e1       	ldi	r24, 0x1B	; 27
     b76:	48 0e       	add	r4, r24
     b78:	51 1c       	adc	r5, r1
     b7a:	3e 01       	movw	r6, r28
     b7c:	8d e4       	ldi	r24, 0x4D	; 77
     b7e:	68 0e       	add	r6, r24
     b80:	71 1c       	adc	r7, r1
     b82:	c2 01       	movw	r24, r4
     b84:	ce df       	rcall	.-100    	; 0xb22 <_ZN3KeyC1Ev>
     b86:	85 e0       	ldi	r24, 0x05	; 5
     b88:	48 0e       	add	r4, r24
     b8a:	51 1c       	adc	r5, r1
     b8c:	46 14       	cp	r4, r6
     b8e:	57 04       	cpc	r5, r7
     b90:	c1 f7       	brne	.-16     	; 0xb82 <_ZN6KeypadC1EPcPhS1_hh+0x40>
	rowPins = row;
     b92:	fe 01       	movw	r30, r28
     b94:	e9 5a       	subi	r30, 0xA9	; 169
     b96:	ff 4f       	sbci	r31, 0xFF	; 255
     b98:	91 82       	std	Z+1, r9	; 0x01
     b9a:	80 82       	st	Z, r8
	columnPins = col;
     b9c:	32 96       	adiw	r30, 0x02	; 2
     b9e:	b1 82       	std	Z+1, r11	; 0x01
     ba0:	a0 82       	st	Z, r10
	sizeKpd.rows = numRows;
     ba2:	32 96       	adiw	r30, 0x02	; 2
     ba4:	00 83       	st	Z, r16
	sizeKpd.columns = numCols;
     ba6:	31 96       	adiw	r30, 0x01	; 1
     ba8:	e0 82       	st	Z, r14
	single_key = false;
}

// Let the user define a keymap - assume the same row/column count as defined in constructor
void Keypad::begin(char *userKeymap) {
    keymap = userKeymap;
     baa:	37 97       	sbiw	r30, 0x07	; 7
     bac:	d1 82       	std	Z+1, r13	; 0x01
     bae:	c0 82       	st	Z, r12
	return sizeof(key)/sizeof(Key);
}

// Minimum debounceTime is 1 mS. Any lower *will* slow down the loop().
void Keypad::setDebounceTime(uint debounce) {
	debounce<1 ? debounceTime=1 : debounceTime=debounce;
     bb0:	38 96       	adiw	r30, 0x08	; 8
     bb2:	8a e0       	ldi	r24, 0x0A	; 10
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	91 83       	std	Z+1, r25	; 0x01
     bb8:	80 83       	st	Z, r24
}

void Keypad::setHoldTime(uint hold) {
    holdTime = hold;
     bba:	32 96       	adiw	r30, 0x02	; 2
     bbc:	84 ef       	ldi	r24, 0xF4	; 244
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	91 83       	std	Z+1, r25	; 0x01
     bc2:	80 83       	st	Z, r24

	begin(userKeymap);

	setDebounceTime(10);
	setHoldTime(500);
	keypadEventListener = 0;
     bc4:	33 96       	adiw	r30, 0x03	; 3
     bc6:	11 82       	std	Z+1, r1	; 0x01
     bc8:	10 82       	st	Z, r1

	startTime = 0;
     bca:	71 97       	sbiw	r30, 0x11	; 17
     bcc:	10 82       	st	Z, r1
     bce:	11 82       	std	Z+1, r1	; 0x01
     bd0:	12 82       	std	Z+2, r1	; 0x02
     bd2:	13 82       	std	Z+3, r1	; 0x03
	single_key = false;
     bd4:	cf 59       	subi	r28, 0x9F	; 159
     bd6:	df 4f       	sbci	r29, 0xFF	; 255
     bd8:	18 82       	st	Y, r1
}
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	0f 91       	pop	r16
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	cf 90       	pop	r12
     be6:	bf 90       	pop	r11
     be8:	af 90       	pop	r10
     bea:	9f 90       	pop	r9
     bec:	8f 90       	pop	r8
     bee:	7f 90       	pop	r7
     bf0:	6f 90       	pop	r6
     bf2:	5f 90       	pop	r5
     bf4:	4f 90       	pop	r4
     bf6:	08 95       	ret

00000bf8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	08 95       	ret

00000bfe <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     bfe:	08 95       	ret

00000c00 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	ec 01       	movw	r28, r24
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	8e 81       	ldd	r24, Y+6	; 0x06
     c0a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <digitalWrite>
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	b5 d7       	rcall	.+3946   	; 0x1b7e <delayMicroseconds>
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	8e 81       	ldd	r24, Y+6	; 0x06
     c18:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <digitalWrite>
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	ae d7       	rcall	.+3932   	; 0x1b7e <delayMicroseconds>
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	8e 81       	ldd	r24, Y+6	; 0x06
     c26:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <digitalWrite>
     c2a:	84 e6       	ldi	r24, 0x64	; 100
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	a5 c7       	rjmp	.+3914   	; 0x1b7e <delayMicroseconds>

00000c34 <_ZN13LiquidCrystal10write4bitsEh>:
     c34:	cf 92       	push	r12
     c36:	df 92       	push	r13
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	6c 01       	movw	r12, r24
     c46:	7c 01       	movw	r14, r24
     c48:	87 e0       	ldi	r24, 0x07	; 7
     c4a:	e8 0e       	add	r14, r24
     c4c:	f1 1c       	adc	r15, r1
     c4e:	c0 e0       	ldi	r28, 0x00	; 0
     c50:	d0 e0       	ldi	r29, 0x00	; 0
     c52:	06 2f       	mov	r16, r22
     c54:	10 e0       	ldi	r17, 0x00	; 0
     c56:	b8 01       	movw	r22, r16
     c58:	0c 2e       	mov	r0, r28
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     c5c:	75 95       	asr	r23
     c5e:	67 95       	ror	r22
     c60:	0a 94       	dec	r0
     c62:	e2 f7       	brpl	.-8      	; 0xc5c <_ZN13LiquidCrystal10write4bitsEh+0x28>
     c64:	61 70       	andi	r22, 0x01	; 1
     c66:	f7 01       	movw	r30, r14
     c68:	81 91       	ld	r24, Z+
     c6a:	7f 01       	movw	r14, r30
     c6c:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <digitalWrite>
     c70:	21 96       	adiw	r28, 0x01	; 1
     c72:	c4 30       	cpi	r28, 0x04	; 4
     c74:	d1 05       	cpc	r29, r1
     c76:	79 f7       	brne	.-34     	; 0xc56 <_ZN13LiquidCrystal10write4bitsEh+0x22>
     c78:	c6 01       	movw	r24, r12
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	df 90       	pop	r13
     c88:	cf 90       	pop	r12
     c8a:	ba cf       	rjmp	.-140    	; 0xc00 <_ZN13LiquidCrystal11pulseEnableEv>

00000c8c <_ZN13LiquidCrystal10write8bitsEh>:
     c8c:	cf 92       	push	r12
     c8e:	df 92       	push	r13
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	6c 01       	movw	r12, r24
     c9e:	7c 01       	movw	r14, r24
     ca0:	87 e0       	ldi	r24, 0x07	; 7
     ca2:	e8 0e       	add	r14, r24
     ca4:	f1 1c       	adc	r15, r1
     ca6:	c0 e0       	ldi	r28, 0x00	; 0
     ca8:	d0 e0       	ldi	r29, 0x00	; 0
     caa:	06 2f       	mov	r16, r22
     cac:	10 e0       	ldi	r17, 0x00	; 0
     cae:	b8 01       	movw	r22, r16
     cb0:	0c 2e       	mov	r0, r28
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     cb4:	75 95       	asr	r23
     cb6:	67 95       	ror	r22
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <_ZN13LiquidCrystal10write8bitsEh+0x28>
     cbc:	61 70       	andi	r22, 0x01	; 1
     cbe:	f7 01       	movw	r30, r14
     cc0:	81 91       	ld	r24, Z+
     cc2:	7f 01       	movw	r14, r30
     cc4:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <digitalWrite>
     cc8:	21 96       	adiw	r28, 0x01	; 1
     cca:	c8 30       	cpi	r28, 0x08	; 8
     ccc:	d1 05       	cpc	r29, r1
     cce:	79 f7       	brne	.-34     	; 0xcae <_ZN13LiquidCrystal10write8bitsEh+0x22>
     cd0:	c6 01       	movw	r24, r12
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	ff 90       	pop	r15
     cdc:	ef 90       	pop	r14
     cde:	df 90       	pop	r13
     ce0:	cf 90       	pop	r12
     ce2:	8e cf       	rjmp	.-228    	; 0xc00 <_ZN13LiquidCrystal11pulseEnableEv>

00000ce4 <_ZN13LiquidCrystal4sendEhh>:
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	ec 01       	movw	r28, r24
     cec:	16 2f       	mov	r17, r22
     cee:	64 2f       	mov	r22, r20
     cf0:	8c 81       	ldd	r24, Y+4	; 0x04
     cf2:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <digitalWrite>
     cf6:	8d 81       	ldd	r24, Y+5	; 0x05
     cf8:	8f 3f       	cpi	r24, 0xFF	; 255
     cfa:	19 f0       	breq	.+6      	; 0xd02 <_ZN13LiquidCrystal4sendEhh+0x1e>
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <digitalWrite>
     d02:	8f 85       	ldd	r24, Y+15	; 0x0f
     d04:	61 2f       	mov	r22, r17
     d06:	84 ff       	sbrs	r24, 4
     d08:	05 c0       	rjmp	.+10     	; 0xd14 <_ZN13LiquidCrystal4sendEhh+0x30>
     d0a:	ce 01       	movw	r24, r28
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	bc cf       	rjmp	.-136    	; 0xc8c <_ZN13LiquidCrystal10write8bitsEh>
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	84 e0       	ldi	r24, 0x04	; 4
     d18:	75 95       	asr	r23
     d1a:	67 95       	ror	r22
     d1c:	8a 95       	dec	r24
     d1e:	e1 f7       	brne	.-8      	; 0xd18 <_ZN13LiquidCrystal4sendEhh+0x34>
     d20:	ce 01       	movw	r24, r28
     d22:	88 df       	rcall	.-240    	; 0xc34 <_ZN13LiquidCrystal10write4bitsEh>
     d24:	61 2f       	mov	r22, r17
     d26:	ce 01       	movw	r24, r28
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	82 cf       	rjmp	.-252    	; 0xc34 <_ZN13LiquidCrystal10write4bitsEh>

00000d30 <_ZN13LiquidCrystal7commandEh>:
     d30:	40 e0       	ldi	r20, 0x00	; 0
     d32:	d8 cf       	rjmp	.-80     	; 0xce4 <_ZN13LiquidCrystal4sendEhh>

00000d34 <_ZN13LiquidCrystal5clearEv>:
     d34:	61 e0       	ldi	r22, 0x01	; 1
     d36:	fc df       	rcall	.-8      	; 0xd30 <_ZN13LiquidCrystal7commandEh>
     d38:	80 ed       	ldi	r24, 0xD0	; 208
     d3a:	97 e0       	ldi	r25, 0x07	; 7
     d3c:	20 c7       	rjmp	.+3648   	; 0x1b7e <delayMicroseconds>

00000d3e <_ZN13LiquidCrystal9setCursorEhh>:
     d3e:	fc 01       	movw	r30, r24
     d40:	44 30       	cpi	r20, 0x04	; 4
     d42:	08 f0       	brcs	.+2      	; 0xd46 <_ZN13LiquidCrystal9setCursorEhh+0x8>
     d44:	43 e0       	ldi	r20, 0x03	; 3
     d46:	83 89       	ldd	r24, Z+19	; 0x13
     d48:	48 17       	cp	r20, r24
     d4a:	10 f0       	brcs	.+4      	; 0xd50 <_ZN13LiquidCrystal9setCursorEhh+0x12>
     d4c:	4f ef       	ldi	r20, 0xFF	; 255
     d4e:	48 0f       	add	r20, r24
     d50:	df 01       	movw	r26, r30
     d52:	a4 0f       	add	r26, r20
     d54:	b1 1d       	adc	r27, r1
     d56:	54 96       	adiw	r26, 0x14	; 20
     d58:	9c 91       	ld	r25, X
     d5a:	69 0f       	add	r22, r25
     d5c:	60 68       	ori	r22, 0x80	; 128
     d5e:	cf 01       	movw	r24, r30
     d60:	e7 cf       	rjmp	.-50     	; 0xd30 <_ZN13LiquidCrystal7commandEh>

00000d62 <_ZN13LiquidCrystal7displayEv>:
     d62:	fc 01       	movw	r30, r24
     d64:	60 89       	ldd	r22, Z+16	; 0x10
     d66:	26 2f       	mov	r18, r22
     d68:	24 60       	ori	r18, 0x04	; 4
     d6a:	20 8b       	std	Z+16, r18	; 0x10
     d6c:	6c 60       	ori	r22, 0x0C	; 12
     d6e:	e0 cf       	rjmp	.-64     	; 0xd30 <_ZN13LiquidCrystal7commandEh>

00000d70 <_ZN13LiquidCrystal5beginEhhh>:
     d70:	ef 92       	push	r14
     d72:	ff 92       	push	r15
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	ec 01       	movw	r28, r24
     d7e:	42 30       	cpi	r20, 0x02	; 2
     d80:	18 f0       	brcs	.+6      	; 0xd88 <_ZN13LiquidCrystal5beginEhhh+0x18>
     d82:	8f 85       	ldd	r24, Y+15	; 0x0f
     d84:	88 60       	ori	r24, 0x08	; 8
     d86:	8f 87       	std	Y+15, r24	; 0x0f
     d88:	4b 8b       	std	Y+19, r20	; 0x13
     d8a:	1c 8a       	std	Y+20, r1	; 0x14
     d8c:	80 e4       	ldi	r24, 0x40	; 64
     d8e:	8d 8b       	std	Y+21, r24	; 0x15
     d90:	6e 8b       	std	Y+22, r22	; 0x16
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	60 5c       	subi	r22, 0xC0	; 192
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	6f 8b       	std	Y+23, r22	; 0x17
     d9a:	22 23       	and	r18, r18
     d9c:	29 f0       	breq	.+10     	; 0xda8 <_ZN13LiquidCrystal5beginEhhh+0x38>
     d9e:	41 30       	cpi	r20, 0x01	; 1
     da0:	19 f4       	brne	.+6      	; 0xda8 <_ZN13LiquidCrystal5beginEhhh+0x38>
     da2:	8f 85       	ldd	r24, Y+15	; 0x0f
     da4:	84 60       	ori	r24, 0x04	; 4
     da6:	8f 87       	std	Y+15, r24	; 0x0f
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	8c 81       	ldd	r24, Y+4	; 0x04
     dac:	cf d7       	rcall	.+3998   	; 0x1d4c <pinMode>
     dae:	8d 81       	ldd	r24, Y+5	; 0x05
     db0:	8f 3f       	cpi	r24, 0xFF	; 255
     db2:	11 f0       	breq	.+4      	; 0xdb8 <_ZN13LiquidCrystal5beginEhhh+0x48>
     db4:	61 e0       	ldi	r22, 0x01	; 1
     db6:	ca d7       	rcall	.+3988   	; 0x1d4c <pinMode>
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	8e 81       	ldd	r24, Y+6	; 0x06
     dbc:	c7 d7       	rcall	.+3982   	; 0x1d4c <pinMode>
     dbe:	7e 01       	movw	r14, r28
     dc0:	87 e0       	ldi	r24, 0x07	; 7
     dc2:	e8 0e       	add	r14, r24
     dc4:	f1 1c       	adc	r15, r1
     dc6:	00 e0       	ldi	r16, 0x00	; 0
     dc8:	10 e0       	ldi	r17, 0x00	; 0
     dca:	8f 85       	ldd	r24, Y+15	; 0x0f
     dcc:	84 fd       	sbrc	r24, 4
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <_ZN13LiquidCrystal5beginEhhh+0x66>
     dd0:	84 e0       	ldi	r24, 0x04	; 4
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <_ZN13LiquidCrystal5beginEhhh+0x6a>
     dd6:	88 e0       	ldi	r24, 0x08	; 8
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	08 17       	cp	r16, r24
     ddc:	19 07       	cpc	r17, r25
     dde:	44 f4       	brge	.+16     	; 0xdf0 <_ZN13LiquidCrystal5beginEhhh+0x80>
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	f7 01       	movw	r30, r14
     de4:	81 91       	ld	r24, Z+
     de6:	7f 01       	movw	r14, r30
     de8:	b1 d7       	rcall	.+3938   	; 0x1d4c <pinMode>
     dea:	0f 5f       	subi	r16, 0xFF	; 255
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	ed cf       	rjmp	.-38     	; 0xdca <_ZN13LiquidCrystal5beginEhhh+0x5a>
     df0:	80 e5       	ldi	r24, 0x50	; 80
     df2:	93 ec       	ldi	r25, 0xC3	; 195
     df4:	c4 d6       	rcall	.+3464   	; 0x1b7e <delayMicroseconds>
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	e4 d7       	rcall	.+4040   	; 0x1dc4 <digitalWrite>
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	8e 81       	ldd	r24, Y+6	; 0x06
     e00:	e1 d7       	rcall	.+4034   	; 0x1dc4 <digitalWrite>
     e02:	8d 81       	ldd	r24, Y+5	; 0x05
     e04:	8f 3f       	cpi	r24, 0xFF	; 255
     e06:	11 f0       	breq	.+4      	; 0xe0c <_ZN13LiquidCrystal5beginEhhh+0x9c>
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	dc d7       	rcall	.+4024   	; 0x1dc4 <digitalWrite>
     e0c:	6f 85       	ldd	r22, Y+15	; 0x0f
     e0e:	64 fd       	sbrc	r22, 4
     e10:	16 c0       	rjmp	.+44     	; 0xe3e <_ZN13LiquidCrystal5beginEhhh+0xce>
     e12:	63 e0       	ldi	r22, 0x03	; 3
     e14:	ce 01       	movw	r24, r28
     e16:	0e df       	rcall	.-484    	; 0xc34 <_ZN13LiquidCrystal10write4bitsEh>
     e18:	84 e9       	ldi	r24, 0x94	; 148
     e1a:	91 e1       	ldi	r25, 0x11	; 17
     e1c:	b0 d6       	rcall	.+3424   	; 0x1b7e <delayMicroseconds>
     e1e:	63 e0       	ldi	r22, 0x03	; 3
     e20:	ce 01       	movw	r24, r28
     e22:	08 df       	rcall	.-496    	; 0xc34 <_ZN13LiquidCrystal10write4bitsEh>
     e24:	84 e9       	ldi	r24, 0x94	; 148
     e26:	91 e1       	ldi	r25, 0x11	; 17
     e28:	aa d6       	rcall	.+3412   	; 0x1b7e <delayMicroseconds>
     e2a:	63 e0       	ldi	r22, 0x03	; 3
     e2c:	ce 01       	movw	r24, r28
     e2e:	02 df       	rcall	.-508    	; 0xc34 <_ZN13LiquidCrystal10write4bitsEh>
     e30:	86 e9       	ldi	r24, 0x96	; 150
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	a4 d6       	rcall	.+3400   	; 0x1b7e <delayMicroseconds>
     e36:	62 e0       	ldi	r22, 0x02	; 2
     e38:	ce 01       	movw	r24, r28
     e3a:	fc de       	rcall	.-520    	; 0xc34 <_ZN13LiquidCrystal10write4bitsEh>
     e3c:	11 c0       	rjmp	.+34     	; 0xe60 <_ZN13LiquidCrystal5beginEhhh+0xf0>
     e3e:	60 62       	ori	r22, 0x20	; 32
     e40:	ce 01       	movw	r24, r28
     e42:	76 df       	rcall	.-276    	; 0xd30 <_ZN13LiquidCrystal7commandEh>
     e44:	84 e9       	ldi	r24, 0x94	; 148
     e46:	91 e1       	ldi	r25, 0x11	; 17
     e48:	9a d6       	rcall	.+3380   	; 0x1b7e <delayMicroseconds>
     e4a:	6f 85       	ldd	r22, Y+15	; 0x0f
     e4c:	60 62       	ori	r22, 0x20	; 32
     e4e:	ce 01       	movw	r24, r28
     e50:	6f df       	rcall	.-290    	; 0xd30 <_ZN13LiquidCrystal7commandEh>
     e52:	86 e9       	ldi	r24, 0x96	; 150
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	93 d6       	rcall	.+3366   	; 0x1b7e <delayMicroseconds>
     e58:	6f 85       	ldd	r22, Y+15	; 0x0f
     e5a:	60 62       	ori	r22, 0x20	; 32
     e5c:	ce 01       	movw	r24, r28
     e5e:	68 df       	rcall	.-304    	; 0xd30 <_ZN13LiquidCrystal7commandEh>
     e60:	6f 85       	ldd	r22, Y+15	; 0x0f
     e62:	60 62       	ori	r22, 0x20	; 32
     e64:	ce 01       	movw	r24, r28
     e66:	64 df       	rcall	.-312    	; 0xd30 <_ZN13LiquidCrystal7commandEh>
     e68:	84 e0       	ldi	r24, 0x04	; 4
     e6a:	88 8b       	std	Y+16, r24	; 0x10
     e6c:	ce 01       	movw	r24, r28
     e6e:	79 df       	rcall	.-270    	; 0xd62 <_ZN13LiquidCrystal7displayEv>
     e70:	ce 01       	movw	r24, r28
     e72:	60 df       	rcall	.-320    	; 0xd34 <_ZN13LiquidCrystal5clearEv>
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	89 8b       	std	Y+17, r24	; 0x11
     e78:	66 e0       	ldi	r22, 0x06	; 6
     e7a:	ce 01       	movw	r24, r28
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	53 cf       	rjmp	.-346    	; 0xd30 <_ZN13LiquidCrystal7commandEh>

00000e8a <_ZN13LiquidCrystalC1Ehhhhhh>:
     e8a:	cf 92       	push	r12
     e8c:	ef 92       	push	r14
     e8e:	0f 93       	push	r16
     e90:	fc 01       	movw	r30, r24
     e92:	13 82       	std	Z+3, r1	; 0x03
     e94:	12 82       	std	Z+2, r1	; 0x02
     e96:	82 e8       	ldi	r24, 0x82	; 130
     e98:	93 e0       	ldi	r25, 0x03	; 3
     e9a:	91 83       	std	Z+1, r25	; 0x01
     e9c:	80 83       	st	Z, r24
     e9e:	64 83       	std	Z+4, r22	; 0x04
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	85 83       	std	Z+5, r24	; 0x05
     ea4:	46 83       	std	Z+6, r20	; 0x06
     ea6:	27 83       	std	Z+7, r18	; 0x07
     ea8:	00 87       	std	Z+8, r16	; 0x08
     eaa:	e1 86       	std	Z+9, r14	; 0x09
     eac:	c2 86       	std	Z+10, r12	; 0x0a
     eae:	13 86       	std	Z+11, r1	; 0x0b
     eb0:	14 86       	std	Z+12, r1	; 0x0c
     eb2:	15 86       	std	Z+13, r1	; 0x0d
     eb4:	16 86       	std	Z+14, r1	; 0x0e
     eb6:	17 86       	std	Z+15, r1	; 0x0f
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	41 e0       	ldi	r20, 0x01	; 1
     ebc:	60 e1       	ldi	r22, 0x10	; 16
     ebe:	cf 01       	movw	r24, r30
     ec0:	0f 91       	pop	r16
     ec2:	ef 90       	pop	r14
     ec4:	cf 90       	pop	r12
     ec6:	54 cf       	rjmp	.-344    	; 0xd70 <_ZN13LiquidCrystal5beginEhhh>

00000ec8 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     ec8:	41 e0       	ldi	r20, 0x01	; 1
     eca:	0c df       	rcall	.-488    	; 0xce4 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	08 95       	ret

00000ed2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
#define SERVO_MAX() (MAX_PULSE_WIDTH - this->max * 4)  // maximum value in uS for this servo

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	7b 01       	movw	r14, r22
     ee4:	6a 01       	movw	r12, r20
  if( Channel[timer] < 0 )
     ee6:	08 2f       	mov	r16, r24
     ee8:	10 e0       	ldi	r17, 0x00	; 0
     eea:	e8 01       	movw	r28, r16
     eec:	cd 5c       	subi	r28, 0xCD	; 205
     eee:	db 4f       	sbci	r29, 0xFB	; 251
     ef0:	88 81       	ld	r24, Y
     ef2:	87 ff       	sbrs	r24, 7
     ef4:	04 c0       	rjmp	.+8      	; 0xefe <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
     ef6:	fb 01       	movw	r30, r22
     ef8:	11 82       	std	Z+1, r1	; 0x01
     efa:	10 82       	st	Z, r1
     efc:	24 c0       	rjmp	.+72     	; 0xf46 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
     efe:	8c e0       	ldi	r24, 0x0C	; 12
     f00:	80 9f       	mul	r24, r16
     f02:	90 01       	movw	r18, r0
     f04:	81 9f       	mul	r24, r17
     f06:	30 0d       	add	r19, r0
     f08:	11 24       	eor	r1, r1
     f0a:	88 81       	ld	r24, Y
     f0c:	a9 01       	movw	r20, r18
     f0e:	48 0f       	add	r20, r24
     f10:	51 1d       	adc	r21, r1
     f12:	87 fd       	sbrc	r24, 7
     f14:	5a 95       	dec	r21
     f16:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <ServoCount>
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	48 17       	cp	r20, r24
     f1e:	59 07       	cpc	r21, r25
     f20:	94 f4       	brge	.+36     	; 0xf46 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
     f22:	88 81       	ld	r24, Y
     f24:	a9 01       	movw	r20, r18
     f26:	48 0f       	add	r20, r24
     f28:	51 1d       	adc	r21, r1
     f2a:	87 fd       	sbrc	r24, 7
     f2c:	5a 95       	dec	r21
     f2e:	ca 01       	movw	r24, r20
     f30:	fa 01       	movw	r30, r20
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	8e 0f       	add	r24, r30
     f38:	9f 1f       	adc	r25, r31
     f3a:	fc 01       	movw	r30, r24
     f3c:	e9 5c       	subi	r30, 0xC9	; 201
     f3e:	fb 4f       	sbci	r31, 0xFB	; 251
     f40:	80 81       	ld	r24, Z
     f42:	86 fd       	sbrc	r24, 6
     f44:	19 c0       	rjmp	.+50     	; 0xf78 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xa6>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
     f46:	88 81       	ld	r24, Y
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	88 83       	st	Y, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     f4c:	8c e0       	ldi	r24, 0x0C	; 12
     f4e:	80 9f       	mul	r24, r16
     f50:	90 01       	movw	r18, r0
     f52:	81 9f       	mul	r24, r17
     f54:	30 0d       	add	r19, r0
     f56:	11 24       	eor	r1, r1
     f58:	88 81       	ld	r24, Y
     f5a:	a9 01       	movw	r20, r18
     f5c:	48 0f       	add	r20, r24
     f5e:	51 1d       	adc	r21, r1
     f60:	87 fd       	sbrc	r24, 7
     f62:	5a 95       	dec	r21
     f64:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <ServoCount>
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	48 17       	cp	r20, r24
     f6c:	59 07       	cpc	r21, r25
     f6e:	b4 f4       	brge	.+44     	; 0xf9c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xca>
     f70:	88 81       	ld	r24, Y
     f72:	8c 30       	cpi	r24, 0x0C	; 12
     f74:	3c f1       	brlt	.+78     	; 0xfc4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xf2>
     f76:	12 c0       	rjmp	.+36     	; 0xf9c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xca>
{
  if( Channel[timer] < 0 )
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
     f78:	88 81       	ld	r24, Y
     f7a:	28 0f       	add	r18, r24
     f7c:	31 1d       	adc	r19, r1
     f7e:	87 fd       	sbrc	r24, 7
     f80:	3a 95       	dec	r19
     f82:	f9 01       	movw	r30, r18
     f84:	ee 0f       	add	r30, r30
     f86:	ff 1f       	adc	r31, r31
     f88:	2e 0f       	add	r18, r30
     f8a:	3f 1f       	adc	r19, r31
     f8c:	f9 01       	movw	r30, r18
     f8e:	e9 5c       	subi	r30, 0xC9	; 201
     f90:	fb 4f       	sbci	r31, 0xFB	; 251
     f92:	80 81       	ld	r24, Z
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	8f 73       	andi	r24, 0x3F	; 63
     f98:	15 d7       	rcall	.+3626   	; 0x1dc4 <digitalWrite>
     f9a:	d5 cf       	rjmp	.-86     	; 0xf46 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
     f9c:	f7 01       	movw	r30, r14
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	04 96       	adiw	r24, 0x04	; 4
     fa4:	80 34       	cpi	r24, 0x40	; 64
     fa6:	9c 49       	sbci	r25, 0x9C	; 156
     fa8:	18 f4       	brcc	.+6      	; 0xfb0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xde>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
     faa:	80 e4       	ldi	r24, 0x40	; 64
     fac:	9c e9       	ldi	r25, 0x9C	; 156
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe6>
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     fb0:	f7 01       	movw	r30, r14
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	04 96       	adiw	r24, 0x04	; 4
     fb8:	f6 01       	movw	r30, r12
     fba:	91 83       	std	Z+1, r25	; 0x01
     fbc:	80 83       	st	Z, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	88 83       	st	Y, r24
  }
}
     fc2:	44 c0       	rjmp	.+136    	; 0x104c <__EEPROM_REGION_LENGTH__+0x4c>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     fc4:	f7 01       	movw	r30, r14
     fc6:	40 81       	ld	r20, Z
     fc8:	51 81       	ldd	r21, Z+1	; 0x01
     fca:	88 81       	ld	r24, Y
     fcc:	b9 01       	movw	r22, r18
     fce:	68 0f       	add	r22, r24
     fd0:	71 1d       	adc	r23, r1
     fd2:	87 fd       	sbrc	r24, 7
     fd4:	7a 95       	dec	r23
     fd6:	cb 01       	movw	r24, r22
     fd8:	fb 01       	movw	r30, r22
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	8e 0f       	add	r24, r30
     fe0:	9f 1f       	adc	r25, r31
     fe2:	fc 01       	movw	r30, r24
     fe4:	e9 5c       	subi	r30, 0xC9	; 201
     fe6:	fb 4f       	sbci	r31, 0xFB	; 251
     fe8:	81 81       	ldd	r24, Z+1	; 0x01
     fea:	92 81       	ldd	r25, Z+2	; 0x02
     fec:	84 0f       	add	r24, r20
     fee:	95 1f       	adc	r25, r21
     ff0:	f6 01       	movw	r30, r12
     ff2:	91 83       	std	Z+1, r25	; 0x01
     ff4:	80 83       	st	Z, r24
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     ff6:	88 81       	ld	r24, Y
     ff8:	a9 01       	movw	r20, r18
     ffa:	48 0f       	add	r20, r24
     ffc:	51 1d       	adc	r21, r1
     ffe:	87 fd       	sbrc	r24, 7
    1000:	5a 95       	dec	r21
    1002:	ca 01       	movw	r24, r20
    1004:	fa 01       	movw	r30, r20
    1006:	ee 0f       	add	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	8e 0f       	add	r24, r30
    100c:	9f 1f       	adc	r25, r31
    100e:	fc 01       	movw	r30, r24
    1010:	e9 5c       	subi	r30, 0xC9	; 201
    1012:	fb 4f       	sbci	r31, 0xFB	; 251
    1014:	80 81       	ld	r24, Z
    1016:	86 ff       	sbrs	r24, 6
    1018:	19 c0       	rjmp	.+50     	; 0x104c <__EEPROM_REGION_LENGTH__+0x4c>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
    101a:	88 81       	ld	r24, Y
    101c:	28 0f       	add	r18, r24
    101e:	31 1d       	adc	r19, r1
    1020:	87 fd       	sbrc	r24, 7
    1022:	3a 95       	dec	r19
    1024:	f9 01       	movw	r30, r18
    1026:	ee 0f       	add	r30, r30
    1028:	ff 1f       	adc	r31, r31
    102a:	2e 0f       	add	r18, r30
    102c:	3f 1f       	adc	r19, r31
    102e:	f9 01       	movw	r30, r18
    1030:	e9 5c       	subi	r30, 0xC9	; 201
    1032:	fb 4f       	sbci	r31, 0xFB	; 251
    1034:	80 81       	ld	r24, Z
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	8f 73       	andi	r24, 0x3F	; 63
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
    1048:	cf 90       	pop	r12
    104a:	bc c6       	rjmp	.+3448   	; 0x1dc4 <digitalWrite>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	df 90       	pop	r13
    105a:	cf 90       	pop	r12
    105c:	08 95       	ret

0000105e <__vector_17>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	0b b6       	in	r0, 0x3b	; 59
    106a:	0f 92       	push	r0
    106c:	2f 93       	push	r18
    106e:	3f 93       	push	r19
    1070:	4f 93       	push	r20
    1072:	5f 93       	push	r21
    1074:	6f 93       	push	r22
    1076:	7f 93       	push	r23
    1078:	8f 93       	push	r24
    107a:	9f 93       	push	r25
    107c:	af 93       	push	r26
    107e:	bf 93       	push	r27
    1080:	ef 93       	push	r30
    1082:	ff 93       	push	r31
  handle_interrupts(_timer1, &TCNT1, &OCR1A);
    1084:	48 e8       	ldi	r20, 0x88	; 136
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	64 e8       	ldi	r22, 0x84	; 132
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	21 df       	rcall	.-446    	; 0xed2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
    1090:	ff 91       	pop	r31
    1092:	ef 91       	pop	r30
    1094:	bf 91       	pop	r27
    1096:	af 91       	pop	r26
    1098:	9f 91       	pop	r25
    109a:	8f 91       	pop	r24
    109c:	7f 91       	pop	r23
    109e:	6f 91       	pop	r22
    10a0:	5f 91       	pop	r21
    10a2:	4f 91       	pop	r20
    10a4:	3f 91       	pop	r19
    10a6:	2f 91       	pop	r18
    10a8:	0f 90       	pop	r0
    10aa:	0b be       	out	0x3b, r0	; 59
    10ac:	0f 90       	pop	r0
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	0f 90       	pop	r0
    10b2:	1f 90       	pop	r1
    10b4:	18 95       	reti

000010b6 <__vector_32>:
#endif

#if defined(_useTimer3)
SIGNAL (TIMER3_COMPA_vect)
{
    10b6:	1f 92       	push	r1
    10b8:	0f 92       	push	r0
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	0f 92       	push	r0
    10be:	11 24       	eor	r1, r1
    10c0:	0b b6       	in	r0, 0x3b	; 59
    10c2:	0f 92       	push	r0
    10c4:	2f 93       	push	r18
    10c6:	3f 93       	push	r19
    10c8:	4f 93       	push	r20
    10ca:	5f 93       	push	r21
    10cc:	6f 93       	push	r22
    10ce:	7f 93       	push	r23
    10d0:	8f 93       	push	r24
    10d2:	9f 93       	push	r25
    10d4:	af 93       	push	r26
    10d6:	bf 93       	push	r27
    10d8:	ef 93       	push	r30
    10da:	ff 93       	push	r31
  handle_interrupts(_timer3, &TCNT3, &OCR3A);
    10dc:	48 e9       	ldi	r20, 0x98	; 152
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	64 e9       	ldi	r22, 0x94	; 148
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	f5 de       	rcall	.-534    	; 0xed2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
    10e8:	ff 91       	pop	r31
    10ea:	ef 91       	pop	r30
    10ec:	bf 91       	pop	r27
    10ee:	af 91       	pop	r26
    10f0:	9f 91       	pop	r25
    10f2:	8f 91       	pop	r24
    10f4:	7f 91       	pop	r23
    10f6:	6f 91       	pop	r22
    10f8:	5f 91       	pop	r21
    10fa:	4f 91       	pop	r20
    10fc:	3f 91       	pop	r19
    10fe:	2f 91       	pop	r18
    1100:	0f 90       	pop	r0
    1102:	0b be       	out	0x3b, r0	; 59
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <__vector_42>:
#endif

#if defined(_useTimer4)
SIGNAL (TIMER4_COMPA_vect)
{
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	0b b6       	in	r0, 0x3b	; 59
    111a:	0f 92       	push	r0
    111c:	2f 93       	push	r18
    111e:	3f 93       	push	r19
    1120:	4f 93       	push	r20
    1122:	5f 93       	push	r21
    1124:	6f 93       	push	r22
    1126:	7f 93       	push	r23
    1128:	8f 93       	push	r24
    112a:	9f 93       	push	r25
    112c:	af 93       	push	r26
    112e:	bf 93       	push	r27
    1130:	ef 93       	push	r30
    1132:	ff 93       	push	r31
  handle_interrupts(_timer4, &TCNT4, &OCR4A);
    1134:	48 ea       	ldi	r20, 0xA8	; 168
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	64 ea       	ldi	r22, 0xA4	; 164
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	83 e0       	ldi	r24, 0x03	; 3
    113e:	c9 de       	rcall	.-622    	; 0xed2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
    1140:	ff 91       	pop	r31
    1142:	ef 91       	pop	r30
    1144:	bf 91       	pop	r27
    1146:	af 91       	pop	r26
    1148:	9f 91       	pop	r25
    114a:	8f 91       	pop	r24
    114c:	7f 91       	pop	r23
    114e:	6f 91       	pop	r22
    1150:	5f 91       	pop	r21
    1152:	4f 91       	pop	r20
    1154:	3f 91       	pop	r19
    1156:	2f 91       	pop	r18
    1158:	0f 90       	pop	r0
    115a:	0b be       	out	0x3b, r0	; 59
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	0f 90       	pop	r0
    1162:	1f 90       	pop	r1
    1164:	18 95       	reti

00001166 <__vector_47>:
#endif

#if defined(_useTimer5)
SIGNAL (TIMER5_COMPA_vect)
{
    1166:	1f 92       	push	r1
    1168:	0f 92       	push	r0
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	0f 92       	push	r0
    116e:	11 24       	eor	r1, r1
    1170:	0b b6       	in	r0, 0x3b	; 59
    1172:	0f 92       	push	r0
    1174:	2f 93       	push	r18
    1176:	3f 93       	push	r19
    1178:	4f 93       	push	r20
    117a:	5f 93       	push	r21
    117c:	6f 93       	push	r22
    117e:	7f 93       	push	r23
    1180:	8f 93       	push	r24
    1182:	9f 93       	push	r25
    1184:	af 93       	push	r26
    1186:	bf 93       	push	r27
    1188:	ef 93       	push	r30
    118a:	ff 93       	push	r31
  handle_interrupts(_timer5, &TCNT5, &OCR5A);
    118c:	48 e2       	ldi	r20, 0x28	; 40
    118e:	51 e0       	ldi	r21, 0x01	; 1
    1190:	64 e2       	ldi	r22, 0x24	; 36
    1192:	71 e0       	ldi	r23, 0x01	; 1
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	9d de       	rcall	.-710    	; 0xed2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
    1198:	ff 91       	pop	r31
    119a:	ef 91       	pop	r30
    119c:	bf 91       	pop	r27
    119e:	af 91       	pop	r26
    11a0:	9f 91       	pop	r25
    11a2:	8f 91       	pop	r24
    11a4:	7f 91       	pop	r23
    11a6:	6f 91       	pop	r22
    11a8:	5f 91       	pop	r21
    11aa:	4f 91       	pop	r20
    11ac:	3f 91       	pop	r19
    11ae:	2f 91       	pop	r18
    11b0:	0f 90       	pop	r0
    11b2:	0b be       	out	0x3b, r0	; 59
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <_Z13calculateTempi>:
#include "TemperatureControl.h"

float calculateTemp(int sensorValue)
{
    11be:	cf 92       	push	r12
    11c0:	df 92       	push	r13
    11c2:	ef 92       	push	r14
    11c4:	ff 92       	push	r15
	float temp = log(10000.0 * (1024.0 / sensorValue - 1));
    11c6:	bc 01       	movw	r22, r24
    11c8:	99 0f       	add	r25, r25
    11ca:	88 0b       	sbc	r24, r24
    11cc:	99 0b       	sbc	r25, r25
    11ce:	56 d1       	rcall	.+684    	; 0x147c <__floatsisf>
    11d0:	9b 01       	movw	r18, r22
    11d2:	ac 01       	movw	r20, r24
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	80 e8       	ldi	r24, 0x80	; 128
    11da:	94 e4       	ldi	r25, 0x44	; 68
    11dc:	b4 d0       	rcall	.+360    	; 0x1346 <__divsf3>
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e8       	ldi	r20, 0x80	; 128
    11e4:	5f e3       	ldi	r21, 0x3F	; 63
    11e6:	4a d0       	rcall	.+148    	; 0x127c <__subsf3>
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e4       	ldi	r19, 0x40	; 64
    11ec:	4c e1       	ldi	r20, 0x1C	; 28
    11ee:	56 e4       	ldi	r21, 0x46	; 70
    11f0:	16 d2       	rcall	.+1068   	; 0x161e <__mulsf3>
    11f2:	d5 d1       	rcall	.+938    	; 0x159e <log>
    11f4:	6b 01       	movw	r12, r22
    11f6:	7c 01       	movw	r14, r24
	float tempK = 1/(0.001129148 + (0.000234125 + (0.0000000876741 * temp * temp)) * temp);
	float tempC = tempK - 273.15;
	return tempC;
    11f8:	29 e5       	ldi	r18, 0x59	; 89
    11fa:	37 e4       	ldi	r19, 0x47	; 71
    11fc:	4c eb       	ldi	r20, 0xBC	; 188
    11fe:	53 e3       	ldi	r21, 0x33	; 51
    1200:	0e d2       	rcall	.+1052   	; 0x161e <__mulsf3>
    1202:	a7 01       	movw	r20, r14
    1204:	96 01       	movw	r18, r12
    1206:	0b d2       	rcall	.+1046   	; 0x161e <__mulsf3>
    1208:	23 e7       	ldi	r18, 0x73	; 115
    120a:	3f e7       	ldi	r19, 0x7F	; 127
    120c:	45 e7       	ldi	r20, 0x75	; 117
    120e:	59 e3       	ldi	r21, 0x39	; 57
    1210:	36 d0       	rcall	.+108    	; 0x127e <__addsf3>
    1212:	a7 01       	movw	r20, r14
    1214:	96 01       	movw	r18, r12
    1216:	03 d2       	rcall	.+1030   	; 0x161e <__mulsf3>
    1218:	2b ee       	ldi	r18, 0xEB	; 235
    121a:	3f ef       	ldi	r19, 0xFF	; 255
    121c:	43 e9       	ldi	r20, 0x93	; 147
    121e:	5a e3       	ldi	r21, 0x3A	; 58
    1220:	2e d0       	rcall	.+92     	; 0x127e <__addsf3>
    1222:	9b 01       	movw	r18, r22
    1224:	ac 01       	movw	r20, r24
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	80 e8       	ldi	r24, 0x80	; 128
    122c:	9f e3       	ldi	r25, 0x3F	; 63
    122e:	8b d0       	rcall	.+278    	; 0x1346 <__divsf3>
    1230:	23 e3       	ldi	r18, 0x33	; 51
    1232:	33 e9       	ldi	r19, 0x93	; 147
    1234:	48 e8       	ldi	r20, 0x88	; 136
    1236:	53 e4       	ldi	r21, 0x43	; 67
    1238:	21 d0       	rcall	.+66     	; 0x127c <__subsf3>
    123a:	ff 90       	pop	r15
}
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	08 95       	ret

00001244 <_Z32GetCurrentTemperatureAndHumidityv>:
    1244:	81 e4       	ldi	r24, 0x41	; 65
void GetCurrentTemperatureAndHumidity()
{
	currentTemperaturesDining = calculateTemp(analogRead(A11));
    1246:	08 d5       	rcall	.+2576   	; 0x1c58 <analogRead>
    1248:	ba df       	rcall	.-140    	; 0x11be <_Z13calculateTempi>
    124a:	e5 d0       	rcall	.+458    	; 0x1416 <__fixsfsi>
    124c:	70 93 31 04 	sts	0x0431, r23	; 0x800431 <currentTemperaturesDining+0x1>
    1250:	60 93 30 04 	sts	0x0430, r22	; 0x800430 <currentTemperaturesDining>
	currentTemperaturesKids = dht.readTemperature();
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	8c e9       	ldi	r24, 0x9C	; 156
    125a:	93 e0       	ldi	r25, 0x03	; 3
    125c:	99 db       	rcall	.-2254   	; 0x990 <_ZN3DHT15readTemperatureEbb>
    125e:	db d0       	rcall	.+438    	; 0x1416 <__fixsfsi>
    1260:	70 93 2f 04 	sts	0x042F, r23	; 0x80042f <currentTemperaturesKids+0x1>
    1264:	60 93 2e 04 	sts	0x042E, r22	; 0x80042e <currentTemperaturesKids>
	currentHumidity = dht.readHumidity();
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	8c e9       	ldi	r24, 0x9C	; 156
    126c:	93 e0       	ldi	r25, 0x03	; 3
    126e:	17 dc       	rcall	.-2002   	; 0xa9e <_ZN3DHT12readHumidityEb>
    1270:	d2 d0       	rcall	.+420    	; 0x1416 <__fixsfsi>
    1272:	70 93 2d 04 	sts	0x042D, r23	; 0x80042d <currentHumidity+0x1>
    1276:	60 93 2c 04 	sts	0x042C, r22	; 0x80042c <currentHumidity>
    127a:	08 95       	ret

0000127c <__subsf3>:
    127c:	50 58       	subi	r21, 0x80	; 128

0000127e <__addsf3>:
    127e:	bb 27       	eor	r27, r27
    1280:	aa 27       	eor	r26, r26
    1282:	0e d0       	rcall	.+28     	; 0x12a0 <__addsf3x>
    1284:	4d c1       	rjmp	.+666    	; 0x1520 <__fp_round>
    1286:	3e d1       	rcall	.+636    	; 0x1504 <__fp_pscA>
    1288:	30 f0       	brcs	.+12     	; 0x1296 <__addsf3+0x18>
    128a:	43 d1       	rcall	.+646    	; 0x1512 <__fp_pscB>
    128c:	20 f0       	brcs	.+8      	; 0x1296 <__addsf3+0x18>
    128e:	31 f4       	brne	.+12     	; 0x129c <__addsf3+0x1e>
    1290:	9f 3f       	cpi	r25, 0xFF	; 255
    1292:	11 f4       	brne	.+4      	; 0x1298 <__addsf3+0x1a>
    1294:	1e f4       	brtc	.+6      	; 0x129c <__addsf3+0x1e>
    1296:	33 c1       	rjmp	.+614    	; 0x14fe <__fp_nan>
    1298:	0e f4       	brtc	.+2      	; 0x129c <__addsf3+0x1e>
    129a:	e0 95       	com	r30
    129c:	e7 fb       	bst	r30, 7
    129e:	29 c1       	rjmp	.+594    	; 0x14f2 <__fp_inf>

000012a0 <__addsf3x>:
    12a0:	e9 2f       	mov	r30, r25
    12a2:	4f d1       	rcall	.+670    	; 0x1542 <__fp_split3>
    12a4:	80 f3       	brcs	.-32     	; 0x1286 <__addsf3+0x8>
    12a6:	ba 17       	cp	r27, r26
    12a8:	62 07       	cpc	r22, r18
    12aa:	73 07       	cpc	r23, r19
    12ac:	84 07       	cpc	r24, r20
    12ae:	95 07       	cpc	r25, r21
    12b0:	18 f0       	brcs	.+6      	; 0x12b8 <__addsf3x+0x18>
    12b2:	71 f4       	brne	.+28     	; 0x12d0 <__addsf3x+0x30>
    12b4:	9e f5       	brtc	.+102    	; 0x131c <__addsf3x+0x7c>
    12b6:	67 c1       	rjmp	.+718    	; 0x1586 <__fp_zero>
    12b8:	0e f4       	brtc	.+2      	; 0x12bc <__addsf3x+0x1c>
    12ba:	e0 95       	com	r30
    12bc:	0b 2e       	mov	r0, r27
    12be:	ba 2f       	mov	r27, r26
    12c0:	a0 2d       	mov	r26, r0
    12c2:	0b 01       	movw	r0, r22
    12c4:	b9 01       	movw	r22, r18
    12c6:	90 01       	movw	r18, r0
    12c8:	0c 01       	movw	r0, r24
    12ca:	ca 01       	movw	r24, r20
    12cc:	a0 01       	movw	r20, r0
    12ce:	11 24       	eor	r1, r1
    12d0:	ff 27       	eor	r31, r31
    12d2:	59 1b       	sub	r21, r25
    12d4:	99 f0       	breq	.+38     	; 0x12fc <__addsf3x+0x5c>
    12d6:	59 3f       	cpi	r21, 0xF9	; 249
    12d8:	50 f4       	brcc	.+20     	; 0x12ee <__addsf3x+0x4e>
    12da:	50 3e       	cpi	r21, 0xE0	; 224
    12dc:	68 f1       	brcs	.+90     	; 0x1338 <__addsf3x+0x98>
    12de:	1a 16       	cp	r1, r26
    12e0:	f0 40       	sbci	r31, 0x00	; 0
    12e2:	a2 2f       	mov	r26, r18
    12e4:	23 2f       	mov	r18, r19
    12e6:	34 2f       	mov	r19, r20
    12e8:	44 27       	eor	r20, r20
    12ea:	58 5f       	subi	r21, 0xF8	; 248
    12ec:	f3 cf       	rjmp	.-26     	; 0x12d4 <__addsf3x+0x34>
    12ee:	46 95       	lsr	r20
    12f0:	37 95       	ror	r19
    12f2:	27 95       	ror	r18
    12f4:	a7 95       	ror	r26
    12f6:	f0 40       	sbci	r31, 0x00	; 0
    12f8:	53 95       	inc	r21
    12fa:	c9 f7       	brne	.-14     	; 0x12ee <__addsf3x+0x4e>
    12fc:	7e f4       	brtc	.+30     	; 0x131c <__addsf3x+0x7c>
    12fe:	1f 16       	cp	r1, r31
    1300:	ba 0b       	sbc	r27, r26
    1302:	62 0b       	sbc	r22, r18
    1304:	73 0b       	sbc	r23, r19
    1306:	84 0b       	sbc	r24, r20
    1308:	ba f0       	brmi	.+46     	; 0x1338 <__addsf3x+0x98>
    130a:	91 50       	subi	r25, 0x01	; 1
    130c:	a1 f0       	breq	.+40     	; 0x1336 <__addsf3x+0x96>
    130e:	ff 0f       	add	r31, r31
    1310:	bb 1f       	adc	r27, r27
    1312:	66 1f       	adc	r22, r22
    1314:	77 1f       	adc	r23, r23
    1316:	88 1f       	adc	r24, r24
    1318:	c2 f7       	brpl	.-16     	; 0x130a <__addsf3x+0x6a>
    131a:	0e c0       	rjmp	.+28     	; 0x1338 <__addsf3x+0x98>
    131c:	ba 0f       	add	r27, r26
    131e:	62 1f       	adc	r22, r18
    1320:	73 1f       	adc	r23, r19
    1322:	84 1f       	adc	r24, r20
    1324:	48 f4       	brcc	.+18     	; 0x1338 <__addsf3x+0x98>
    1326:	87 95       	ror	r24
    1328:	77 95       	ror	r23
    132a:	67 95       	ror	r22
    132c:	b7 95       	ror	r27
    132e:	f7 95       	ror	r31
    1330:	9e 3f       	cpi	r25, 0xFE	; 254
    1332:	08 f0       	brcs	.+2      	; 0x1336 <__addsf3x+0x96>
    1334:	b3 cf       	rjmp	.-154    	; 0x129c <__addsf3+0x1e>
    1336:	93 95       	inc	r25
    1338:	88 0f       	add	r24, r24
    133a:	08 f0       	brcs	.+2      	; 0x133e <__addsf3x+0x9e>
    133c:	99 27       	eor	r25, r25
    133e:	ee 0f       	add	r30, r30
    1340:	97 95       	ror	r25
    1342:	87 95       	ror	r24
    1344:	08 95       	ret

00001346 <__divsf3>:
    1346:	0c d0       	rcall	.+24     	; 0x1360 <__divsf3x>
    1348:	eb c0       	rjmp	.+470    	; 0x1520 <__fp_round>
    134a:	e3 d0       	rcall	.+454    	; 0x1512 <__fp_pscB>
    134c:	40 f0       	brcs	.+16     	; 0x135e <__divsf3+0x18>
    134e:	da d0       	rcall	.+436    	; 0x1504 <__fp_pscA>
    1350:	30 f0       	brcs	.+12     	; 0x135e <__divsf3+0x18>
    1352:	21 f4       	brne	.+8      	; 0x135c <__divsf3+0x16>
    1354:	5f 3f       	cpi	r21, 0xFF	; 255
    1356:	19 f0       	breq	.+6      	; 0x135e <__divsf3+0x18>
    1358:	cc c0       	rjmp	.+408    	; 0x14f2 <__fp_inf>
    135a:	51 11       	cpse	r21, r1
    135c:	15 c1       	rjmp	.+554    	; 0x1588 <__fp_szero>
    135e:	cf c0       	rjmp	.+414    	; 0x14fe <__fp_nan>

00001360 <__divsf3x>:
    1360:	f0 d0       	rcall	.+480    	; 0x1542 <__fp_split3>
    1362:	98 f3       	brcs	.-26     	; 0x134a <__divsf3+0x4>

00001364 <__divsf3_pse>:
    1364:	99 23       	and	r25, r25
    1366:	c9 f3       	breq	.-14     	; 0x135a <__divsf3+0x14>
    1368:	55 23       	and	r21, r21
    136a:	b1 f3       	breq	.-20     	; 0x1358 <__divsf3+0x12>
    136c:	95 1b       	sub	r25, r21
    136e:	55 0b       	sbc	r21, r21
    1370:	bb 27       	eor	r27, r27
    1372:	aa 27       	eor	r26, r26
    1374:	62 17       	cp	r22, r18
    1376:	73 07       	cpc	r23, r19
    1378:	84 07       	cpc	r24, r20
    137a:	38 f0       	brcs	.+14     	; 0x138a <__divsf3_pse+0x26>
    137c:	9f 5f       	subi	r25, 0xFF	; 255
    137e:	5f 4f       	sbci	r21, 0xFF	; 255
    1380:	22 0f       	add	r18, r18
    1382:	33 1f       	adc	r19, r19
    1384:	44 1f       	adc	r20, r20
    1386:	aa 1f       	adc	r26, r26
    1388:	a9 f3       	breq	.-22     	; 0x1374 <__divsf3_pse+0x10>
    138a:	33 d0       	rcall	.+102    	; 0x13f2 <__divsf3_pse+0x8e>
    138c:	0e 2e       	mov	r0, r30
    138e:	3a f0       	brmi	.+14     	; 0x139e <__divsf3_pse+0x3a>
    1390:	e0 e8       	ldi	r30, 0x80	; 128
    1392:	30 d0       	rcall	.+96     	; 0x13f4 <__divsf3_pse+0x90>
    1394:	91 50       	subi	r25, 0x01	; 1
    1396:	50 40       	sbci	r21, 0x00	; 0
    1398:	e6 95       	lsr	r30
    139a:	00 1c       	adc	r0, r0
    139c:	ca f7       	brpl	.-14     	; 0x1390 <__divsf3_pse+0x2c>
    139e:	29 d0       	rcall	.+82     	; 0x13f2 <__divsf3_pse+0x8e>
    13a0:	fe 2f       	mov	r31, r30
    13a2:	27 d0       	rcall	.+78     	; 0x13f2 <__divsf3_pse+0x8e>
    13a4:	66 0f       	add	r22, r22
    13a6:	77 1f       	adc	r23, r23
    13a8:	88 1f       	adc	r24, r24
    13aa:	bb 1f       	adc	r27, r27
    13ac:	26 17       	cp	r18, r22
    13ae:	37 07       	cpc	r19, r23
    13b0:	48 07       	cpc	r20, r24
    13b2:	ab 07       	cpc	r26, r27
    13b4:	b0 e8       	ldi	r27, 0x80	; 128
    13b6:	09 f0       	breq	.+2      	; 0x13ba <__divsf3_pse+0x56>
    13b8:	bb 0b       	sbc	r27, r27
    13ba:	80 2d       	mov	r24, r0
    13bc:	bf 01       	movw	r22, r30
    13be:	ff 27       	eor	r31, r31
    13c0:	93 58       	subi	r25, 0x83	; 131
    13c2:	5f 4f       	sbci	r21, 0xFF	; 255
    13c4:	2a f0       	brmi	.+10     	; 0x13d0 <__divsf3_pse+0x6c>
    13c6:	9e 3f       	cpi	r25, 0xFE	; 254
    13c8:	51 05       	cpc	r21, r1
    13ca:	68 f0       	brcs	.+26     	; 0x13e6 <__divsf3_pse+0x82>
    13cc:	92 c0       	rjmp	.+292    	; 0x14f2 <__fp_inf>
    13ce:	dc c0       	rjmp	.+440    	; 0x1588 <__fp_szero>
    13d0:	5f 3f       	cpi	r21, 0xFF	; 255
    13d2:	ec f3       	brlt	.-6      	; 0x13ce <__divsf3_pse+0x6a>
    13d4:	98 3e       	cpi	r25, 0xE8	; 232
    13d6:	dc f3       	brlt	.-10     	; 0x13ce <__divsf3_pse+0x6a>
    13d8:	86 95       	lsr	r24
    13da:	77 95       	ror	r23
    13dc:	67 95       	ror	r22
    13de:	b7 95       	ror	r27
    13e0:	f7 95       	ror	r31
    13e2:	9f 5f       	subi	r25, 0xFF	; 255
    13e4:	c9 f7       	brne	.-14     	; 0x13d8 <__divsf3_pse+0x74>
    13e6:	88 0f       	add	r24, r24
    13e8:	91 1d       	adc	r25, r1
    13ea:	96 95       	lsr	r25
    13ec:	87 95       	ror	r24
    13ee:	97 f9       	bld	r25, 7
    13f0:	08 95       	ret
    13f2:	e1 e0       	ldi	r30, 0x01	; 1
    13f4:	66 0f       	add	r22, r22
    13f6:	77 1f       	adc	r23, r23
    13f8:	88 1f       	adc	r24, r24
    13fa:	bb 1f       	adc	r27, r27
    13fc:	62 17       	cp	r22, r18
    13fe:	73 07       	cpc	r23, r19
    1400:	84 07       	cpc	r24, r20
    1402:	ba 07       	cpc	r27, r26
    1404:	20 f0       	brcs	.+8      	; 0x140e <__divsf3_pse+0xaa>
    1406:	62 1b       	sub	r22, r18
    1408:	73 0b       	sbc	r23, r19
    140a:	84 0b       	sbc	r24, r20
    140c:	ba 0b       	sbc	r27, r26
    140e:	ee 1f       	adc	r30, r30
    1410:	88 f7       	brcc	.-30     	; 0x13f4 <__divsf3_pse+0x90>
    1412:	e0 95       	com	r30
    1414:	08 95       	ret

00001416 <__fixsfsi>:
    1416:	04 d0       	rcall	.+8      	; 0x1420 <__fixunssfsi>
    1418:	68 94       	set
    141a:	b1 11       	cpse	r27, r1
    141c:	b5 c0       	rjmp	.+362    	; 0x1588 <__fp_szero>
    141e:	08 95       	ret

00001420 <__fixunssfsi>:
    1420:	98 d0       	rcall	.+304    	; 0x1552 <__fp_splitA>
    1422:	88 f0       	brcs	.+34     	; 0x1446 <__fixunssfsi+0x26>
    1424:	9f 57       	subi	r25, 0x7F	; 127
    1426:	90 f0       	brcs	.+36     	; 0x144c <__fixunssfsi+0x2c>
    1428:	b9 2f       	mov	r27, r25
    142a:	99 27       	eor	r25, r25
    142c:	b7 51       	subi	r27, 0x17	; 23
    142e:	a0 f0       	brcs	.+40     	; 0x1458 <__fixunssfsi+0x38>
    1430:	d1 f0       	breq	.+52     	; 0x1466 <__fixunssfsi+0x46>
    1432:	66 0f       	add	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	1a f0       	brmi	.+6      	; 0x1442 <__fixunssfsi+0x22>
    143c:	ba 95       	dec	r27
    143e:	c9 f7       	brne	.-14     	; 0x1432 <__fixunssfsi+0x12>
    1440:	12 c0       	rjmp	.+36     	; 0x1466 <__fixunssfsi+0x46>
    1442:	b1 30       	cpi	r27, 0x01	; 1
    1444:	81 f0       	breq	.+32     	; 0x1466 <__fixunssfsi+0x46>
    1446:	9f d0       	rcall	.+318    	; 0x1586 <__fp_zero>
    1448:	b1 e0       	ldi	r27, 0x01	; 1
    144a:	08 95       	ret
    144c:	9c c0       	rjmp	.+312    	; 0x1586 <__fp_zero>
    144e:	67 2f       	mov	r22, r23
    1450:	78 2f       	mov	r23, r24
    1452:	88 27       	eor	r24, r24
    1454:	b8 5f       	subi	r27, 0xF8	; 248
    1456:	39 f0       	breq	.+14     	; 0x1466 <__fixunssfsi+0x46>
    1458:	b9 3f       	cpi	r27, 0xF9	; 249
    145a:	cc f3       	brlt	.-14     	; 0x144e <__fixunssfsi+0x2e>
    145c:	86 95       	lsr	r24
    145e:	77 95       	ror	r23
    1460:	67 95       	ror	r22
    1462:	b3 95       	inc	r27
    1464:	d9 f7       	brne	.-10     	; 0x145c <__fixunssfsi+0x3c>
    1466:	3e f4       	brtc	.+14     	; 0x1476 <__fixunssfsi+0x56>
    1468:	90 95       	com	r25
    146a:	80 95       	com	r24
    146c:	70 95       	com	r23
    146e:	61 95       	neg	r22
    1470:	7f 4f       	sbci	r23, 0xFF	; 255
    1472:	8f 4f       	sbci	r24, 0xFF	; 255
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	08 95       	ret

00001478 <__floatunsisf>:
    1478:	e8 94       	clt
    147a:	09 c0       	rjmp	.+18     	; 0x148e <__floatsisf+0x12>

0000147c <__floatsisf>:
    147c:	97 fb       	bst	r25, 7
    147e:	3e f4       	brtc	.+14     	; 0x148e <__floatsisf+0x12>
    1480:	90 95       	com	r25
    1482:	80 95       	com	r24
    1484:	70 95       	com	r23
    1486:	61 95       	neg	r22
    1488:	7f 4f       	sbci	r23, 0xFF	; 255
    148a:	8f 4f       	sbci	r24, 0xFF	; 255
    148c:	9f 4f       	sbci	r25, 0xFF	; 255
    148e:	99 23       	and	r25, r25
    1490:	a9 f0       	breq	.+42     	; 0x14bc <__floatsisf+0x40>
    1492:	f9 2f       	mov	r31, r25
    1494:	96 e9       	ldi	r25, 0x96	; 150
    1496:	bb 27       	eor	r27, r27
    1498:	93 95       	inc	r25
    149a:	f6 95       	lsr	r31
    149c:	87 95       	ror	r24
    149e:	77 95       	ror	r23
    14a0:	67 95       	ror	r22
    14a2:	b7 95       	ror	r27
    14a4:	f1 11       	cpse	r31, r1
    14a6:	f8 cf       	rjmp	.-16     	; 0x1498 <__floatsisf+0x1c>
    14a8:	fa f4       	brpl	.+62     	; 0x14e8 <__floatsisf+0x6c>
    14aa:	bb 0f       	add	r27, r27
    14ac:	11 f4       	brne	.+4      	; 0x14b2 <__floatsisf+0x36>
    14ae:	60 ff       	sbrs	r22, 0
    14b0:	1b c0       	rjmp	.+54     	; 0x14e8 <__floatsisf+0x6c>
    14b2:	6f 5f       	subi	r22, 0xFF	; 255
    14b4:	7f 4f       	sbci	r23, 0xFF	; 255
    14b6:	8f 4f       	sbci	r24, 0xFF	; 255
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	16 c0       	rjmp	.+44     	; 0x14e8 <__floatsisf+0x6c>
    14bc:	88 23       	and	r24, r24
    14be:	11 f0       	breq	.+4      	; 0x14c4 <__floatsisf+0x48>
    14c0:	96 e9       	ldi	r25, 0x96	; 150
    14c2:	11 c0       	rjmp	.+34     	; 0x14e6 <__floatsisf+0x6a>
    14c4:	77 23       	and	r23, r23
    14c6:	21 f0       	breq	.+8      	; 0x14d0 <__floatsisf+0x54>
    14c8:	9e e8       	ldi	r25, 0x8E	; 142
    14ca:	87 2f       	mov	r24, r23
    14cc:	76 2f       	mov	r23, r22
    14ce:	05 c0       	rjmp	.+10     	; 0x14da <__floatsisf+0x5e>
    14d0:	66 23       	and	r22, r22
    14d2:	71 f0       	breq	.+28     	; 0x14f0 <__floatsisf+0x74>
    14d4:	96 e8       	ldi	r25, 0x86	; 134
    14d6:	86 2f       	mov	r24, r22
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	2a f0       	brmi	.+10     	; 0x14e8 <__floatsisf+0x6c>
    14de:	9a 95       	dec	r25
    14e0:	66 0f       	add	r22, r22
    14e2:	77 1f       	adc	r23, r23
    14e4:	88 1f       	adc	r24, r24
    14e6:	da f7       	brpl	.-10     	; 0x14de <__floatsisf+0x62>
    14e8:	88 0f       	add	r24, r24
    14ea:	96 95       	lsr	r25
    14ec:	87 95       	ror	r24
    14ee:	97 f9       	bld	r25, 7
    14f0:	08 95       	ret

000014f2 <__fp_inf>:
    14f2:	97 f9       	bld	r25, 7
    14f4:	9f 67       	ori	r25, 0x7F	; 127
    14f6:	80 e8       	ldi	r24, 0x80	; 128
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	08 95       	ret

000014fe <__fp_nan>:
    14fe:	9f ef       	ldi	r25, 0xFF	; 255
    1500:	80 ec       	ldi	r24, 0xC0	; 192
    1502:	08 95       	ret

00001504 <__fp_pscA>:
    1504:	00 24       	eor	r0, r0
    1506:	0a 94       	dec	r0
    1508:	16 16       	cp	r1, r22
    150a:	17 06       	cpc	r1, r23
    150c:	18 06       	cpc	r1, r24
    150e:	09 06       	cpc	r0, r25
    1510:	08 95       	ret

00001512 <__fp_pscB>:
    1512:	00 24       	eor	r0, r0
    1514:	0a 94       	dec	r0
    1516:	12 16       	cp	r1, r18
    1518:	13 06       	cpc	r1, r19
    151a:	14 06       	cpc	r1, r20
    151c:	05 06       	cpc	r0, r21
    151e:	08 95       	ret

00001520 <__fp_round>:
    1520:	09 2e       	mov	r0, r25
    1522:	03 94       	inc	r0
    1524:	00 0c       	add	r0, r0
    1526:	11 f4       	brne	.+4      	; 0x152c <__fp_round+0xc>
    1528:	88 23       	and	r24, r24
    152a:	52 f0       	brmi	.+20     	; 0x1540 <__fp_round+0x20>
    152c:	bb 0f       	add	r27, r27
    152e:	40 f4       	brcc	.+16     	; 0x1540 <__fp_round+0x20>
    1530:	bf 2b       	or	r27, r31
    1532:	11 f4       	brne	.+4      	; 0x1538 <__fp_round+0x18>
    1534:	60 ff       	sbrs	r22, 0
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <__fp_round+0x20>
    1538:	6f 5f       	subi	r22, 0xFF	; 255
    153a:	7f 4f       	sbci	r23, 0xFF	; 255
    153c:	8f 4f       	sbci	r24, 0xFF	; 255
    153e:	9f 4f       	sbci	r25, 0xFF	; 255
    1540:	08 95       	ret

00001542 <__fp_split3>:
    1542:	57 fd       	sbrc	r21, 7
    1544:	90 58       	subi	r25, 0x80	; 128
    1546:	44 0f       	add	r20, r20
    1548:	55 1f       	adc	r21, r21
    154a:	59 f0       	breq	.+22     	; 0x1562 <__fp_splitA+0x10>
    154c:	5f 3f       	cpi	r21, 0xFF	; 255
    154e:	71 f0       	breq	.+28     	; 0x156c <__fp_splitA+0x1a>
    1550:	47 95       	ror	r20

00001552 <__fp_splitA>:
    1552:	88 0f       	add	r24, r24
    1554:	97 fb       	bst	r25, 7
    1556:	99 1f       	adc	r25, r25
    1558:	61 f0       	breq	.+24     	; 0x1572 <__fp_splitA+0x20>
    155a:	9f 3f       	cpi	r25, 0xFF	; 255
    155c:	79 f0       	breq	.+30     	; 0x157c <__fp_splitA+0x2a>
    155e:	87 95       	ror	r24
    1560:	08 95       	ret
    1562:	12 16       	cp	r1, r18
    1564:	13 06       	cpc	r1, r19
    1566:	14 06       	cpc	r1, r20
    1568:	55 1f       	adc	r21, r21
    156a:	f2 cf       	rjmp	.-28     	; 0x1550 <__fp_split3+0xe>
    156c:	46 95       	lsr	r20
    156e:	f1 df       	rcall	.-30     	; 0x1552 <__fp_splitA>
    1570:	08 c0       	rjmp	.+16     	; 0x1582 <__fp_splitA+0x30>
    1572:	16 16       	cp	r1, r22
    1574:	17 06       	cpc	r1, r23
    1576:	18 06       	cpc	r1, r24
    1578:	99 1f       	adc	r25, r25
    157a:	f1 cf       	rjmp	.-30     	; 0x155e <__fp_splitA+0xc>
    157c:	86 95       	lsr	r24
    157e:	71 05       	cpc	r23, r1
    1580:	61 05       	cpc	r22, r1
    1582:	08 94       	sec
    1584:	08 95       	ret

00001586 <__fp_zero>:
    1586:	e8 94       	clt

00001588 <__fp_szero>:
    1588:	bb 27       	eor	r27, r27
    158a:	66 27       	eor	r22, r22
    158c:	77 27       	eor	r23, r23
    158e:	cb 01       	movw	r24, r22
    1590:	97 f9       	bld	r25, 7
    1592:	08 95       	ret
    1594:	0e f0       	brts	.+2      	; 0x1598 <__fp_szero+0x10>
    1596:	a6 c0       	rjmp	.+332    	; 0x16e4 <__fp_mpack>
    1598:	b2 cf       	rjmp	.-156    	; 0x14fe <__fp_nan>
    159a:	68 94       	set
    159c:	aa cf       	rjmp	.-172    	; 0x14f2 <__fp_inf>

0000159e <log>:
    159e:	d9 df       	rcall	.-78     	; 0x1552 <__fp_splitA>
    15a0:	c8 f3       	brcs	.-14     	; 0x1594 <__fp_szero+0xc>
    15a2:	99 23       	and	r25, r25
    15a4:	d1 f3       	breq	.-12     	; 0x159a <__fp_szero+0x12>
    15a6:	c6 f3       	brts	.-16     	; 0x1598 <__fp_szero+0x10>
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	1f 93       	push	r17
    15ae:	0f 93       	push	r16
    15b0:	ff 92       	push	r15
    15b2:	c9 2f       	mov	r28, r25
    15b4:	dd 27       	eor	r29, r29
    15b6:	88 23       	and	r24, r24
    15b8:	2a f0       	brmi	.+10     	; 0x15c4 <log+0x26>
    15ba:	21 97       	sbiw	r28, 0x01	; 1
    15bc:	66 0f       	add	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	88 1f       	adc	r24, r24
    15c2:	da f7       	brpl	.-10     	; 0x15ba <log+0x1c>
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	5f eb       	ldi	r21, 0xBF	; 191
    15cc:	9f e3       	ldi	r25, 0x3F	; 63
    15ce:	88 39       	cpi	r24, 0x98	; 152
    15d0:	20 f0       	brcs	.+8      	; 0x15da <log+0x3c>
    15d2:	80 3e       	cpi	r24, 0xE0	; 224
    15d4:	30 f0       	brcs	.+12     	; 0x15e2 <log+0x44>
    15d6:	21 96       	adiw	r28, 0x01	; 1
    15d8:	8f 77       	andi	r24, 0x7F	; 127
    15da:	51 de       	rcall	.-862    	; 0x127e <__addsf3>
    15dc:	ee ef       	ldi	r30, 0xFE	; 254
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	03 c0       	rjmp	.+6      	; 0x15e8 <log+0x4a>
    15e2:	4d de       	rcall	.-870    	; 0x127e <__addsf3>
    15e4:	eb e2       	ldi	r30, 0x2B	; 43
    15e6:	f1 e0       	ldi	r31, 0x01	; 1
    15e8:	8b d0       	rcall	.+278    	; 0x1700 <__fp_powser>
    15ea:	8b 01       	movw	r16, r22
    15ec:	be 01       	movw	r22, r28
    15ee:	ec 01       	movw	r28, r24
    15f0:	fb 2e       	mov	r15, r27
    15f2:	6f 57       	subi	r22, 0x7F	; 127
    15f4:	71 09       	sbc	r23, r1
    15f6:	75 95       	asr	r23
    15f8:	77 1f       	adc	r23, r23
    15fa:	88 0b       	sbc	r24, r24
    15fc:	99 0b       	sbc	r25, r25
    15fe:	3e df       	rcall	.-388    	; 0x147c <__floatsisf>
    1600:	28 e1       	ldi	r18, 0x18	; 24
    1602:	32 e7       	ldi	r19, 0x72	; 114
    1604:	41 e3       	ldi	r20, 0x31	; 49
    1606:	5f e3       	ldi	r21, 0x3F	; 63
    1608:	16 d0       	rcall	.+44     	; 0x1636 <__mulsf3x>
    160a:	af 2d       	mov	r26, r15
    160c:	98 01       	movw	r18, r16
    160e:	ae 01       	movw	r20, r28
    1610:	ff 90       	pop	r15
    1612:	0f 91       	pop	r16
    1614:	1f 91       	pop	r17
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	42 de       	rcall	.-892    	; 0x12a0 <__addsf3x>
    161c:	81 cf       	rjmp	.-254    	; 0x1520 <__fp_round>

0000161e <__mulsf3>:
    161e:	0b d0       	rcall	.+22     	; 0x1636 <__mulsf3x>
    1620:	7f cf       	rjmp	.-258    	; 0x1520 <__fp_round>
    1622:	70 df       	rcall	.-288    	; 0x1504 <__fp_pscA>
    1624:	28 f0       	brcs	.+10     	; 0x1630 <__mulsf3+0x12>
    1626:	75 df       	rcall	.-278    	; 0x1512 <__fp_pscB>
    1628:	18 f0       	brcs	.+6      	; 0x1630 <__mulsf3+0x12>
    162a:	95 23       	and	r25, r21
    162c:	09 f0       	breq	.+2      	; 0x1630 <__mulsf3+0x12>
    162e:	61 cf       	rjmp	.-318    	; 0x14f2 <__fp_inf>
    1630:	66 cf       	rjmp	.-308    	; 0x14fe <__fp_nan>
    1632:	11 24       	eor	r1, r1
    1634:	a9 cf       	rjmp	.-174    	; 0x1588 <__fp_szero>

00001636 <__mulsf3x>:
    1636:	85 df       	rcall	.-246    	; 0x1542 <__fp_split3>
    1638:	a0 f3       	brcs	.-24     	; 0x1622 <__mulsf3+0x4>

0000163a <__mulsf3_pse>:
    163a:	95 9f       	mul	r25, r21
    163c:	d1 f3       	breq	.-12     	; 0x1632 <__mulsf3+0x14>
    163e:	95 0f       	add	r25, r21
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	55 1f       	adc	r21, r21
    1644:	62 9f       	mul	r22, r18
    1646:	f0 01       	movw	r30, r0
    1648:	72 9f       	mul	r23, r18
    164a:	bb 27       	eor	r27, r27
    164c:	f0 0d       	add	r31, r0
    164e:	b1 1d       	adc	r27, r1
    1650:	63 9f       	mul	r22, r19
    1652:	aa 27       	eor	r26, r26
    1654:	f0 0d       	add	r31, r0
    1656:	b1 1d       	adc	r27, r1
    1658:	aa 1f       	adc	r26, r26
    165a:	64 9f       	mul	r22, r20
    165c:	66 27       	eor	r22, r22
    165e:	b0 0d       	add	r27, r0
    1660:	a1 1d       	adc	r26, r1
    1662:	66 1f       	adc	r22, r22
    1664:	82 9f       	mul	r24, r18
    1666:	22 27       	eor	r18, r18
    1668:	b0 0d       	add	r27, r0
    166a:	a1 1d       	adc	r26, r1
    166c:	62 1f       	adc	r22, r18
    166e:	73 9f       	mul	r23, r19
    1670:	b0 0d       	add	r27, r0
    1672:	a1 1d       	adc	r26, r1
    1674:	62 1f       	adc	r22, r18
    1676:	83 9f       	mul	r24, r19
    1678:	a0 0d       	add	r26, r0
    167a:	61 1d       	adc	r22, r1
    167c:	22 1f       	adc	r18, r18
    167e:	74 9f       	mul	r23, r20
    1680:	33 27       	eor	r19, r19
    1682:	a0 0d       	add	r26, r0
    1684:	61 1d       	adc	r22, r1
    1686:	23 1f       	adc	r18, r19
    1688:	84 9f       	mul	r24, r20
    168a:	60 0d       	add	r22, r0
    168c:	21 1d       	adc	r18, r1
    168e:	82 2f       	mov	r24, r18
    1690:	76 2f       	mov	r23, r22
    1692:	6a 2f       	mov	r22, r26
    1694:	11 24       	eor	r1, r1
    1696:	9f 57       	subi	r25, 0x7F	; 127
    1698:	50 40       	sbci	r21, 0x00	; 0
    169a:	8a f0       	brmi	.+34     	; 0x16be <__mulsf3_pse+0x84>
    169c:	e1 f0       	breq	.+56     	; 0x16d6 <__mulsf3_pse+0x9c>
    169e:	88 23       	and	r24, r24
    16a0:	4a f0       	brmi	.+18     	; 0x16b4 <__mulsf3_pse+0x7a>
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	bb 1f       	adc	r27, r27
    16a8:	66 1f       	adc	r22, r22
    16aa:	77 1f       	adc	r23, r23
    16ac:	88 1f       	adc	r24, r24
    16ae:	91 50       	subi	r25, 0x01	; 1
    16b0:	50 40       	sbci	r21, 0x00	; 0
    16b2:	a9 f7       	brne	.-22     	; 0x169e <__mulsf3_pse+0x64>
    16b4:	9e 3f       	cpi	r25, 0xFE	; 254
    16b6:	51 05       	cpc	r21, r1
    16b8:	70 f0       	brcs	.+28     	; 0x16d6 <__mulsf3_pse+0x9c>
    16ba:	1b cf       	rjmp	.-458    	; 0x14f2 <__fp_inf>
    16bc:	65 cf       	rjmp	.-310    	; 0x1588 <__fp_szero>
    16be:	5f 3f       	cpi	r21, 0xFF	; 255
    16c0:	ec f3       	brlt	.-6      	; 0x16bc <__mulsf3_pse+0x82>
    16c2:	98 3e       	cpi	r25, 0xE8	; 232
    16c4:	dc f3       	brlt	.-10     	; 0x16bc <__mulsf3_pse+0x82>
    16c6:	86 95       	lsr	r24
    16c8:	77 95       	ror	r23
    16ca:	67 95       	ror	r22
    16cc:	b7 95       	ror	r27
    16ce:	f7 95       	ror	r31
    16d0:	e7 95       	ror	r30
    16d2:	9f 5f       	subi	r25, 0xFF	; 255
    16d4:	c1 f7       	brne	.-16     	; 0x16c6 <__mulsf3_pse+0x8c>
    16d6:	fe 2b       	or	r31, r30
    16d8:	88 0f       	add	r24, r24
    16da:	91 1d       	adc	r25, r1
    16dc:	96 95       	lsr	r25
    16de:	87 95       	ror	r24
    16e0:	97 f9       	bld	r25, 7
    16e2:	08 95       	ret

000016e4 <__fp_mpack>:
    16e4:	9f 3f       	cpi	r25, 0xFF	; 255
    16e6:	31 f0       	breq	.+12     	; 0x16f4 <__fp_mpack_finite+0xc>

000016e8 <__fp_mpack_finite>:
    16e8:	91 50       	subi	r25, 0x01	; 1
    16ea:	20 f4       	brcc	.+8      	; 0x16f4 <__fp_mpack_finite+0xc>
    16ec:	87 95       	ror	r24
    16ee:	77 95       	ror	r23
    16f0:	67 95       	ror	r22
    16f2:	b7 95       	ror	r27
    16f4:	88 0f       	add	r24, r24
    16f6:	91 1d       	adc	r25, r1
    16f8:	96 95       	lsr	r25
    16fa:	87 95       	ror	r24
    16fc:	97 f9       	bld	r25, 7
    16fe:	08 95       	ret

00001700 <__fp_powser>:
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	1f 93       	push	r17
    1706:	0f 93       	push	r16
    1708:	ff 92       	push	r15
    170a:	ef 92       	push	r14
    170c:	df 92       	push	r13
    170e:	7b 01       	movw	r14, r22
    1710:	8c 01       	movw	r16, r24
    1712:	68 94       	set
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <__fp_powser+0x20>
    1716:	da 2e       	mov	r13, r26
    1718:	ef 01       	movw	r28, r30
    171a:	8d df       	rcall	.-230    	; 0x1636 <__mulsf3x>
    171c:	fe 01       	movw	r30, r28
    171e:	e8 94       	clt
    1720:	a5 91       	lpm	r26, Z+
    1722:	25 91       	lpm	r18, Z+
    1724:	35 91       	lpm	r19, Z+
    1726:	45 91       	lpm	r20, Z+
    1728:	55 91       	lpm	r21, Z+
    172a:	ae f3       	brts	.-22     	; 0x1716 <__fp_powser+0x16>
    172c:	ef 01       	movw	r28, r30
    172e:	b8 dd       	rcall	.-1168   	; 0x12a0 <__addsf3x>
    1730:	fe 01       	movw	r30, r28
    1732:	97 01       	movw	r18, r14
    1734:	a8 01       	movw	r20, r16
    1736:	da 94       	dec	r13
    1738:	79 f7       	brne	.-34     	; 0x1718 <__fp_powser+0x18>
    173a:	df 90       	pop	r13
    173c:	ef 90       	pop	r14
    173e:	ff 90       	pop	r15
    1740:	0f 91       	pop	r16
    1742:	1f 91       	pop	r17
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    174a:	1f 92       	push	r1
    174c:	0f 92       	push	r0
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	0f 92       	push	r0
    1752:	11 24       	eor	r1, r1
    1754:	0b b6       	in	r0, 0x3b	; 59
    1756:	0f 92       	push	r0
    1758:	2f 93       	push	r18
    175a:	8f 93       	push	r24
    175c:	9f 93       	push	r25
    175e:	ef 93       	push	r30
    1760:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1762:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <Serial+0x10>
    1766:	f0 91 d8 04 	lds	r31, 0x04D8	; 0x8004d8 <Serial+0x11>
    176a:	80 81       	ld	r24, Z
    176c:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <Serial+0x16>
    1770:	f0 91 de 04 	lds	r31, 0x04DE	; 0x8004de <Serial+0x17>
    1774:	82 fd       	sbrc	r24, 2
    1776:	12 c0       	rjmp	.+36     	; 0x179c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1778:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    177a:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <Serial+0x19>
    177e:	8f 5f       	subi	r24, 0xFF	; 255
    1780:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1782:	20 91 e1 04 	lds	r18, 0x04E1	; 0x8004e1 <Serial+0x1a>
    1786:	82 17       	cp	r24, r18
    1788:	51 f0       	breq	.+20     	; 0x179e <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    178a:	e0 91 e0 04 	lds	r30, 0x04E0	; 0x8004e0 <Serial+0x19>
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	e9 53       	subi	r30, 0x39	; 57
    1792:	fb 4f       	sbci	r31, 0xFB	; 251
    1794:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1796:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <Serial+0x19>
    179a:	01 c0       	rjmp	.+2      	; 0x179e <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    179c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    179e:	ff 91       	pop	r31
    17a0:	ef 91       	pop	r30
    17a2:	9f 91       	pop	r25
    17a4:	8f 91       	pop	r24
    17a6:	2f 91       	pop	r18
    17a8:	0f 90       	pop	r0
    17aa:	0b be       	out	0x3b, r0	; 59
    17ac:	0f 90       	pop	r0
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	0f 90       	pop	r0
    17b2:	1f 90       	pop	r1
    17b4:	18 95       	reti

000017b6 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    17b6:	1f 92       	push	r1
    17b8:	0f 92       	push	r0
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	0f 92       	push	r0
    17be:	11 24       	eor	r1, r1
    17c0:	0b b6       	in	r0, 0x3b	; 59
    17c2:	0f 92       	push	r0
    17c4:	2f 93       	push	r18
    17c6:	3f 93       	push	r19
    17c8:	4f 93       	push	r20
    17ca:	5f 93       	push	r21
    17cc:	6f 93       	push	r22
    17ce:	7f 93       	push	r23
    17d0:	8f 93       	push	r24
    17d2:	9f 93       	push	r25
    17d4:	af 93       	push	r26
    17d6:	bf 93       	push	r27
    17d8:	ef 93       	push	r30
    17da:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    17dc:	87 ec       	ldi	r24, 0xC7	; 199
    17de:	94 e0       	ldi	r25, 0x04	; 4
    17e0:	c0 d3       	rcall	.+1920   	; 0x1f62 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    17e2:	ff 91       	pop	r31
    17e4:	ef 91       	pop	r30
    17e6:	bf 91       	pop	r27
    17e8:	af 91       	pop	r26
    17ea:	9f 91       	pop	r25
    17ec:	8f 91       	pop	r24
    17ee:	7f 91       	pop	r23
    17f0:	6f 91       	pop	r22
    17f2:	5f 91       	pop	r21
    17f4:	4f 91       	pop	r20
    17f6:	3f 91       	pop	r19
    17f8:	2f 91       	pop	r18
    17fa:	0f 90       	pop	r0
    17fc:	0b be       	out	0x3b, r0	; 59
    17fe:	0f 90       	pop	r0
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	0f 90       	pop	r0
    1804:	1f 90       	pop	r1
    1806:	18 95       	reti

00001808 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1808:	87 ec       	ldi	r24, 0xC7	; 199
    180a:	94 e0       	ldi	r25, 0x04	; 4
    180c:	31 d3       	rcall	.+1634   	; 0x1e70 <_ZN14HardwareSerial9availableEv>
    180e:	21 e0       	ldi	r18, 0x01	; 1
    1810:	89 2b       	or	r24, r25
    1812:	09 f4       	brne	.+2      	; 0x1816 <_Z17Serial0_availablev+0xe>
    1814:	20 e0       	ldi	r18, 0x00	; 0
}
    1816:	82 2f       	mov	r24, r18
    1818:	08 95       	ret

0000181a <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    181a:	e7 ec       	ldi	r30, 0xC7	; 199
    181c:	f4 e0       	ldi	r31, 0x04	; 4
    181e:	13 82       	std	Z+3, r1	; 0x03
    1820:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1822:	88 ee       	ldi	r24, 0xE8	; 232
    1824:	93 e0       	ldi	r25, 0x03	; 3
    1826:	a0 e0       	ldi	r26, 0x00	; 0
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	84 83       	std	Z+4, r24	; 0x04
    182c:	95 83       	std	Z+5, r25	; 0x05
    182e:	a6 83       	std	Z+6, r26	; 0x06
    1830:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1832:	8e e8       	ldi	r24, 0x8E	; 142
    1834:	93 e0       	ldi	r25, 0x03	; 3
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	80 83       	st	Z, r24
    183a:	85 ec       	ldi	r24, 0xC5	; 197
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	95 87       	std	Z+13, r25	; 0x0d
    1840:	84 87       	std	Z+12, r24	; 0x0c
    1842:	84 ec       	ldi	r24, 0xC4	; 196
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	97 87       	std	Z+15, r25	; 0x0f
    1848:	86 87       	std	Z+14, r24	; 0x0e
    184a:	80 ec       	ldi	r24, 0xC0	; 192
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	91 8b       	std	Z+17, r25	; 0x11
    1850:	80 8b       	std	Z+16, r24	; 0x10
    1852:	81 ec       	ldi	r24, 0xC1	; 193
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	93 8b       	std	Z+19, r25	; 0x13
    1858:	82 8b       	std	Z+18, r24	; 0x12
    185a:	82 ec       	ldi	r24, 0xC2	; 194
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	95 8b       	std	Z+21, r25	; 0x15
    1860:	84 8b       	std	Z+20, r24	; 0x14
    1862:	86 ec       	ldi	r24, 0xC6	; 198
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	97 8b       	std	Z+23, r25	; 0x17
    1868:	86 8b       	std	Z+22, r24	; 0x16
    186a:	11 8e       	std	Z+25, r1	; 0x19
    186c:	12 8e       	std	Z+26, r1	; 0x1a
    186e:	13 8e       	std	Z+27, r1	; 0x1b
    1870:	14 8e       	std	Z+28, r1	; 0x1c
    1872:	08 95       	ret

00001874 <initVariant>:
    1874:	08 95       	ret

00001876 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1876:	8e d1       	rcall	.+796    	; 0x1b94 <init>

	initVariant();
    1878:	fd df       	rcall	.-6      	; 0x1874 <initVariant>
    187a:	0e 94 22 03 	call	0x644	; 0x644 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    187e:	c5 e7       	ldi	r28, 0x75	; 117
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1880:	df e0       	ldi	r29, 0x0F	; 15
    1882:	0e 94 2c 03 	call	0x658	; 0x658 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    1886:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    1888:	e1 f3       	breq	.-8      	; 0x1882 <main+0xc>
    188a:	2f d3       	rcall	.+1630   	; 0x1eea <_Z14serialEventRunv>
    188c:	fa cf       	rjmp	.-12     	; 0x1882 <main+0xc>

0000188e <_ZN5Print5writeEPKhj>:
    188e:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1890:	df 92       	push	r13
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	6c 01       	movw	r12, r24
    18a0:	7a 01       	movw	r14, r20
    18a2:	8b 01       	movw	r16, r22
    18a4:	c0 e0       	ldi	r28, 0x00	; 0
    18a6:	d0 e0       	ldi	r29, 0x00	; 0
    18a8:	ce 15       	cp	r28, r14
    18aa:	df 05       	cpc	r29, r15
    18ac:	81 f0       	breq	.+32     	; 0x18ce <_ZN5Print5writeEPKhj+0x40>
    18ae:	d8 01       	movw	r26, r16
    18b0:	6d 91       	ld	r22, X+
    18b2:	8d 01       	movw	r16, r26
    18b4:	d6 01       	movw	r26, r12
    18b6:	ed 91       	ld	r30, X+
    18b8:	fc 91       	ld	r31, X
    18ba:	01 90       	ld	r0, Z+
    18bc:	f0 81       	ld	r31, Z
    18be:	e0 2d       	mov	r30, r0
    18c0:	c6 01       	movw	r24, r12
    18c2:	19 95       	eicall
    18c4:	89 2b       	or	r24, r25
    18c6:	11 f0       	breq	.+4      	; 0x18cc <_ZN5Print5writeEPKhj+0x3e>
    18c8:	21 96       	adiw	r28, 0x01	; 1
    18ca:	ee cf       	rjmp	.-36     	; 0x18a8 <_ZN5Print5writeEPKhj+0x1a>
    18cc:	7e 01       	movw	r14, r28
    18ce:	c7 01       	movw	r24, r14
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	ff 90       	pop	r15
    18da:	ef 90       	pop	r14
    18dc:	df 90       	pop	r13
    18de:	cf 90       	pop	r12
    18e0:	08 95       	ret

000018e2 <_ZN5Print5printEc>:
    18e2:	dc 01       	movw	r26, r24
    18e4:	ed 91       	ld	r30, X+
    18e6:	fc 91       	ld	r31, X
    18e8:	01 90       	ld	r0, Z+
    18ea:	f0 81       	ld	r31, Z
    18ec:	e0 2d       	mov	r30, r0
    18ee:	19 94       	eijmp

000018f0 <_ZN5Print11printNumberEmh>:
    18f0:	8f 92       	push	r8
    18f2:	9f 92       	push	r9
    18f4:	af 92       	push	r10
    18f6:	bf 92       	push	r11
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	a1 97       	sbiw	r28, 0x21	; 33
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	7c 01       	movw	r14, r24
    1916:	fa 01       	movw	r30, r20
    1918:	cb 01       	movw	r24, r22
    191a:	19 a2       	std	Y+33, r1	; 0x21
    191c:	22 30       	cpi	r18, 0x02	; 2
    191e:	08 f4       	brcc	.+2      	; 0x1922 <_ZN5Print11printNumberEmh+0x32>
    1920:	2a e0       	ldi	r18, 0x0A	; 10
    1922:	8e 01       	movw	r16, r28
    1924:	0f 5d       	subi	r16, 0xDF	; 223
    1926:	1f 4f       	sbci	r17, 0xFF	; 255
    1928:	82 2e       	mov	r8, r18
    192a:	91 2c       	mov	r9, r1
    192c:	a1 2c       	mov	r10, r1
    192e:	b1 2c       	mov	r11, r1
    1930:	bf 01       	movw	r22, r30
    1932:	a5 01       	movw	r20, r10
    1934:	94 01       	movw	r18, r8
    1936:	a5 d3       	rcall	.+1866   	; 0x2082 <__udivmodsi4>
    1938:	f9 01       	movw	r30, r18
    193a:	ca 01       	movw	r24, r20
    193c:	01 50       	subi	r16, 0x01	; 1
    193e:	11 09       	sbc	r17, r1
    1940:	6a 30       	cpi	r22, 0x0A	; 10
    1942:	10 f4       	brcc	.+4      	; 0x1948 <_ZN5Print11printNumberEmh+0x58>
    1944:	60 5d       	subi	r22, 0xD0	; 208
    1946:	01 c0       	rjmp	.+2      	; 0x194a <_ZN5Print11printNumberEmh+0x5a>
    1948:	69 5c       	subi	r22, 0xC9	; 201
    194a:	d8 01       	movw	r26, r16
    194c:	6c 93       	st	X, r22
    194e:	23 2b       	or	r18, r19
    1950:	24 2b       	or	r18, r20
    1952:	25 2b       	or	r18, r21
    1954:	69 f7       	brne	.-38     	; 0x1930 <_ZN5Print11printNumberEmh+0x40>
    1956:	b8 01       	movw	r22, r16
    1958:	c7 01       	movw	r24, r14
    195a:	0e 94 82 01 	call	0x304	; 0x304 <_ZN5Print5writeEPKc>
    195e:	a1 96       	adiw	r28, 0x21	; 33
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	bf 90       	pop	r11
    1978:	af 90       	pop	r10
    197a:	9f 90       	pop	r9
    197c:	8f 90       	pop	r8
    197e:	08 95       	ret

00001980 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1980:	cf 92       	push	r12
    1982:	df 92       	push	r13
    1984:	ef 92       	push	r14
    1986:	ff 92       	push	r15
    1988:	0f 93       	push	r16
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
  if (base == 0) {
    1990:	21 15       	cp	r18, r1
    1992:	31 05       	cpc	r19, r1
    1994:	81 f4       	brne	.+32     	; 0x19b6 <_ZN5Print5printEli+0x36>
    return write(n);
    1996:	dc 01       	movw	r26, r24
    1998:	ed 91       	ld	r30, X+
    199a:	fc 91       	ld	r31, X
    199c:	01 90       	ld	r0, Z+
    199e:	f0 81       	ld	r31, Z
    19a0:	e0 2d       	mov	r30, r0
    19a2:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	ff 90       	pop	r15
    19ae:	ef 90       	pop	r14
    19b0:	df 90       	pop	r13
    19b2:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    19b4:	19 94       	eijmp
  } else if (base == 10) {
    19b6:	2a 30       	cpi	r18, 0x0A	; 10
    19b8:	31 05       	cpc	r19, r1
    19ba:	f1 f4       	brne	.+60     	; 0x19f8 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    19bc:	77 ff       	sbrs	r23, 7
    19be:	1b c0       	rjmp	.+54     	; 0x19f6 <_ZN5Print5printEli+0x76>
    19c0:	6a 01       	movw	r12, r20
    19c2:	7b 01       	movw	r14, r22
    19c4:	ec 01       	movw	r28, r24
      int t = print('-');
    19c6:	6d e2       	ldi	r22, 0x2D	; 45
    19c8:	8c df       	rcall	.-232    	; 0x18e2 <_ZN5Print5printEc>
    19ca:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    19cc:	44 27       	eor	r20, r20
    19ce:	55 27       	eor	r21, r21
    19d0:	ba 01       	movw	r22, r20
    19d2:	4c 19       	sub	r20, r12
    19d4:	5d 09       	sbc	r21, r13
    19d6:	6e 09       	sbc	r22, r14
    19d8:	7f 09       	sbc	r23, r15
    19da:	2a e0       	ldi	r18, 0x0A	; 10
    19dc:	ce 01       	movw	r24, r28
    19de:	88 df       	rcall	.-240    	; 0x18f0 <_ZN5Print11printNumberEmh>
    19e0:	80 0f       	add	r24, r16
    19e2:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	1f 91       	pop	r17
    19ea:	0f 91       	pop	r16
    19ec:	ff 90       	pop	r15
    19ee:	ef 90       	pop	r14
    19f0:	df 90       	pop	r13
    19f2:	cf 90       	pop	r12
    19f4:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    19f6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	1f 91       	pop	r17
    19fe:	0f 91       	pop	r16
    1a00:	ff 90       	pop	r15
    1a02:	ef 90       	pop	r14
    1a04:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1a06:	cf 90       	pop	r12
    1a08:	73 cf       	rjmp	.-282    	; 0x18f0 <_ZN5Print11printNumberEmh>

00001a0a <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1a0a:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1a0c:	ab 01       	movw	r20, r22
    1a0e:	77 0f       	add	r23, r23
    1a10:	66 0b       	sbc	r22, r22
    1a12:	77 0b       	sbc	r23, r23
    1a14:	b5 cf       	rjmp	.-150    	; 0x1980 <_ZN5Print5printEli>

00001a16 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1a16:	1f 92       	push	r1
    1a18:	0f 92       	push	r0
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	0f 92       	push	r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	2f 93       	push	r18
    1a22:	3f 93       	push	r19
    1a24:	8f 93       	push	r24
    1a26:	9f 93       	push	r25
    1a28:	af 93       	push	r26
    1a2a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1a2c:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <timer0_millis>
    1a30:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <timer0_millis+0x1>
    1a34:	a0 91 67 05 	lds	r26, 0x0567	; 0x800567 <timer0_millis+0x2>
    1a38:	b0 91 68 05 	lds	r27, 0x0568	; 0x800568 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1a3c:	30 91 64 05 	lds	r19, 0x0564	; 0x800564 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1a40:	23 e0       	ldi	r18, 0x03	; 3
    1a42:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1a44:	2d 37       	cpi	r18, 0x7D	; 125
    1a46:	20 f4       	brcc	.+8      	; 0x1a50 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	a1 1d       	adc	r26, r1
    1a4c:	b1 1d       	adc	r27, r1
    1a4e:	05 c0       	rjmp	.+10     	; 0x1a5a <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1a50:	26 e8       	ldi	r18, 0x86	; 134
    1a52:	23 0f       	add	r18, r19
		m += 1;
    1a54:	02 96       	adiw	r24, 0x02	; 2
    1a56:	a1 1d       	adc	r26, r1
    1a58:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1a5a:	20 93 64 05 	sts	0x0564, r18	; 0x800564 <timer0_fract>
	timer0_millis = m;
    1a5e:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <timer0_millis>
    1a62:	90 93 66 05 	sts	0x0566, r25	; 0x800566 <timer0_millis+0x1>
    1a66:	a0 93 67 05 	sts	0x0567, r26	; 0x800567 <timer0_millis+0x2>
    1a6a:	b0 93 68 05 	sts	0x0568, r27	; 0x800568 <timer0_millis+0x3>
	timer0_overflow_count++;
    1a6e:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <timer0_overflow_count>
    1a72:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <timer0_overflow_count+0x1>
    1a76:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <timer0_overflow_count+0x2>
    1a7a:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <timer0_overflow_count+0x3>
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	a1 1d       	adc	r26, r1
    1a82:	b1 1d       	adc	r27, r1
    1a84:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <timer0_overflow_count>
    1a88:	90 93 6a 05 	sts	0x056A, r25	; 0x80056a <timer0_overflow_count+0x1>
    1a8c:	a0 93 6b 05 	sts	0x056B, r26	; 0x80056b <timer0_overflow_count+0x2>
    1a90:	b0 93 6c 05 	sts	0x056C, r27	; 0x80056c <timer0_overflow_count+0x3>
}
    1a94:	bf 91       	pop	r27
    1a96:	af 91       	pop	r26
    1a98:	9f 91       	pop	r25
    1a9a:	8f 91       	pop	r24
    1a9c:	3f 91       	pop	r19
    1a9e:	2f 91       	pop	r18
    1aa0:	0f 90       	pop	r0
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	0f 90       	pop	r0
    1aa6:	1f 90       	pop	r1
    1aa8:	18 95       	reti

00001aaa <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1aaa:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1aac:	f8 94       	cli
	m = timer0_millis;
    1aae:	60 91 65 05 	lds	r22, 0x0565	; 0x800565 <timer0_millis>
    1ab2:	70 91 66 05 	lds	r23, 0x0566	; 0x800566 <timer0_millis+0x1>
    1ab6:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <timer0_millis+0x2>
    1aba:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <timer0_millis+0x3>
	SREG = oldSREG;
    1abe:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1ac0:	08 95       	ret

00001ac2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1ac2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1ac4:	f8 94       	cli
	m = timer0_overflow_count;
    1ac6:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <timer0_overflow_count>
    1aca:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <timer0_overflow_count+0x1>
    1ace:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <timer0_overflow_count+0x2>
    1ad2:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1ad6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1ad8:	a8 9b       	sbis	0x15, 0	; 21
    1ada:	05 c0       	rjmp	.+10     	; 0x1ae6 <micros+0x24>
    1adc:	2f 3f       	cpi	r18, 0xFF	; 255
    1ade:	19 f0       	breq	.+6      	; 0x1ae6 <micros+0x24>
		m++;
    1ae0:	01 96       	adiw	r24, 0x01	; 1
    1ae2:	a1 1d       	adc	r26, r1
    1ae4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1ae6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1ae8:	ba 2f       	mov	r27, r26
    1aea:	a9 2f       	mov	r26, r25
    1aec:	98 2f       	mov	r25, r24
    1aee:	88 27       	eor	r24, r24
    1af0:	82 0f       	add	r24, r18
    1af2:	91 1d       	adc	r25, r1
    1af4:	a1 1d       	adc	r26, r1
    1af6:	b1 1d       	adc	r27, r1
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	42 e0       	ldi	r20, 0x02	; 2
    1afe:	66 0f       	add	r22, r22
    1b00:	77 1f       	adc	r23, r23
    1b02:	88 1f       	adc	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	4a 95       	dec	r20
    1b08:	d1 f7       	brne	.-12     	; 0x1afe <micros+0x3c>
}
    1b0a:	08 95       	ret

00001b0c <delay>:

void delay(unsigned long ms)
{
    1b0c:	8f 92       	push	r8
    1b0e:	9f 92       	push	r9
    1b10:	af 92       	push	r10
    1b12:	bf 92       	push	r11
    1b14:	cf 92       	push	r12
    1b16:	df 92       	push	r13
    1b18:	ef 92       	push	r14
    1b1a:	ff 92       	push	r15
    1b1c:	6b 01       	movw	r12, r22
    1b1e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1b20:	d0 df       	rcall	.-96     	; 0x1ac2 <micros>
    1b22:	4b 01       	movw	r8, r22
    1b24:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1b26:	c1 14       	cp	r12, r1
    1b28:	d1 04       	cpc	r13, r1
    1b2a:	e1 04       	cpc	r14, r1
    1b2c:	f1 04       	cpc	r15, r1
		yield();
    1b2e:	f1 f0       	breq	.+60     	; 0x1b6c <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1b30:	a7 d2       	rcall	.+1358   	; 0x2080 <yield>
    1b32:	c7 df       	rcall	.-114    	; 0x1ac2 <micros>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	88 19       	sub	r24, r8
    1b3a:	99 09       	sbc	r25, r9
    1b3c:	aa 09       	sbc	r26, r10
    1b3e:	bb 09       	sbc	r27, r11
    1b40:	88 3e       	cpi	r24, 0xE8	; 232
    1b42:	93 40       	sbci	r25, 0x03	; 3
    1b44:	a1 05       	cpc	r26, r1
    1b46:	b1 05       	cpc	r27, r1
    1b48:	70 f3       	brcs	.-36     	; 0x1b26 <delay+0x1a>
			ms--;
    1b4a:	21 e0       	ldi	r18, 0x01	; 1
    1b4c:	c2 1a       	sub	r12, r18
    1b4e:	d1 08       	sbc	r13, r1
    1b50:	e1 08       	sbc	r14, r1
    1b52:	f1 08       	sbc	r15, r1
			start += 1000;
    1b54:	88 ee       	ldi	r24, 0xE8	; 232
    1b56:	88 0e       	add	r8, r24
    1b58:	83 e0       	ldi	r24, 0x03	; 3
    1b5a:	98 1e       	adc	r9, r24
    1b5c:	a1 1c       	adc	r10, r1
    1b5e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1b60:	c1 14       	cp	r12, r1
    1b62:	d1 04       	cpc	r13, r1
    1b64:	e1 04       	cpc	r14, r1
    1b66:	f1 04       	cpc	r15, r1
    1b68:	21 f7       	brne	.-56     	; 0x1b32 <delay+0x26>
    1b6a:	dd cf       	rjmp	.-70     	; 0x1b26 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    1b6c:	ff 90       	pop	r15
    1b6e:	ef 90       	pop	r14
    1b70:	df 90       	pop	r13
    1b72:	cf 90       	pop	r12
    1b74:	bf 90       	pop	r11
    1b76:	af 90       	pop	r10
    1b78:	9f 90       	pop	r9
    1b7a:	8f 90       	pop	r8
    1b7c:	08 95       	ret

00001b7e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1b7e:	82 30       	cpi	r24, 0x02	; 2
    1b80:	91 05       	cpc	r25, r1
    1b82:	38 f0       	brcs	.+14     	; 0x1b92 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1b8c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <delayMicroseconds+0x10>
    1b92:	08 95       	ret

00001b94 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1b94:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1b96:	84 b5       	in	r24, 0x24	; 36
    1b98:	82 60       	ori	r24, 0x02	; 2
    1b9a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1b9c:	84 b5       	in	r24, 0x24	; 36
    1b9e:	81 60       	ori	r24, 0x01	; 1
    1ba0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1ba2:	85 b5       	in	r24, 0x25	; 37
    1ba4:	82 60       	ori	r24, 0x02	; 2
    1ba6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1ba8:	85 b5       	in	r24, 0x25	; 37
    1baa:	81 60       	ori	r24, 0x01	; 1
    1bac:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1bae:	ee e6       	ldi	r30, 0x6E	; 110
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	81 60       	ori	r24, 0x01	; 1
    1bb6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1bb8:	e1 e8       	ldi	r30, 0x81	; 129
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1bbe:	80 81       	ld	r24, Z
    1bc0:	82 60       	ori	r24, 0x02	; 2
    1bc2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1bc4:	80 81       	ld	r24, Z
    1bc6:	81 60       	ori	r24, 0x01	; 1
    1bc8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1bca:	e0 e8       	ldi	r30, 0x80	; 128
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	81 60       	ori	r24, 0x01	; 1
    1bd2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1bd4:	e1 eb       	ldi	r30, 0xB1	; 177
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	84 60       	ori	r24, 0x04	; 4
    1bdc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1bde:	e0 eb       	ldi	r30, 0xB0	; 176
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	81 60       	ori	r24, 0x01	; 1
    1be6:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1be8:	e1 e9       	ldi	r30, 0x91	; 145
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	82 60       	ori	r24, 0x02	; 2
    1bf0:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1bf2:	80 81       	ld	r24, Z
    1bf4:	81 60       	ori	r24, 0x01	; 1
    1bf6:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1bf8:	e0 e9       	ldi	r30, 0x90	; 144
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	81 60       	ori	r24, 0x01	; 1
    1c00:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1c02:	e1 ea       	ldi	r30, 0xA1	; 161
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	82 60       	ori	r24, 0x02	; 2
    1c0a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1c0c:	80 81       	ld	r24, Z
    1c0e:	81 60       	ori	r24, 0x01	; 1
    1c10:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1c12:	e0 ea       	ldi	r30, 0xA0	; 160
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	81 60       	ori	r24, 0x01	; 1
    1c1a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1c1c:	e1 e2       	ldi	r30, 0x21	; 33
    1c1e:	f1 e0       	ldi	r31, 0x01	; 1
    1c20:	80 81       	ld	r24, Z
    1c22:	82 60       	ori	r24, 0x02	; 2
    1c24:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1c26:	80 81       	ld	r24, Z
    1c28:	81 60       	ori	r24, 0x01	; 1
    1c2a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1c2c:	e0 e2       	ldi	r30, 0x20	; 32
    1c2e:	f1 e0       	ldi	r31, 0x01	; 1
    1c30:	80 81       	ld	r24, Z
    1c32:	81 60       	ori	r24, 0x01	; 1
    1c34:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1c36:	ea e7       	ldi	r30, 0x7A	; 122
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	84 60       	ori	r24, 0x04	; 4
    1c3e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1c40:	80 81       	ld	r24, Z
    1c42:	82 60       	ori	r24, 0x02	; 2
    1c44:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1c46:	80 81       	ld	r24, Z
    1c48:	81 60       	ori	r24, 0x01	; 1
    1c4a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1c4c:	80 81       	ld	r24, Z
    1c4e:	80 68       	ori	r24, 0x80	; 128
    1c50:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1c52:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    1c56:	08 95       	ret

00001c58 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    1c58:	86 33       	cpi	r24, 0x36	; 54
    1c5a:	08 f0       	brcs	.+2      	; 0x1c5e <analogRead+0x6>
    1c5c:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    1c5e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
    1c62:	28 2f       	mov	r18, r24
    1c64:	28 70       	andi	r18, 0x08	; 8
    1c66:	97 7f       	andi	r25, 0xF7	; 247
    1c68:	92 2b       	or	r25, r18
    1c6a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1c6e:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <analog_reference>
    1c72:	90 e4       	ldi	r25, 0x40	; 64
    1c74:	29 9f       	mul	r18, r25
    1c76:	90 01       	movw	r18, r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	87 70       	andi	r24, 0x07	; 7
    1c7c:	82 2b       	or	r24, r18
    1c7e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1c82:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    1c86:	80 64       	ori	r24, 0x40	; 64
    1c88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1c8c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    1c90:	86 fd       	sbrc	r24, 6
    1c92:	fc cf       	rjmp	.-8      	; 0x1c8c <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1c94:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	high = ADCH;
    1c98:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
}
    1c9e:	92 2b       	or	r25, r18
    1ca0:	08 95       	ret

00001ca2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	31 97       	sbiw	r30, 0x01	; 1
    1ca8:	e2 31       	cpi	r30, 0x12	; 18
    1caa:	f1 05       	cpc	r31, r1
    1cac:	08 f0       	brcs	.+2      	; 0x1cb0 <turnOffPWM+0xe>
    1cae:	4d c0       	rjmp	.+154    	; 0x1d4a <turnOffPWM+0xa8>
    1cb0:	88 27       	eor	r24, r24
    1cb2:	e4 55       	subi	r30, 0x54	; 84
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb8:	06 c2       	rjmp	.+1036   	; 0x20c6 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1cba:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1cbe:	8f 77       	andi	r24, 0x7F	; 127
    1cc0:	03 c0       	rjmp	.+6      	; 0x1cc8 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1cc2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1cc6:	8f 7d       	andi	r24, 0xDF	; 223
    1cc8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1ccc:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1cce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1cd2:	87 7f       	andi	r24, 0xF7	; 247
    1cd4:	f9 cf       	rjmp	.-14     	; 0x1cc8 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1cd6:	84 b5       	in	r24, 0x24	; 36
    1cd8:	8f 77       	andi	r24, 0x7F	; 127
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1cdc:	84 b5       	in	r24, 0x24	; 36
    1cde:	8f 7d       	andi	r24, 0xDF	; 223
    1ce0:	84 bd       	out	0x24, r24	; 36
    1ce2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1ce4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1ce8:	8f 77       	andi	r24, 0x7F	; 127
    1cea:	03 c0       	rjmp	.+6      	; 0x1cf2 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1cec:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1cf0:	8f 7d       	andi	r24, 0xDF	; 223
    1cf2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1cf6:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1cf8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1cfc:	8f 77       	andi	r24, 0x7F	; 127
    1cfe:	07 c0       	rjmp	.+14     	; 0x1d0e <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1d00:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1d04:	8f 7d       	andi	r24, 0xDF	; 223
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1d08:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1d0c:	87 7f       	andi	r24, 0xF7	; 247
    1d0e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1d12:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1d14:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1d18:	8f 77       	andi	r24, 0x7F	; 127
    1d1a:	07 c0       	rjmp	.+14     	; 0x1d2a <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1d1c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1d20:	8f 7d       	andi	r24, 0xDF	; 223
    1d22:	03 c0       	rjmp	.+6      	; 0x1d2a <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1d24:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1d28:	87 7f       	andi	r24, 0xF7	; 247
    1d2a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1d2e:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1d30:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1d34:	8f 77       	andi	r24, 0x7F	; 127
    1d36:	07 c0       	rjmp	.+14     	; 0x1d46 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1d38:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1d3c:	8f 7d       	andi	r24, 0xDF	; 223
    1d3e:	03 c0       	rjmp	.+6      	; 0x1d46 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1d40:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1d44:	87 7f       	andi	r24, 0xF7	; 247
    1d46:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1d4a:	08 95       	ret

00001d4c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	fc 01       	movw	r30, r24
    1d54:	ee 53       	subi	r30, 0x3E	; 62
    1d56:	fe 4f       	sbci	r31, 0xFE	; 254
    1d58:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	e8 5f       	subi	r30, 0xF8	; 248
    1d5e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d60:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1d62:	88 23       	and	r24, r24
    1d64:	61 f1       	breq	.+88     	; 0x1dbe <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	ee 57       	subi	r30, 0x7E	; 126
    1d70:	fd 4f       	sbci	r31, 0xFD	; 253
    1d72:	c5 91       	lpm	r28, Z+
    1d74:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1d76:	fc 01       	movw	r30, r24
    1d78:	e8 59       	subi	r30, 0x98	; 152
    1d7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d7c:	a5 91       	lpm	r26, Z+
    1d7e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1d80:	61 11       	cpse	r22, r1
    1d82:	09 c0       	rjmp	.+18     	; 0x1d96 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1d84:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1d86:	f8 94       	cli
		*reg &= ~bit;
    1d88:	88 81       	ld	r24, Y
    1d8a:	20 95       	com	r18
    1d8c:	82 23       	and	r24, r18
    1d8e:	88 83       	st	Y, r24
		*out &= ~bit;
    1d90:	ec 91       	ld	r30, X
    1d92:	2e 23       	and	r18, r30
    1d94:	0b c0       	rjmp	.+22     	; 0x1dac <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1d96:	62 30       	cpi	r22, 0x02	; 2
    1d98:	61 f4       	brne	.+24     	; 0x1db2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1d9a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1d9c:	f8 94       	cli
		*reg &= ~bit;
    1d9e:	88 81       	ld	r24, Y
    1da0:	32 2f       	mov	r19, r18
    1da2:	30 95       	com	r19
    1da4:	83 23       	and	r24, r19
    1da6:	88 83       	st	Y, r24
		*out |= bit;
    1da8:	ec 91       	ld	r30, X
    1daa:	2e 2b       	or	r18, r30
    1dac:	2c 93       	st	X, r18
		SREG = oldSREG;
    1dae:	9f bf       	out	0x3f, r25	; 63
    1db0:	06 c0       	rjmp	.+12     	; 0x1dbe <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1db2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1db4:	f8 94       	cli
		*reg |= bit;
    1db6:	e8 81       	ld	r30, Y
    1db8:	2e 2b       	or	r18, r30
    1dba:	28 83       	st	Y, r18
		SREG = oldSREG;
    1dbc:	8f bf       	out	0x3f, r24	; 63
	}
}
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	08 95       	ret

00001dc4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1dc4:	1f 93       	push	r17
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	f9 01       	movw	r30, r18
    1dd0:	e4 58       	subi	r30, 0x84	; 132
    1dd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1dd6:	f9 01       	movw	r30, r18
    1dd8:	ee 53       	subi	r30, 0x3E	; 62
    1dda:	fe 4f       	sbci	r31, 0xFE	; 254
    1ddc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1dde:	f9 01       	movw	r30, r18
    1de0:	e8 5f       	subi	r30, 0xF8	; 248
    1de2:	fd 4f       	sbci	r31, 0xFD	; 253
    1de4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1de6:	cc 23       	and	r28, r28
    1de8:	b9 f0       	breq	.+46     	; 0x1e18 <digitalWrite+0x54>
    1dea:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1dec:	81 11       	cpse	r24, r1
    1dee:	59 df       	rcall	.-334    	; 0x1ca2 <turnOffPWM>

	out = portOutputRegister(port);
    1df0:	ec 2f       	mov	r30, r28
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	ee 0f       	add	r30, r30
    1df6:	ff 1f       	adc	r31, r31
    1df8:	e8 59       	subi	r30, 0x98	; 152
    1dfa:	fd 4f       	sbci	r31, 0xFD	; 253
    1dfc:	a5 91       	lpm	r26, Z+
    1dfe:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1e00:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1e02:	f8 94       	cli

	if (val == LOW) {
    1e04:	11 11       	cpse	r17, r1
    1e06:	04 c0       	rjmp	.+8      	; 0x1e10 <digitalWrite+0x4c>
		*out &= ~bit;
    1e08:	8c 91       	ld	r24, X
    1e0a:	d0 95       	com	r29
    1e0c:	d8 23       	and	r29, r24
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <digitalWrite+0x50>
	} else {
		*out |= bit;
    1e10:	ec 91       	ld	r30, X
    1e12:	de 2b       	or	r29, r30
    1e14:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1e16:	9f bf       	out	0x3f, r25	; 63
}
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	08 95       	ret

00001e20 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	f9 01       	movw	r30, r18
    1e2a:	e4 58       	subi	r30, 0x84	; 132
    1e2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1e30:	f9 01       	movw	r30, r18
    1e32:	ee 53       	subi	r30, 0x3E	; 62
    1e34:	fe 4f       	sbci	r31, 0xFE	; 254
    1e36:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1e38:	f9 01       	movw	r30, r18
    1e3a:	e8 5f       	subi	r30, 0xF8	; 248
    1e3c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e3e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1e40:	cc 23       	and	r28, r28
    1e42:	89 f0       	breq	.+34     	; 0x1e66 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1e44:	81 11       	cpse	r24, r1
    1e46:	2d df       	rcall	.-422    	; 0x1ca2 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1e48:	ec 2f       	mov	r30, r28
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	ee 0f       	add	r30, r30
    1e4e:	ff 1f       	adc	r31, r31
    1e50:	e2 5b       	subi	r30, 0xB2	; 178
    1e52:	fd 4f       	sbci	r31, 0xFD	; 253
    1e54:	a5 91       	lpm	r26, Z+
    1e56:	b4 91       	lpm	r27, Z
    1e58:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1e5a:	ed 23       	and	r30, r29
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	21 f4       	brne	.+8      	; 0x1e6a <digitalRead+0x4a>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <digitalRead+0x4a>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	08 95       	ret

00001e70 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1e70:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1e72:	91 8d       	ldd	r25, Z+25	; 0x19
    1e74:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e76:	89 2f       	mov	r24, r25
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	80 5c       	subi	r24, 0xC0	; 192
    1e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7e:	82 1b       	sub	r24, r18
    1e80:	91 09       	sbc	r25, r1
}
    1e82:	8f 73       	andi	r24, 0x3F	; 63
    1e84:	99 27       	eor	r25, r25
    1e86:	08 95       	ret

00001e88 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1e88:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1e8a:	91 8d       	ldd	r25, Z+25	; 0x19
    1e8c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e8e:	98 17       	cp	r25, r24
    1e90:	31 f0       	breq	.+12     	; 0x1e9e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1e92:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e94:	e8 0f       	add	r30, r24
    1e96:	f1 1d       	adc	r31, r1
    1e98:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1e9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ea0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1ea2:	08 95       	ret

00001ea4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1ea4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1ea6:	91 8d       	ldd	r25, Z+25	; 0x19
    1ea8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1eaa:	98 17       	cp	r25, r24
    1eac:	61 f0       	breq	.+24     	; 0x1ec6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1eae:	82 8d       	ldd	r24, Z+26	; 0x1a
    1eb0:	df 01       	movw	r26, r30
    1eb2:	a8 0f       	add	r26, r24
    1eb4:	b1 1d       	adc	r27, r1
    1eb6:	5d 96       	adiw	r26, 0x1d	; 29
    1eb8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1eba:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ebc:	9f 5f       	subi	r25, 0xFF	; 255
    1ebe:	9f 73       	andi	r25, 0x3F	; 63
    1ec0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1ec6:	8f ef       	ldi	r24, 0xFF	; 255
    1ec8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1eca:	08 95       	ret

00001ecc <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1ecc:	fc 01       	movw	r30, r24
    1ece:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1ed0:	44 8d       	ldd	r20, Z+28	; 0x1c
    1ed2:	25 2f       	mov	r18, r21
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	84 2f       	mov	r24, r20
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1eda:	82 1b       	sub	r24, r18
    1edc:	93 0b       	sbc	r25, r19
    1ede:	54 17       	cp	r21, r20
    1ee0:	10 f0       	brcs	.+4      	; 0x1ee6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1ee2:	cf 96       	adiw	r24, 0x3f	; 63
    1ee4:	08 95       	ret
  return tail - head - 1;
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
}
    1ee8:	08 95       	ret

00001eea <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1eea:	84 e0       	ldi	r24, 0x04	; 4
    1eec:	9c e0       	ldi	r25, 0x0C	; 12
    1eee:	89 2b       	or	r24, r25
    1ef0:	39 f0       	breq	.+14     	; 0x1f00 <_Z14serialEventRunv+0x16>
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	89 2b       	or	r24, r25
    1ef8:	19 f0       	breq	.+6      	; 0x1f00 <_Z14serialEventRunv+0x16>
    1efa:	86 dc       	rcall	.-1780   	; 0x1808 <_Z17Serial0_availablev>
    1efc:	81 11       	cpse	r24, r1
    1efe:	25 c0       	rjmp	.+74     	; 0x1f4a <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	89 2b       	or	r24, r25
    1f06:	41 f0       	breq	.+16     	; 0x1f18 <_Z14serialEventRunv+0x2e>
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	89 2b       	or	r24, r25
    1f0e:	21 f0       	breq	.+8      	; 0x1f18 <_Z14serialEventRunv+0x2e>
    1f10:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1f14:	81 11       	cpse	r24, r1
    1f16:	1c c0       	rjmp	.+56     	; 0x1f50 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	89 2b       	or	r24, r25
    1f1e:	41 f0       	breq	.+16     	; 0x1f30 <_Z14serialEventRunv+0x46>
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	89 2b       	or	r24, r25
    1f26:	21 f0       	breq	.+8      	; 0x1f30 <_Z14serialEventRunv+0x46>
    1f28:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	13 c0       	rjmp	.+38     	; 0x1f56 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	89 2b       	or	r24, r25
    1f36:	a1 f0       	breq	.+40     	; 0x1f60 <_Z14serialEventRunv+0x76>
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	89 2b       	or	r24, r25
    1f3e:	81 f0       	breq	.+32     	; 0x1f60 <_Z14serialEventRunv+0x76>
    1f40:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1f44:	81 11       	cpse	r24, r1
    1f46:	0a c0       	rjmp	.+20     	; 0x1f5c <_Z14serialEventRunv+0x72>
    1f48:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1f4a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1f4e:	d8 cf       	rjmp	.-80     	; 0x1f00 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1f50:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1f54:	e1 cf       	rjmp	.-62     	; 0x1f18 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1f56:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1f5a:	ea cf       	rjmp	.-44     	; 0x1f30 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1f5c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1f60:	08 95       	ret

00001f62 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1f62:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1f64:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f66:	df 01       	movw	r26, r30
    1f68:	a8 0f       	add	r26, r24
    1f6a:	b1 1d       	adc	r27, r1
    1f6c:	a3 5a       	subi	r26, 0xA3	; 163
    1f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f70:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1f72:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	01 96       	adiw	r24, 0x01	; 1
    1f78:	8f 73       	andi	r24, 0x3F	; 63
    1f7a:	99 27       	eor	r25, r25
    1f7c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1f7e:	a6 89       	ldd	r26, Z+22	; 0x16
    1f80:	b7 89       	ldd	r27, Z+23	; 0x17
    1f82:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1f84:	a0 89       	ldd	r26, Z+16	; 0x10
    1f86:	b1 89       	ldd	r27, Z+17	; 0x11
    1f88:	8c 91       	ld	r24, X
    1f8a:	83 70       	andi	r24, 0x03	; 3
    1f8c:	80 64       	ori	r24, 0x40	; 64
    1f8e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1f90:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f92:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f94:	98 13       	cpse	r25, r24
    1f96:	06 c0       	rjmp	.+12     	; 0x1fa4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1f98:	02 88       	ldd	r0, Z+18	; 0x12
    1f9a:	f3 89       	ldd	r31, Z+19	; 0x13
    1f9c:	e0 2d       	mov	r30, r0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8f 7d       	andi	r24, 0xDF	; 223
    1fa2:	80 83       	st	Z, r24
    1fa4:	08 95       	ret

00001fa6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1fa6:	ef 92       	push	r14
    1fa8:	ff 92       	push	r15
    1faa:	0f 93       	push	r16
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	ec 01       	movw	r28, r24
  _written = true;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1fb8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fbc:	98 13       	cpse	r25, r24
    1fbe:	05 c0       	rjmp	.+10     	; 0x1fca <_ZN14HardwareSerial5writeEh+0x24>
    1fc0:	e8 89       	ldd	r30, Y+16	; 0x10
    1fc2:	f9 89       	ldd	r31, Y+17	; 0x11
    1fc4:	80 81       	ld	r24, Z
    1fc6:	85 fd       	sbrc	r24, 5
    1fc8:	25 c0       	rjmp	.+74     	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    1fca:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1fcc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1fce:	10 e0       	ldi	r17, 0x00	; 0
    1fd0:	0f 5f       	subi	r16, 0xFF	; 255
    1fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd4:	0f 73       	andi	r16, 0x3F	; 63
    1fd6:	11 27       	eor	r17, r17
    1fd8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1fda:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fdc:	e8 12       	cpse	r14, r24
    1fde:	0b c0       	rjmp	.+22     	; 0x1ff6 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	07 fc       	sbrc	r0, 7
    1fe4:	fa cf       	rjmp	.-12     	; 0x1fda <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1fe6:	e8 89       	ldd	r30, Y+16	; 0x10
    1fe8:	f9 89       	ldd	r31, Y+17	; 0x11
    1fea:	80 81       	ld	r24, Z
    1fec:	85 ff       	sbrs	r24, 5
    1fee:	f5 cf       	rjmp	.-22     	; 0x1fda <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	b7 df       	rcall	.-146    	; 0x1f62 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1ff4:	f2 cf       	rjmp	.-28     	; 0x1fda <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e8 0f       	add	r30, r24
    1ffc:	f1 1d       	adc	r31, r1
    1ffe:	e3 5a       	subi	r30, 0xA3	; 163
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2004:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2006:	f8 94       	cli
    _tx_buffer_head = i;
    2008:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    200a:	ea 89       	ldd	r30, Y+18	; 0x12
    200c:	fb 89       	ldd	r31, Y+19	; 0x13
    200e:	80 81       	ld	r24, Z
    2010:	80 62       	ori	r24, 0x20	; 32
    2012:	0a c0       	rjmp	.+20     	; 0x2028 <__DATA_REGION_LENGTH__+0x28>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2014:	9f b7       	in	r25, 0x3f	; 63
    2016:	f8 94       	cli
      *_udr = c;
    2018:	ee 89       	ldd	r30, Y+22	; 0x16
    201a:	ff 89       	ldd	r31, Y+23	; 0x17
    201c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    201e:	e8 89       	ldd	r30, Y+16	; 0x10
    2020:	f9 89       	ldd	r31, Y+17	; 0x11
    2022:	80 81       	ld	r24, Z
    2024:	83 70       	andi	r24, 0x03	; 3
    2026:	80 64       	ori	r24, 0x40	; 64
    2028:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    202a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	1f 91       	pop	r17
    2036:	0f 91       	pop	r16
    2038:	ff 90       	pop	r15
    203a:	ef 90       	pop	r14
    203c:	08 95       	ret

0000203e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
    2042:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2044:	88 8d       	ldd	r24, Y+24	; 0x18
    2046:	88 23       	and	r24, r24
    2048:	c1 f0       	breq	.+48     	; 0x207a <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    204a:	ea 89       	ldd	r30, Y+18	; 0x12
    204c:	fb 89       	ldd	r31, Y+19	; 0x13
    204e:	80 81       	ld	r24, Z
    2050:	85 fd       	sbrc	r24, 5
    2052:	05 c0       	rjmp	.+10     	; 0x205e <_ZN14HardwareSerial5flushEv+0x20>
    2054:	a8 89       	ldd	r26, Y+16	; 0x10
    2056:	b9 89       	ldd	r27, Y+17	; 0x11
    2058:	8c 91       	ld	r24, X
    205a:	86 fd       	sbrc	r24, 6
    205c:	0e c0       	rjmp	.+28     	; 0x207a <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	07 fc       	sbrc	r0, 7
    2062:	f5 cf       	rjmp	.-22     	; 0x204e <_ZN14HardwareSerial5flushEv+0x10>
    2064:	80 81       	ld	r24, Z
    2066:	85 ff       	sbrs	r24, 5
    2068:	f2 cf       	rjmp	.-28     	; 0x204e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    206a:	a8 89       	ldd	r26, Y+16	; 0x10
    206c:	b9 89       	ldd	r27, Y+17	; 0x11
    206e:	8c 91       	ld	r24, X
    2070:	85 ff       	sbrs	r24, 5
    2072:	ed cf       	rjmp	.-38     	; 0x204e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2074:	ce 01       	movw	r24, r28
    2076:	75 df       	rcall	.-278    	; 0x1f62 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2078:	e8 cf       	rjmp	.-48     	; 0x204a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	08 95       	ret

00002080 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2080:	08 95       	ret

00002082 <__udivmodsi4>:
    2082:	a1 e2       	ldi	r26, 0x21	; 33
    2084:	1a 2e       	mov	r1, r26
    2086:	aa 1b       	sub	r26, r26
    2088:	bb 1b       	sub	r27, r27
    208a:	fd 01       	movw	r30, r26
    208c:	0d c0       	rjmp	.+26     	; 0x20a8 <__udivmodsi4_ep>

0000208e <__udivmodsi4_loop>:
    208e:	aa 1f       	adc	r26, r26
    2090:	bb 1f       	adc	r27, r27
    2092:	ee 1f       	adc	r30, r30
    2094:	ff 1f       	adc	r31, r31
    2096:	a2 17       	cp	r26, r18
    2098:	b3 07       	cpc	r27, r19
    209a:	e4 07       	cpc	r30, r20
    209c:	f5 07       	cpc	r31, r21
    209e:	20 f0       	brcs	.+8      	; 0x20a8 <__udivmodsi4_ep>
    20a0:	a2 1b       	sub	r26, r18
    20a2:	b3 0b       	sbc	r27, r19
    20a4:	e4 0b       	sbc	r30, r20
    20a6:	f5 0b       	sbc	r31, r21

000020a8 <__udivmodsi4_ep>:
    20a8:	66 1f       	adc	r22, r22
    20aa:	77 1f       	adc	r23, r23
    20ac:	88 1f       	adc	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	1a 94       	dec	r1
    20b2:	69 f7       	brne	.-38     	; 0x208e <__udivmodsi4_loop>
    20b4:	60 95       	com	r22
    20b6:	70 95       	com	r23
    20b8:	80 95       	com	r24
    20ba:	90 95       	com	r25
    20bc:	9b 01       	movw	r18, r22
    20be:	ac 01       	movw	r20, r24
    20c0:	bd 01       	movw	r22, r26
    20c2:	cf 01       	movw	r24, r30
    20c4:	08 95       	ret

000020c6 <__tablejump2__>:
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	88 1f       	adc	r24, r24
    20cc:	8b bf       	out	0x3b, r24	; 59
    20ce:	07 90       	elpm	r0, Z+
    20d0:	f6 91       	elpm	r31, Z
    20d2:	e0 2d       	mov	r30, r0
    20d4:	19 94       	eijmp

000020d6 <_exit>:
    20d6:	f8 94       	cli

000020d8 <__stop_program>:
    20d8:	ff cf       	rjmp	.-2      	; 0x20d8 <__stop_program>
