
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800200  000013a0  00001434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b7  008002fa  008002fa  0000152e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000152e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000550  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cab7  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002dce  00000000  00000000  0000e5a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032ee  00000000  00000000  00011375  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001150  00000000  00000000  00014664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003124  00000000  00000000  000157b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006223  00000000  00000000  000188d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000628  00000000  00000000  0001eafb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	15 c1       	rjmp	.+554    	; 0x22c <__ctors_end>
       2:	00 00       	nop
       4:	43 c1       	rjmp	.+646    	; 0x28c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c1       	rjmp	.+642    	; 0x28c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c1       	rjmp	.+638    	; 0x28c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c1       	rjmp	.+634    	; 0x28c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c1       	rjmp	.+630    	; 0x28c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c1       	rjmp	.+626    	; 0x28c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c1       	rjmp	.+622    	; 0x28c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c1       	rjmp	.+618    	; 0x28c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c1       	rjmp	.+614    	; 0x28c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c1       	rjmp	.+610    	; 0x28c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c1       	rjmp	.+606    	; 0x28c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c1       	rjmp	.+602    	; 0x28c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c1       	rjmp	.+598    	; 0x28c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c1       	rjmp	.+594    	; 0x28c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c1       	rjmp	.+590    	; 0x28c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c1       	rjmp	.+586    	; 0x28c <__bad_interrupt>
      42:	00 00       	nop
      44:	c8 c4       	rjmp	.+2448   	; 0x9d6 <__vector_17>
      46:	00 00       	nop
      48:	21 c1       	rjmp	.+578    	; 0x28c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c1       	rjmp	.+574    	; 0x28c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c1       	rjmp	.+570    	; 0x28c <__bad_interrupt>
      52:	00 00       	nop
      54:	1b c1       	rjmp	.+566    	; 0x28c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c1       	rjmp	.+562    	; 0x28c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cf c6       	rjmp	.+3486   	; 0xdfc <__vector_23>
      5e:	00 00       	nop
      60:	15 c1       	rjmp	.+554    	; 0x28c <__bad_interrupt>
      62:	00 00       	nop
      64:	68 c5       	rjmp	.+2768   	; 0xb36 <__vector_25>
      66:	00 00       	nop
      68:	9c c5       	rjmp	.+2872   	; 0xba2 <__vector_26>
      6a:	00 00       	nop
      6c:	0f c1       	rjmp	.+542    	; 0x28c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0d c1       	rjmp	.+538    	; 0x28c <__bad_interrupt>
      72:	00 00       	nop
      74:	0b c1       	rjmp	.+534    	; 0x28c <__bad_interrupt>
      76:	00 00       	nop
      78:	09 c1       	rjmp	.+530    	; 0x28c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	07 c1       	rjmp	.+526    	; 0x28c <__bad_interrupt>
      7e:	00 00       	nop
      80:	d6 c4       	rjmp	.+2476   	; 0xa2e <__vector_32>
      82:	00 00       	nop
      84:	03 c1       	rjmp	.+518    	; 0x28c <__bad_interrupt>
      86:	00 00       	nop
      88:	01 c1       	rjmp	.+514    	; 0x28c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ff c0       	rjmp	.+510    	; 0x28c <__bad_interrupt>
      8e:	00 00       	nop
      90:	fd c0       	rjmp	.+506    	; 0x28c <__bad_interrupt>
      92:	00 00       	nop
      94:	fb c0       	rjmp	.+502    	; 0x28c <__bad_interrupt>
      96:	00 00       	nop
      98:	f9 c0       	rjmp	.+498    	; 0x28c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f7 c0       	rjmp	.+494    	; 0x28c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f5 c0       	rjmp	.+490    	; 0x28c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f3 c0       	rjmp	.+486    	; 0x28c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ee c4       	rjmp	.+2524   	; 0xa86 <__vector_42>
      aa:	00 00       	nop
      ac:	ef c0       	rjmp	.+478    	; 0x28c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ed c0       	rjmp	.+474    	; 0x28c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	eb c0       	rjmp	.+470    	; 0x28c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e9 c0       	rjmp	.+466    	; 0x28c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	10 c5       	rjmp	.+2592   	; 0xade <__vector_47>
      be:	00 00       	nop
      c0:	e5 c0       	rjmp	.+458    	; 0x28c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e3 c0       	rjmp	.+454    	; 0x28c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e1 c0       	rjmp	.+450    	; 0x28c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	df c0       	rjmp	.+446    	; 0x28c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	dd c0       	rjmp	.+442    	; 0x28c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	db c0       	rjmp	.+438    	; 0x28c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d9 c0       	rjmp	.+434    	; 0x28c <__bad_interrupt>
      da:	00 00       	nop
      dc:	d7 c0       	rjmp	.+430    	; 0x28c <__bad_interrupt>
      de:	00 00       	nop
      e0:	d5 c0       	rjmp	.+426    	; 0x28c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	cf 07       	cpc	r28, r31
      e6:	d2 07       	cpc	r29, r18
      e8:	c1 07       	cpc	r28, r17
      ea:	c5 07       	cpc	r28, r21
      ec:	cb 07       	cpc	r28, r27
      ee:	09 08       	sbc	r0, r9
      f0:	d6 07       	cpc	r29, r22
      f2:	da 07       	cpc	r29, r26
      f4:	e0 07       	cpc	r30, r16
      f6:	e4 07       	cpc	r30, r20
      f8:	e8 07       	cpc	r30, r24
      fa:	ee 07       	cpc	r30, r30
      fc:	f2 07       	cpc	r31, r18
      fe:	f6 07       	cpc	r31, r22
     100:	09 08       	sbc	r0, r9
     102:	fc 07       	cpc	r31, r28
     104:	00 08       	sbc	r0, r0
     106:	04 08       	sbc	r0, r4

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	39 02       	muls	r19, r25
     22a:	03 06       	cpc	r0, r19

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	d1 e2       	ldi	r29, 0x21	; 33
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0c bf       	out	0x3c, r16	; 60

0000023c <__do_copy_data>:
     23c:	12 e0       	ldi	r17, 0x02	; 2
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b2 e0       	ldi	r27, 0x02	; 2
     242:	e0 ea       	ldi	r30, 0xA0	; 160
     244:	f3 e1       	ldi	r31, 0x13	; 19
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	aa 3f       	cpi	r26, 0xFA	; 250
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	24 e0       	ldi	r18, 0x04	; 4
     258:	aa ef       	ldi	r26, 0xFA	; 250
     25a:	b2 e0       	ldi	r27, 0x02	; 2
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a1 3b       	cpi	r26, 0xB1	; 177
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>

00000266 <__do_global_ctors>:
     266:	11 e0       	ldi	r17, 0x01	; 1
     268:	c6 e1       	ldi	r28, 0x16	; 22
     26a:	d1 e0       	ldi	r29, 0x01	; 1
     26c:	00 e0       	ldi	r16, 0x00	; 0
     26e:	06 c0       	rjmp	.+12     	; 0x27c <__do_global_ctors+0x16>
     270:	21 97       	sbiw	r28, 0x01	; 1
     272:	01 09       	sbc	r16, r1
     274:	80 2f       	mov	r24, r16
     276:	fe 01       	movw	r30, r28
     278:	0e 94 c6 09 	call	0x138c	; 0x138c <__tablejump2__>
     27c:	c4 31       	cpi	r28, 0x14	; 20
     27e:	d1 07       	cpc	r29, r17
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	08 07       	cpc	r16, r24
     284:	a9 f7       	brne	.-22     	; 0x270 <__do_global_ctors+0xa>
     286:	ed d4       	rcall	.+2522   	; 0xc62 <main>
     288:	0c 94 ce 09 	jmp	0x139c	; 0x139c <_exit>

0000028c <__bad_interrupt>:
     28c:	b9 ce       	rjmp	.-654    	; 0x0 <__vectors>

0000028e <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     28e:	61 15       	cp	r22, r1
     290:	71 05       	cpc	r23, r1
     292:	79 f0       	breq	.+30     	; 0x2b2 <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
     294:	fb 01       	movw	r30, r22
     296:	01 90       	ld	r0, Z+
     298:	00 20       	and	r0, r0
     29a:	e9 f7       	brne	.-6      	; 0x296 <_ZN5Print5writeEPKc+0x8>
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	af 01       	movw	r20, r30
     2a0:	46 1b       	sub	r20, r22
     2a2:	57 0b       	sbc	r21, r23
     2a4:	dc 01       	movw	r26, r24
     2a6:	ed 91       	ld	r30, X+
     2a8:	fc 91       	ld	r31, X
     2aa:	02 80       	ldd	r0, Z+2	; 0x02
     2ac:	f3 81       	ldd	r31, Z+3	; 0x03
     2ae:	e0 2d       	mov	r30, r0
     2b0:	19 94       	eijmp
    }
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	08 95       	ret

000002b8 <_Z13lcdMenuLoaderi>:
#include "MenuControl.h"

void lcdMenuLoader(int menuStage = 0)
{
	switch (menuStage)
     2b8:	82 30       	cpi	r24, 0x02	; 2
     2ba:	91 05       	cpc	r25, r1
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <_Z13lcdMenuLoaderi+0x8>
     2be:	4f c0       	rjmp	.+158    	; 0x35e <_Z13lcdMenuLoaderi+0xa6>
     2c0:	0c f5       	brge	.+66     	; 0x304 <_Z13lcdMenuLoaderi+0x4c>
     2c2:	00 97       	sbiw	r24, 0x00	; 0
     2c4:	81 f1       	breq	.+96     	; 0x326 <_Z13lcdMenuLoaderi+0x6e>
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	09 f0       	breq	.+2      	; 0x2cc <_Z13lcdMenuLoaderi+0x14>
     2ca:	b5 c0       	rjmp	.+362    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		break;
		
		#pragma region Heat Menus
		//Heat menu
		case 1:
		lcd.setCursor(0, 0);
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	8e e5       	ldi	r24, 0x5E	; 94
     2d2:	93 e0       	ldi	r25, 0x03	; 3
     2d4:	f0 d1       	rcall	.+992    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.write("A<Fan");
     2d6:	6b e3       	ldi	r22, 0x3B	; 59
     2d8:	72 e0       	ldi	r23, 0x02	; 2
     2da:	8e e5       	ldi	r24, 0x5E	; 94
     2dc:	93 e0       	ldi	r25, 0x03	; 3
     2de:	d7 df       	rcall	.-82     	; 0x28e <_ZN5Print5writeEPKc>
		lcd.setCursor(9 ,0);
     2e0:	40 e0       	ldi	r20, 0x00	; 0
     2e2:	69 e0       	ldi	r22, 0x09	; 9
     2e4:	8e e5       	ldi	r24, 0x5E	; 94
     2e6:	93 e0       	ldi	r25, 0x03	; 3
     2e8:	e6 d1       	rcall	.+972    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.write("Temps>B");
     2ea:	61 e4       	ldi	r22, 0x41	; 65
     2ec:	72 e0       	ldi	r23, 0x02	; 2
     2ee:	8e e5       	ldi	r24, 0x5E	; 94
     2f0:	93 e0       	ldi	r25, 0x03	; 3
     2f2:	cd df       	rcall	.-102    	; 0x28e <_ZN5Print5writeEPKc>
		lcd.setCursor(0, 1);
     2f4:	41 e0       	ldi	r20, 0x01	; 1
     2f6:	60 e0       	ldi	r22, 0x00	; 0
     2f8:	8e e5       	ldi	r24, 0x5E	; 94
     2fa:	93 e0       	ldi	r25, 0x03	; 3
     2fc:	dc d1       	rcall	.+952    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.write("C<Windows");
     2fe:	69 e4       	ldi	r22, 0x49	; 73
     300:	72 e0       	ldi	r23, 0x02	; 2
     302:	aa c0       	rjmp	.+340    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
#include "MenuControl.h"

void lcdMenuLoader(int menuStage = 0)
{
	switch (menuStage)
     304:	84 30       	cpi	r24, 0x04	; 4
     306:	91 05       	cpc	r25, r1
     308:	09 f4       	brne	.+2      	; 0x30c <_Z13lcdMenuLoaderi+0x54>
     30a:	61 c0       	rjmp	.+194    	; 0x3ce <_Z13lcdMenuLoaderi+0x116>
     30c:	0c f4       	brge	.+2      	; 0x310 <_Z13lcdMenuLoaderi+0x58>
     30e:	43 c0       	rjmp	.+134    	; 0x396 <_Z13lcdMenuLoaderi+0xde>
     310:	05 97       	sbiw	r24, 0x05	; 5
     312:	09 f0       	breq	.+2      	; 0x316 <_Z13lcdMenuLoaderi+0x5e>
		
		#pragma endregion
		
		#pragma region Temperature Menus
		case 5:
		lcd.setCursor(0, 0);
     314:	90 c0       	rjmp	.+288    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	8e e5       	ldi	r24, 0x5E	; 94
     31c:	93 e0       	ldi	r25, 0x03	; 3
     31e:	cb d1       	rcall	.+918    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.write("");
     320:	60 ed       	ldi	r22, 0xD0	; 208
     322:	72 e0       	ldi	r23, 0x02	; 2
{
	switch (menuStage)
	{
		//Main menu
		case 0:
		lcd.setCursor(0, 0);
     324:	99 c0       	rjmp	.+306    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	8e e5       	ldi	r24, 0x5E	; 94
     32c:	93 e0       	ldi	r25, 0x03	; 3
		lcd.write("<>Chose Option<>");
     32e:	c3 d1       	rcall	.+902    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
     330:	6a e1       	ldi	r22, 0x1A	; 26
     332:	72 e0       	ldi	r23, 0x02	; 2
     334:	8e e5       	ldi	r24, 0x5E	; 94
     336:	93 e0       	ldi	r25, 0x03	; 3
		lcd.setCursor(0, 1);
     338:	aa df       	rcall	.-172    	; 0x28e <_ZN5Print5writeEPKc>
     33a:	41 e0       	ldi	r20, 0x01	; 1
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	8e e5       	ldi	r24, 0x5E	; 94
     340:	93 e0       	ldi	r25, 0x03	; 3
		lcd.write("A<Heat");
     342:	b9 d1       	rcall	.+882    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
     344:	6b e2       	ldi	r22, 0x2B	; 43
     346:	72 e0       	ldi	r23, 0x02	; 2
     348:	8e e5       	ldi	r24, 0x5E	; 94
     34a:	93 e0       	ldi	r25, 0x03	; 3
		lcd.setCursor(8, 1);
     34c:	a0 df       	rcall	.-192    	; 0x28e <_ZN5Print5writeEPKc>
     34e:	41 e0       	ldi	r20, 0x01	; 1
     350:	68 e0       	ldi	r22, 0x08	; 8
     352:	8e e5       	ldi	r24, 0x5E	; 94
     354:	93 e0       	ldi	r25, 0x03	; 3
		lcd.write("Lights>B");
     356:	af d1       	rcall	.+862    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
     358:	62 e3       	ldi	r22, 0x32	; 50
		break;
		
		#pragma region Fan Controls Menus
		//Fan Control menu if Auto Mode is on
		case 2:
		lcd.setCursor(0, 0);
     35a:	72 e0       	ldi	r23, 0x02	; 2
     35c:	7d c0       	rjmp	.+250    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     35e:	40 e0       	ldi	r20, 0x00	; 0
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	8e e5       	ldi	r24, 0x5E	; 94
		lcd.write("Auto Mode is on!");
     364:	93 e0       	ldi	r25, 0x03	; 3
     366:	a7 d1       	rcall	.+846    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
     368:	63 e5       	ldi	r22, 0x53	; 83
     36a:	72 e0       	ldi	r23, 0x02	; 2
     36c:	8e e5       	ldi	r24, 0x5E	; 94
		lcd.setCursor(0, 1);
     36e:	93 e0       	ldi	r25, 0x03	; 3
     370:	8e df       	rcall	.-228    	; 0x28e <_ZN5Print5writeEPKc>
     372:	41 e0       	ldi	r20, 0x01	; 1
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	8e e5       	ldi	r24, 0x5E	; 94
		lcd.write("A<T.Off");
     378:	93 e0       	ldi	r25, 0x03	; 3
     37a:	9d d1       	rcall	.+826    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
     37c:	64 e6       	ldi	r22, 0x64	; 100
     37e:	72 e0       	ldi	r23, 0x02	; 2
     380:	8e e5       	ldi	r24, 0x5E	; 94
		lcd.setCursor(10, 1);
     382:	93 e0       	ldi	r25, 0x03	; 3
     384:	84 df       	rcall	.-248    	; 0x28e <_ZN5Print5writeEPKc>
     386:	41 e0       	ldi	r20, 0x01	; 1
     388:	6a e0       	ldi	r22, 0x0A	; 10
     38a:	8e e5       	ldi	r24, 0x5E	; 94
		lcd.write("Back>B");
     38c:	93 e0       	ldi	r25, 0x03	; 3
     38e:	93 d1       	rcall	.+806    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
		break;
		
		//Fan Control menu if Auto Mode is off
		case 3:
		lcd.setCursor(0, 0);
     390:	6c e6       	ldi	r22, 0x6C	; 108
     392:	72 e0       	ldi	r23, 0x02	; 2
     394:	61 c0       	rjmp	.+194    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	60 e0       	ldi	r22, 0x00	; 0
		lcd.write("<>Fan Controls<>");
     39a:	8e e5       	ldi	r24, 0x5E	; 94
     39c:	93 e0       	ldi	r25, 0x03	; 3
     39e:	8b d1       	rcall	.+790    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
     3a0:	63 e7       	ldi	r22, 0x73	; 115
     3a2:	72 e0       	ldi	r23, 0x02	; 2
		lcd.setCursor(0, 1);
     3a4:	8e e5       	ldi	r24, 0x5E	; 94
     3a6:	93 e0       	ldi	r25, 0x03	; 3
     3a8:	72 df       	rcall	.-284    	; 0x28e <_ZN5Print5writeEPKc>
     3aa:	41 e0       	ldi	r20, 0x01	; 1
     3ac:	60 e0       	ldi	r22, 0x00	; 0
		lcd.write("A<T.Auto");
     3ae:	8e e5       	ldi	r24, 0x5E	; 94
     3b0:	93 e0       	ldi	r25, 0x03	; 3
     3b2:	81 d1       	rcall	.+770    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
     3b4:	64 e8       	ldi	r22, 0x84	; 132
     3b6:	72 e0       	ldi	r23, 0x02	; 2
		lcd.setCursor(9, 1);
     3b8:	8e e5       	ldi	r24, 0x5E	; 94
     3ba:	93 e0       	ldi	r25, 0x03	; 3
     3bc:	68 df       	rcall	.-304    	; 0x28e <_ZN5Print5writeEPKc>
     3be:	41 e0       	ldi	r20, 0x01	; 1
     3c0:	69 e0       	ldi	r22, 0x09	; 9
     3c2:	8e e5       	ldi	r24, 0x5E	; 94
		lcd.write("Speed>B");
     3c4:	93 e0       	ldi	r25, 0x03	; 3
     3c6:	77 d1       	rcall	.+750    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
		break;
		
		//Fan Speed Control menu
		case 4:
		lcd.setCursor(0, 0);
     3c8:	6d e8       	ldi	r22, 0x8D	; 141
     3ca:	72 e0       	ldi	r23, 0x02	; 2
     3cc:	45 c0       	rjmp	.+138    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	60 e0       	ldi	r22, 0x00	; 0
		lcd.write("Speed:"); lcd.print(currentFanSpeed); lcd.write("%");
     3d2:	8e e5       	ldi	r24, 0x5E	; 94
     3d4:	93 e0       	ldi	r25, 0x03	; 3
     3d6:	6f d1       	rcall	.+734    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
     3d8:	65 e9       	ldi	r22, 0x95	; 149
     3da:	72 e0       	ldi	r23, 0x02	; 2
     3dc:	8e e5       	ldi	r24, 0x5E	; 94
     3de:	93 e0       	ldi	r25, 0x03	; 3
     3e0:	56 df       	rcall	.-340    	; 0x28e <_ZN5Print5writeEPKc>
     3e2:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <currentFanSpeed>
     3e6:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <currentFanSpeed+0x1>
     3ea:	4a e0       	ldi	r20, 0x0A	; 10
     3ec:	50 e0       	ldi	r21, 0x00	; 0
     3ee:	8e e5       	ldi	r24, 0x5E	; 94
     3f0:	93 e0       	ldi	r25, 0x03	; 3
     3f2:	fe d4       	rcall	.+2556   	; 0xdf0 <_ZN5Print5printEii>
     3f4:	6c e9       	ldi	r22, 0x9C	; 156
		lcd.setCursor(10, 0);
     3f6:	72 e0       	ldi	r23, 0x02	; 2
     3f8:	8e e5       	ldi	r24, 0x5E	; 94
     3fa:	93 e0       	ldi	r25, 0x03	; 3
     3fc:	48 df       	rcall	.-368    	; 0x28e <_ZN5Print5writeEPKc>
     3fe:	40 e0       	ldi	r20, 0x00	; 0
     400:	6a e0       	ldi	r22, 0x0A	; 10
		lcd.write("Done>A");
     402:	8e e5       	ldi	r24, 0x5E	; 94
     404:	93 e0       	ldi	r25, 0x03	; 3
     406:	57 d1       	rcall	.+686    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
     408:	6e e9       	ldi	r22, 0x9E	; 158
     40a:	72 e0       	ldi	r23, 0x02	; 2
		lcd.setCursor(0, 1);
     40c:	8e e5       	ldi	r24, 0x5E	; 94
     40e:	93 e0       	ldi	r25, 0x03	; 3
     410:	3e df       	rcall	.-388    	; 0x28e <_ZN5Print5writeEPKc>
     412:	41 e0       	ldi	r20, 0x01	; 1
     414:	60 e0       	ldi	r22, 0x00	; 0
		lcd.write("B<Dec.");
     416:	8e e5       	ldi	r24, 0x5E	; 94
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	4d d1       	rcall	.+666    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
     41c:	65 ea       	ldi	r22, 0xA5	; 165
     41e:	72 e0       	ldi	r23, 0x02	; 2
		lcd.setCursor(10, 1);
     420:	8e e5       	ldi	r24, 0x5E	; 94
     422:	93 e0       	ldi	r25, 0x03	; 3
     424:	34 df       	rcall	.-408    	; 0x28e <_ZN5Print5writeEPKc>
     426:	41 e0       	ldi	r20, 0x01	; 1
     428:	6a e0       	ldi	r22, 0x0A	; 10
     42a:	8e e5       	ldi	r24, 0x5E	; 94
		lcd.write("Inc.>C");
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	43 d1       	rcall	.+646    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
     430:	6c ea       	ldi	r22, 0xAC	; 172
		
		#pragma endregion
		
		//Error menu
		default:
		lcd.setCursor(0, 0);
     432:	72 e0       	ldi	r23, 0x02	; 2
     434:	11 c0       	rjmp	.+34     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	8e e5       	ldi	r24, 0x5E	; 94
     43c:	93 e0       	ldi	r25, 0x03	; 3
		lcd.write("Unknown Stage!");
     43e:	3b d1       	rcall	.+630    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
     440:	63 eb       	ldi	r22, 0xB3	; 179
     442:	72 e0       	ldi	r23, 0x02	; 2
     444:	8e e5       	ldi	r24, 0x5E	; 94
     446:	93 e0       	ldi	r25, 0x03	; 3
     448:	22 df       	rcall	.-444    	; 0x28e <_ZN5Print5writeEPKc>
		lcd.setCursor(0, 1);
     44a:	41 e0       	ldi	r20, 0x01	; 1
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	8e e5       	ldi	r24, 0x5E	; 94
     450:	93 e0       	ldi	r25, 0x03	; 3
     452:	31 d1       	rcall	.+610    	; 0x6b6 <_ZN13LiquidCrystal9setCursorEhh>
     454:	62 ec       	ldi	r22, 0xC2	; 194
		lcd.write("Try \"Reset\"!!!");
     456:	72 e0       	ldi	r23, 0x02	; 2
     458:	8e e5       	ldi	r24, 0x5E	; 94
     45a:	93 e0       	ldi	r25, 0x03	; 3
     45c:	18 cf       	rjmp	.-464    	; 0x28e <_ZN5Print5writeEPKc>

0000045e <setup>:
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	42 e0       	ldi	r20, 0x02	; 2
	return potentiometerValue / 4;
}

void setup() 
{
	lcd.begin(16, 2);
     462:	60 e1       	ldi	r22, 0x10	; 16
     464:	8e e5       	ldi	r24, 0x5E	; 94
     466:	93 e0       	ldi	r25, 0x03	; 3
     468:	3f d1       	rcall	.+638    	; 0x6e8 <_ZN13LiquidCrystal5beginEhhh>
	lcdMenuLoader(4);
     46a:	84 e0       	ldi	r24, 0x04	; 4
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	24 cf       	rjmp	.-440    	; 0x2b8 <_Z13lcdMenuLoaderi>

00000470 <loop>:
}

void loop() 
{
     470:	08 95       	ret

00000472 <_GLOBAL__sub_I_motorPin>:
	
}
     472:	cf 92       	push	r12
     474:	ef 92       	push	r14
     476:	0f 93       	push	r16

#pragma region LCD setup
//LCD is connected to these pins
const int rs = 8, en = 9, d4 = 10, d5 = 11, d6 = 12, d7 = 13;

LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
     478:	8d e0       	ldi	r24, 0x0D	; 13
     47a:	c8 2e       	mov	r12, r24
     47c:	9c e0       	ldi	r25, 0x0C	; 12
     47e:	e9 2e       	mov	r14, r25
     480:	0b e0       	ldi	r16, 0x0B	; 11
     482:	2a e0       	ldi	r18, 0x0A	; 10
     484:	49 e0       	ldi	r20, 0x09	; 9
     486:	68 e0       	ldi	r22, 0x08	; 8
     488:	8e e5       	ldi	r24, 0x5E	; 94
     48a:	93 e0       	ldi	r25, 0x03	; 3
     48c:	ba d1       	rcall	.+884    	; 0x802 <_ZN13LiquidCrystalC1Ehhhhhh>
// Connected keypad ROW0, ROW1, ROW2 and ROW3 to these pins.
byte rowPins[Rows] = {29, 28, 27, 26};
// Connected keypad COL0, COL1 and COL2 to these pins.
byte colPins[Cols] = {25, 24, 23, 22};
	
Keypad kpd = Keypad(makeKeymap(Keys), rowPins, colPins, Rows, Cols);
     48e:	24 e0       	ldi	r18, 0x04	; 4
     490:	e2 2e       	mov	r14, r18
     492:	04 e0       	ldi	r16, 0x04	; 4
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	32 e0       	ldi	r19, 0x02	; 2
     498:	44 e0       	ldi	r20, 0x04	; 4
     49a:	52 e0       	ldi	r21, 0x02	; 2
     49c:	68 e0       	ldi	r22, 0x08	; 8
     49e:	72 e0       	ldi	r23, 0x02	; 2
     4a0:	8a ef       	ldi	r24, 0xFA	; 250
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	11 d0       	rcall	.+34     	; 0x4c8 <_ZN6KeypadC1EPcPhS1_hh>
}

void loop() 
{
	
}
     4a6:	0f 91       	pop	r16
     4a8:	ef 90       	pop	r14
     4aa:	cf 90       	pop	r12
     4ac:	08 95       	ret

000004ae <_ZN3KeyC1Ev>:
*/
#include <Key.h>


// default constructor
Key::Key() {
     4ae:	fc 01       	movw	r30, r24
	kchar = NO_KEY;
     4b0:	10 82       	st	Z, r1
	kstate = IDLE;
     4b2:	13 82       	std	Z+3, r1	; 0x03
	stateChanged = false;
     4b4:	14 82       	std	Z+4, r1	; 0x04
     4b6:	08 95       	ret

000004b8 <_ZN6Keypad8pin_readEh>:

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
	virtual void pin_write(byte pinNum, boolean level) { digitalWrite(pinNum, level); }
	virtual int  pin_read(byte pinNum) { return digitalRead(pinNum); }
     4b8:	86 2f       	mov	r24, r22
     4ba:	16 c6       	rjmp	.+3116   	; 0x10e8 <digitalRead>

000004bc <_ZN6Keypad9pin_writeEhb>:
public:

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
	virtual void pin_write(byte pinNum, boolean level) { digitalWrite(pinNum, level); }
     4bc:	86 2f       	mov	r24, r22
     4be:	64 2f       	mov	r22, r20
     4c0:	e5 c5       	rjmp	.+3018   	; 0x108c <digitalWrite>

000004c2 <_ZN6Keypad8pin_modeEhh>:
class Keypad : public Key {
public:

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
     4c2:	86 2f       	mov	r24, r22
     4c4:	64 2f       	mov	r22, r20
     4c6:	a6 c5       	rjmp	.+2892   	; 0x1014 <pinMode>

000004c8 <_ZN6KeypadC1EPcPhS1_hh>:
||
*/
#include <Keypad.h>

// <<constructor>> Allows custom keymap, pin configuration, and keypad sizes.
Keypad::Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols) {
     4c8:	4f 92       	push	r4
     4ca:	5f 92       	push	r5
     4cc:	6f 92       	push	r6
     4ce:	7f 92       	push	r7
     4d0:	8f 92       	push	r8
     4d2:	9f 92       	push	r9
     4d4:	af 92       	push	r10
     4d6:	bf 92       	push	r11
     4d8:	cf 92       	push	r12
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	0f 93       	push	r16
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	ec 01       	movw	r28, r24
     4e6:	6b 01       	movw	r12, r22
     4e8:	4a 01       	movw	r8, r20
     4ea:	59 01       	movw	r10, r18
     4ec:	02 96       	adiw	r24, 0x02	; 2
     4ee:	df df       	rcall	.-66     	; 0x4ae <_ZN3KeyC1Ev>
     4f0:	85 ed       	ldi	r24, 0xD5	; 213
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	99 83       	std	Y+1, r25	; 0x01
     4f6:	88 83       	st	Y, r24
     4f8:	2e 01       	movw	r4, r28
     4fa:	8b e1       	ldi	r24, 0x1B	; 27
     4fc:	48 0e       	add	r4, r24
     4fe:	51 1c       	adc	r5, r1
     500:	3e 01       	movw	r6, r28
     502:	8d e4       	ldi	r24, 0x4D	; 77
     504:	68 0e       	add	r6, r24
     506:	71 1c       	adc	r7, r1
     508:	c2 01       	movw	r24, r4
     50a:	d1 df       	rcall	.-94     	; 0x4ae <_ZN3KeyC1Ev>
     50c:	85 e0       	ldi	r24, 0x05	; 5
     50e:	48 0e       	add	r4, r24
     510:	51 1c       	adc	r5, r1
     512:	46 14       	cp	r4, r6
     514:	57 04       	cpc	r5, r7
     516:	c1 f7       	brne	.-16     	; 0x508 <_ZN6KeypadC1EPcPhS1_hh+0x40>
	rowPins = row;
     518:	fe 01       	movw	r30, r28
     51a:	e9 5a       	subi	r30, 0xA9	; 169
     51c:	ff 4f       	sbci	r31, 0xFF	; 255
     51e:	91 82       	std	Z+1, r9	; 0x01
     520:	80 82       	st	Z, r8
	columnPins = col;
     522:	32 96       	adiw	r30, 0x02	; 2
     524:	b1 82       	std	Z+1, r11	; 0x01
     526:	a0 82       	st	Z, r10
	sizeKpd.rows = numRows;
     528:	32 96       	adiw	r30, 0x02	; 2
     52a:	00 83       	st	Z, r16
	sizeKpd.columns = numCols;
     52c:	31 96       	adiw	r30, 0x01	; 1
     52e:	e0 82       	st	Z, r14
	single_key = false;
}

// Let the user define a keymap - assume the same row/column count as defined in constructor
void Keypad::begin(char *userKeymap) {
    keymap = userKeymap;
     530:	37 97       	sbiw	r30, 0x07	; 7
     532:	d1 82       	std	Z+1, r13	; 0x01
     534:	c0 82       	st	Z, r12
	return sizeof(key)/sizeof(Key);
}

// Minimum debounceTime is 1 mS. Any lower *will* slow down the loop().
void Keypad::setDebounceTime(uint debounce) {
	debounce<1 ? debounceTime=1 : debounceTime=debounce;
     536:	38 96       	adiw	r30, 0x08	; 8
     538:	8a e0       	ldi	r24, 0x0A	; 10
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
}

void Keypad::setHoldTime(uint hold) {
    holdTime = hold;
     540:	32 96       	adiw	r30, 0x02	; 2
     542:	84 ef       	ldi	r24, 0xF4	; 244
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	91 83       	std	Z+1, r25	; 0x01
     548:	80 83       	st	Z, r24

	begin(userKeymap);

	setDebounceTime(10);
	setHoldTime(500);
	keypadEventListener = 0;
     54a:	33 96       	adiw	r30, 0x03	; 3
     54c:	11 82       	std	Z+1, r1	; 0x01
     54e:	10 82       	st	Z, r1

	startTime = 0;
     550:	71 97       	sbiw	r30, 0x11	; 17
     552:	10 82       	st	Z, r1
     554:	11 82       	std	Z+1, r1	; 0x01
     556:	12 82       	std	Z+2, r1	; 0x02
     558:	13 82       	std	Z+3, r1	; 0x03
	single_key = false;
     55a:	cf 59       	subi	r28, 0x9F	; 159
     55c:	df 4f       	sbci	r29, 0xFF	; 255
     55e:	18 82       	st	Y, r1
}
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	0f 91       	pop	r16
     566:	ef 90       	pop	r14
     568:	df 90       	pop	r13
     56a:	cf 90       	pop	r12
     56c:	bf 90       	pop	r11
     56e:	af 90       	pop	r10
     570:	9f 90       	pop	r9
     572:	8f 90       	pop	r8
     574:	7f 90       	pop	r7
     576:	6f 90       	pop	r6
     578:	5f 90       	pop	r5
     57a:	4f 90       	pop	r4
     57c:	08 95       	ret

0000057e <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	08 95       	ret

00000584 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     584:	08 95       	ret

00000586 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	ec 01       	movw	r28, r24
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	8e 81       	ldd	r24, Y+6	; 0x06
     590:	7d d5       	rcall	.+2810   	; 0x108c <digitalWrite>
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	7c d4       	rcall	.+2296   	; 0xe90 <delayMicroseconds>
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	8e 81       	ldd	r24, Y+6	; 0x06
     59c:	77 d5       	rcall	.+2798   	; 0x108c <digitalWrite>
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	76 d4       	rcall	.+2284   	; 0xe90 <delayMicroseconds>
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	8e 81       	ldd	r24, Y+6	; 0x06
     5a8:	71 d5       	rcall	.+2786   	; 0x108c <digitalWrite>
     5aa:	84 e6       	ldi	r24, 0x64	; 100
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	6e c4       	rjmp	.+2268   	; 0xe90 <delayMicroseconds>

000005b4 <_ZN13LiquidCrystal10write4bitsEh>:
     5b4:	cf 92       	push	r12
     5b6:	df 92       	push	r13
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	6c 01       	movw	r12, r24
     5c6:	7c 01       	movw	r14, r24
     5c8:	87 e0       	ldi	r24, 0x07	; 7
     5ca:	e8 0e       	add	r14, r24
     5cc:	f1 1c       	adc	r15, r1
     5ce:	c0 e0       	ldi	r28, 0x00	; 0
     5d0:	d0 e0       	ldi	r29, 0x00	; 0
     5d2:	06 2f       	mov	r16, r22
     5d4:	10 e0       	ldi	r17, 0x00	; 0
     5d6:	b8 01       	movw	r22, r16
     5d8:	0c 2e       	mov	r0, r28
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     5dc:	75 95       	asr	r23
     5de:	67 95       	ror	r22
     5e0:	0a 94       	dec	r0
     5e2:	e2 f7       	brpl	.-8      	; 0x5dc <_ZN13LiquidCrystal10write4bitsEh+0x28>
     5e4:	61 70       	andi	r22, 0x01	; 1
     5e6:	f7 01       	movw	r30, r14
     5e8:	81 91       	ld	r24, Z+
     5ea:	7f 01       	movw	r14, r30
     5ec:	4f d5       	rcall	.+2718   	; 0x108c <digitalWrite>
     5ee:	21 96       	adiw	r28, 0x01	; 1
     5f0:	c4 30       	cpi	r28, 0x04	; 4
     5f2:	d1 05       	cpc	r29, r1
     5f4:	81 f7       	brne	.-32     	; 0x5d6 <_ZN13LiquidCrystal10write4bitsEh+0x22>
     5f6:	c6 01       	movw	r24, r12
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	cf 90       	pop	r12
     608:	be cf       	rjmp	.-132    	; 0x586 <_ZN13LiquidCrystal11pulseEnableEv>

0000060a <_ZN13LiquidCrystal10write8bitsEh>:
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	6c 01       	movw	r12, r24
     61c:	7c 01       	movw	r14, r24
     61e:	87 e0       	ldi	r24, 0x07	; 7
     620:	e8 0e       	add	r14, r24
     622:	f1 1c       	adc	r15, r1
     624:	c0 e0       	ldi	r28, 0x00	; 0
     626:	d0 e0       	ldi	r29, 0x00	; 0
     628:	06 2f       	mov	r16, r22
     62a:	10 e0       	ldi	r17, 0x00	; 0
     62c:	b8 01       	movw	r22, r16
     62e:	0c 2e       	mov	r0, r28
     630:	02 c0       	rjmp	.+4      	; 0x636 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     632:	75 95       	asr	r23
     634:	67 95       	ror	r22
     636:	0a 94       	dec	r0
     638:	e2 f7       	brpl	.-8      	; 0x632 <_ZN13LiquidCrystal10write8bitsEh+0x28>
     63a:	61 70       	andi	r22, 0x01	; 1
     63c:	f7 01       	movw	r30, r14
     63e:	81 91       	ld	r24, Z+
     640:	7f 01       	movw	r14, r30
     642:	24 d5       	rcall	.+2632   	; 0x108c <digitalWrite>
     644:	21 96       	adiw	r28, 0x01	; 1
     646:	c8 30       	cpi	r28, 0x08	; 8
     648:	d1 05       	cpc	r29, r1
     64a:	81 f7       	brne	.-32     	; 0x62c <_ZN13LiquidCrystal10write8bitsEh+0x22>
     64c:	c6 01       	movw	r24, r12
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
     656:	ff 90       	pop	r15
     658:	ef 90       	pop	r14
     65a:	df 90       	pop	r13
     65c:	cf 90       	pop	r12
     65e:	93 cf       	rjmp	.-218    	; 0x586 <_ZN13LiquidCrystal11pulseEnableEv>

00000660 <_ZN13LiquidCrystal4sendEhh>:
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	ec 01       	movw	r28, r24
     668:	16 2f       	mov	r17, r22
     66a:	64 2f       	mov	r22, r20
     66c:	8c 81       	ldd	r24, Y+4	; 0x04
     66e:	0e d5       	rcall	.+2588   	; 0x108c <digitalWrite>
     670:	8d 81       	ldd	r24, Y+5	; 0x05
     672:	8f 3f       	cpi	r24, 0xFF	; 255
     674:	11 f0       	breq	.+4      	; 0x67a <_ZN13LiquidCrystal4sendEhh+0x1a>
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	09 d5       	rcall	.+2578   	; 0x108c <digitalWrite>
     67a:	8f 85       	ldd	r24, Y+15	; 0x0f
     67c:	61 2f       	mov	r22, r17
     67e:	84 ff       	sbrs	r24, 4
     680:	05 c0       	rjmp	.+10     	; 0x68c <_ZN13LiquidCrystal4sendEhh+0x2c>
     682:	ce 01       	movw	r24, r28
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	bf cf       	rjmp	.-130    	; 0x60a <_ZN13LiquidCrystal10write8bitsEh>
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	84 e0       	ldi	r24, 0x04	; 4
     690:	75 95       	asr	r23
     692:	67 95       	ror	r22
     694:	8a 95       	dec	r24
     696:	e1 f7       	brne	.-8      	; 0x690 <_ZN13LiquidCrystal4sendEhh+0x30>
     698:	ce 01       	movw	r24, r28
     69a:	8c df       	rcall	.-232    	; 0x5b4 <_ZN13LiquidCrystal10write4bitsEh>
     69c:	61 2f       	mov	r22, r17
     69e:	ce 01       	movw	r24, r28
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	86 cf       	rjmp	.-244    	; 0x5b4 <_ZN13LiquidCrystal10write4bitsEh>

000006a8 <_ZN13LiquidCrystal7commandEh>:
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	da cf       	rjmp	.-76     	; 0x660 <_ZN13LiquidCrystal4sendEhh>

000006ac <_ZN13LiquidCrystal5clearEv>:
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	fc df       	rcall	.-8      	; 0x6a8 <_ZN13LiquidCrystal7commandEh>
     6b0:	80 ed       	ldi	r24, 0xD0	; 208
     6b2:	97 e0       	ldi	r25, 0x07	; 7
     6b4:	ed c3       	rjmp	.+2010   	; 0xe90 <delayMicroseconds>

000006b6 <_ZN13LiquidCrystal9setCursorEhh>:
     6b6:	fc 01       	movw	r30, r24
     6b8:	44 30       	cpi	r20, 0x04	; 4
     6ba:	08 f0       	brcs	.+2      	; 0x6be <_ZN13LiquidCrystal9setCursorEhh+0x8>
     6bc:	43 e0       	ldi	r20, 0x03	; 3
     6be:	83 89       	ldd	r24, Z+19	; 0x13
     6c0:	48 17       	cp	r20, r24
     6c2:	10 f0       	brcs	.+4      	; 0x6c8 <_ZN13LiquidCrystal9setCursorEhh+0x12>
     6c4:	4f ef       	ldi	r20, 0xFF	; 255
     6c6:	48 0f       	add	r20, r24
     6c8:	df 01       	movw	r26, r30
     6ca:	a4 0f       	add	r26, r20
     6cc:	b1 1d       	adc	r27, r1
     6ce:	54 96       	adiw	r26, 0x14	; 20
     6d0:	9c 91       	ld	r25, X
     6d2:	69 0f       	add	r22, r25
     6d4:	60 68       	ori	r22, 0x80	; 128
     6d6:	cf 01       	movw	r24, r30
     6d8:	e7 cf       	rjmp	.-50     	; 0x6a8 <_ZN13LiquidCrystal7commandEh>

000006da <_ZN13LiquidCrystal7displayEv>:
     6da:	fc 01       	movw	r30, r24
     6dc:	60 89       	ldd	r22, Z+16	; 0x10
     6de:	26 2f       	mov	r18, r22
     6e0:	24 60       	ori	r18, 0x04	; 4
     6e2:	20 8b       	std	Z+16, r18	; 0x10
     6e4:	6c 60       	ori	r22, 0x0C	; 12
     6e6:	e0 cf       	rjmp	.-64     	; 0x6a8 <_ZN13LiquidCrystal7commandEh>

000006e8 <_ZN13LiquidCrystal5beginEhhh>:
     6e8:	ef 92       	push	r14
     6ea:	ff 92       	push	r15
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	ec 01       	movw	r28, r24
     6f6:	42 30       	cpi	r20, 0x02	; 2
     6f8:	18 f0       	brcs	.+6      	; 0x700 <_ZN13LiquidCrystal5beginEhhh+0x18>
     6fa:	8f 85       	ldd	r24, Y+15	; 0x0f
     6fc:	88 60       	ori	r24, 0x08	; 8
     6fe:	8f 87       	std	Y+15, r24	; 0x0f
     700:	4b 8b       	std	Y+19, r20	; 0x13
     702:	1c 8a       	std	Y+20, r1	; 0x14
     704:	80 e4       	ldi	r24, 0x40	; 64
     706:	8d 8b       	std	Y+21, r24	; 0x15
     708:	6e 8b       	std	Y+22, r22	; 0x16
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	60 5c       	subi	r22, 0xC0	; 192
     70e:	7f 4f       	sbci	r23, 0xFF	; 255
     710:	6f 8b       	std	Y+23, r22	; 0x17
     712:	22 23       	and	r18, r18
     714:	29 f0       	breq	.+10     	; 0x720 <_ZN13LiquidCrystal5beginEhhh+0x38>
     716:	41 30       	cpi	r20, 0x01	; 1
     718:	19 f4       	brne	.+6      	; 0x720 <_ZN13LiquidCrystal5beginEhhh+0x38>
     71a:	8f 85       	ldd	r24, Y+15	; 0x0f
     71c:	84 60       	ori	r24, 0x04	; 4
     71e:	8f 87       	std	Y+15, r24	; 0x0f
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	8c 81       	ldd	r24, Y+4	; 0x04
     724:	77 d4       	rcall	.+2286   	; 0x1014 <pinMode>
     726:	8d 81       	ldd	r24, Y+5	; 0x05
     728:	8f 3f       	cpi	r24, 0xFF	; 255
     72a:	11 f0       	breq	.+4      	; 0x730 <_ZN13LiquidCrystal5beginEhhh+0x48>
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	72 d4       	rcall	.+2276   	; 0x1014 <pinMode>
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	8e 81       	ldd	r24, Y+6	; 0x06
     734:	6f d4       	rcall	.+2270   	; 0x1014 <pinMode>
     736:	7e 01       	movw	r14, r28
     738:	87 e0       	ldi	r24, 0x07	; 7
     73a:	e8 0e       	add	r14, r24
     73c:	f1 1c       	adc	r15, r1
     73e:	00 e0       	ldi	r16, 0x00	; 0
     740:	10 e0       	ldi	r17, 0x00	; 0
     742:	8f 85       	ldd	r24, Y+15	; 0x0f
     744:	84 fd       	sbrc	r24, 4
     746:	03 c0       	rjmp	.+6      	; 0x74e <_ZN13LiquidCrystal5beginEhhh+0x66>
     748:	84 e0       	ldi	r24, 0x04	; 4
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	02 c0       	rjmp	.+4      	; 0x752 <_ZN13LiquidCrystal5beginEhhh+0x6a>
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	08 17       	cp	r16, r24
     754:	19 07       	cpc	r17, r25
     756:	44 f4       	brge	.+16     	; 0x768 <_ZN13LiquidCrystal5beginEhhh+0x80>
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	f7 01       	movw	r30, r14
     75c:	81 91       	ld	r24, Z+
     75e:	7f 01       	movw	r14, r30
     760:	59 d4       	rcall	.+2226   	; 0x1014 <pinMode>
     762:	0f 5f       	subi	r16, 0xFF	; 255
     764:	1f 4f       	sbci	r17, 0xFF	; 255
     766:	ed cf       	rjmp	.-38     	; 0x742 <_ZN13LiquidCrystal5beginEhhh+0x5a>
     768:	80 e5       	ldi	r24, 0x50	; 80
     76a:	93 ec       	ldi	r25, 0xC3	; 195
     76c:	91 d3       	rcall	.+1826   	; 0xe90 <delayMicroseconds>
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	8c 81       	ldd	r24, Y+4	; 0x04
     772:	8c d4       	rcall	.+2328   	; 0x108c <digitalWrite>
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	8e 81       	ldd	r24, Y+6	; 0x06
     778:	89 d4       	rcall	.+2322   	; 0x108c <digitalWrite>
     77a:	8d 81       	ldd	r24, Y+5	; 0x05
     77c:	8f 3f       	cpi	r24, 0xFF	; 255
     77e:	11 f0       	breq	.+4      	; 0x784 <_ZN13LiquidCrystal5beginEhhh+0x9c>
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	84 d4       	rcall	.+2312   	; 0x108c <digitalWrite>
     784:	6f 85       	ldd	r22, Y+15	; 0x0f
     786:	64 fd       	sbrc	r22, 4
     788:	16 c0       	rjmp	.+44     	; 0x7b6 <_ZN13LiquidCrystal5beginEhhh+0xce>
     78a:	63 e0       	ldi	r22, 0x03	; 3
     78c:	ce 01       	movw	r24, r28
     78e:	12 df       	rcall	.-476    	; 0x5b4 <_ZN13LiquidCrystal10write4bitsEh>
     790:	84 e9       	ldi	r24, 0x94	; 148
     792:	91 e1       	ldi	r25, 0x11	; 17
     794:	7d d3       	rcall	.+1786   	; 0xe90 <delayMicroseconds>
     796:	63 e0       	ldi	r22, 0x03	; 3
     798:	ce 01       	movw	r24, r28
     79a:	0c df       	rcall	.-488    	; 0x5b4 <_ZN13LiquidCrystal10write4bitsEh>
     79c:	84 e9       	ldi	r24, 0x94	; 148
     79e:	91 e1       	ldi	r25, 0x11	; 17
     7a0:	77 d3       	rcall	.+1774   	; 0xe90 <delayMicroseconds>
     7a2:	63 e0       	ldi	r22, 0x03	; 3
     7a4:	ce 01       	movw	r24, r28
     7a6:	06 df       	rcall	.-500    	; 0x5b4 <_ZN13LiquidCrystal10write4bitsEh>
     7a8:	86 e9       	ldi	r24, 0x96	; 150
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	71 d3       	rcall	.+1762   	; 0xe90 <delayMicroseconds>
     7ae:	62 e0       	ldi	r22, 0x02	; 2
     7b0:	ce 01       	movw	r24, r28
     7b2:	00 df       	rcall	.-512    	; 0x5b4 <_ZN13LiquidCrystal10write4bitsEh>
     7b4:	11 c0       	rjmp	.+34     	; 0x7d8 <_ZN13LiquidCrystal5beginEhhh+0xf0>
     7b6:	60 62       	ori	r22, 0x20	; 32
     7b8:	ce 01       	movw	r24, r28
     7ba:	76 df       	rcall	.-276    	; 0x6a8 <_ZN13LiquidCrystal7commandEh>
     7bc:	84 e9       	ldi	r24, 0x94	; 148
     7be:	91 e1       	ldi	r25, 0x11	; 17
     7c0:	67 d3       	rcall	.+1742   	; 0xe90 <delayMicroseconds>
     7c2:	6f 85       	ldd	r22, Y+15	; 0x0f
     7c4:	60 62       	ori	r22, 0x20	; 32
     7c6:	ce 01       	movw	r24, r28
     7c8:	6f df       	rcall	.-290    	; 0x6a8 <_ZN13LiquidCrystal7commandEh>
     7ca:	86 e9       	ldi	r24, 0x96	; 150
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	60 d3       	rcall	.+1728   	; 0xe90 <delayMicroseconds>
     7d0:	6f 85       	ldd	r22, Y+15	; 0x0f
     7d2:	60 62       	ori	r22, 0x20	; 32
     7d4:	ce 01       	movw	r24, r28
     7d6:	68 df       	rcall	.-304    	; 0x6a8 <_ZN13LiquidCrystal7commandEh>
     7d8:	6f 85       	ldd	r22, Y+15	; 0x0f
     7da:	60 62       	ori	r22, 0x20	; 32
     7dc:	ce 01       	movw	r24, r28
     7de:	64 df       	rcall	.-312    	; 0x6a8 <_ZN13LiquidCrystal7commandEh>
     7e0:	84 e0       	ldi	r24, 0x04	; 4
     7e2:	88 8b       	std	Y+16, r24	; 0x10
     7e4:	ce 01       	movw	r24, r28
     7e6:	79 df       	rcall	.-270    	; 0x6da <_ZN13LiquidCrystal7displayEv>
     7e8:	ce 01       	movw	r24, r28
     7ea:	60 df       	rcall	.-320    	; 0x6ac <_ZN13LiquidCrystal5clearEv>
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	89 8b       	std	Y+17, r24	; 0x11
     7f0:	66 e0       	ldi	r22, 0x06	; 6
     7f2:	ce 01       	movw	r24, r28
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	53 cf       	rjmp	.-346    	; 0x6a8 <_ZN13LiquidCrystal7commandEh>

00000802 <_ZN13LiquidCrystalC1Ehhhhhh>:
     802:	cf 92       	push	r12
     804:	ef 92       	push	r14
     806:	0f 93       	push	r16
     808:	fc 01       	movw	r30, r24
     80a:	13 82       	std	Z+3, r1	; 0x03
     80c:	12 82       	std	Z+2, r1	; 0x02
     80e:	8f ed       	ldi	r24, 0xDF	; 223
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	91 83       	std	Z+1, r25	; 0x01
     814:	80 83       	st	Z, r24
     816:	64 83       	std	Z+4, r22	; 0x04
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	85 83       	std	Z+5, r24	; 0x05
     81c:	46 83       	std	Z+6, r20	; 0x06
     81e:	27 83       	std	Z+7, r18	; 0x07
     820:	00 87       	std	Z+8, r16	; 0x08
     822:	e1 86       	std	Z+9, r14	; 0x09
     824:	c2 86       	std	Z+10, r12	; 0x0a
     826:	13 86       	std	Z+11, r1	; 0x0b
     828:	14 86       	std	Z+12, r1	; 0x0c
     82a:	15 86       	std	Z+13, r1	; 0x0d
     82c:	16 86       	std	Z+14, r1	; 0x0e
     82e:	17 86       	std	Z+15, r1	; 0x0f
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	41 e0       	ldi	r20, 0x01	; 1
     834:	60 e1       	ldi	r22, 0x10	; 16
     836:	cf 01       	movw	r24, r30
     838:	0f 91       	pop	r16
     83a:	ef 90       	pop	r14
     83c:	cf 90       	pop	r12
     83e:	54 cf       	rjmp	.-344    	; 0x6e8 <_ZN13LiquidCrystal5beginEhhh>

00000840 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     840:	41 e0       	ldi	r20, 0x01	; 1
     842:	0e df       	rcall	.-484    	; 0x660 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	08 95       	ret

0000084a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
#define SERVO_MAX() (MAX_PULSE_WIDTH - this->max * 4)  // maximum value in uS for this servo

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	7b 01       	movw	r14, r22
     85c:	6a 01       	movw	r12, r20
  if( Channel[timer] < 0 )
     85e:	08 2f       	mov	r16, r24
     860:	10 e0       	ldi	r17, 0x00	; 0
     862:	e8 01       	movw	r28, r16
     864:	c9 58       	subi	r28, 0x89	; 137
     866:	dc 4f       	sbci	r29, 0xFC	; 252
     868:	88 81       	ld	r24, Y
     86a:	87 ff       	sbrs	r24, 7
     86c:	04 c0       	rjmp	.+8      	; 0x876 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
     86e:	fb 01       	movw	r30, r22
     870:	11 82       	std	Z+1, r1	; 0x01
     872:	10 82       	st	Z, r1
     874:	24 c0       	rjmp	.+72     	; 0x8be <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
     876:	8c e0       	ldi	r24, 0x0C	; 12
     878:	80 9f       	mul	r24, r16
     87a:	90 01       	movw	r18, r0
     87c:	81 9f       	mul	r24, r17
     87e:	30 0d       	add	r19, r0
     880:	11 24       	eor	r1, r1
     882:	88 81       	ld	r24, Y
     884:	a9 01       	movw	r20, r18
     886:	48 0f       	add	r20, r24
     888:	51 1d       	adc	r21, r1
     88a:	87 fd       	sbrc	r24, 7
     88c:	5a 95       	dec	r21
     88e:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <ServoCount>
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	48 17       	cp	r20, r24
     896:	59 07       	cpc	r21, r25
     898:	94 f4       	brge	.+36     	; 0x8be <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
     89a:	88 81       	ld	r24, Y
     89c:	a9 01       	movw	r20, r18
     89e:	48 0f       	add	r20, r24
     8a0:	51 1d       	adc	r21, r1
     8a2:	87 fd       	sbrc	r24, 7
     8a4:	5a 95       	dec	r21
     8a6:	ca 01       	movw	r24, r20
     8a8:	fa 01       	movw	r30, r20
     8aa:	ee 0f       	add	r30, r30
     8ac:	ff 1f       	adc	r31, r31
     8ae:	8e 0f       	add	r24, r30
     8b0:	9f 1f       	adc	r25, r31
     8b2:	fc 01       	movw	r30, r24
     8b4:	e5 58       	subi	r30, 0x85	; 133
     8b6:	fc 4f       	sbci	r31, 0xFC	; 252
     8b8:	80 81       	ld	r24, Z
     8ba:	86 fd       	sbrc	r24, 6
     8bc:	19 c0       	rjmp	.+50     	; 0x8f0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xa6>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
     8be:	88 81       	ld	r24, Y
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	88 83       	st	Y, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     8c4:	8c e0       	ldi	r24, 0x0C	; 12
     8c6:	80 9f       	mul	r24, r16
     8c8:	90 01       	movw	r18, r0
     8ca:	81 9f       	mul	r24, r17
     8cc:	30 0d       	add	r19, r0
     8ce:	11 24       	eor	r1, r1
     8d0:	88 81       	ld	r24, Y
     8d2:	a9 01       	movw	r20, r18
     8d4:	48 0f       	add	r20, r24
     8d6:	51 1d       	adc	r21, r1
     8d8:	87 fd       	sbrc	r24, 7
     8da:	5a 95       	dec	r21
     8dc:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <ServoCount>
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	48 17       	cp	r20, r24
     8e4:	59 07       	cpc	r21, r25
     8e6:	b4 f4       	brge	.+44     	; 0x914 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xca>
     8e8:	88 81       	ld	r24, Y
     8ea:	8c 30       	cpi	r24, 0x0C	; 12
     8ec:	3c f1       	brlt	.+78     	; 0x93c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xf2>
     8ee:	12 c0       	rjmp	.+36     	; 0x914 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xca>
{
  if( Channel[timer] < 0 )
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
     8f0:	88 81       	ld	r24, Y
     8f2:	28 0f       	add	r18, r24
     8f4:	31 1d       	adc	r19, r1
     8f6:	87 fd       	sbrc	r24, 7
     8f8:	3a 95       	dec	r19
     8fa:	f9 01       	movw	r30, r18
     8fc:	ee 0f       	add	r30, r30
     8fe:	ff 1f       	adc	r31, r31
     900:	2e 0f       	add	r18, r30
     902:	3f 1f       	adc	r19, r31
     904:	f9 01       	movw	r30, r18
     906:	e5 58       	subi	r30, 0x85	; 133
     908:	fc 4f       	sbci	r31, 0xFC	; 252
     90a:	80 81       	ld	r24, Z
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	8f 73       	andi	r24, 0x3F	; 63
     910:	bd d3       	rcall	.+1914   	; 0x108c <digitalWrite>
     912:	d5 cf       	rjmp	.-86     	; 0x8be <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
     914:	f7 01       	movw	r30, r14
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	04 96       	adiw	r24, 0x04	; 4
     91c:	80 34       	cpi	r24, 0x40	; 64
     91e:	9c 49       	sbci	r25, 0x9C	; 156
     920:	18 f4       	brcc	.+6      	; 0x928 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xde>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
     922:	80 e4       	ldi	r24, 0x40	; 64
     924:	9c e9       	ldi	r25, 0x9C	; 156
     926:	04 c0       	rjmp	.+8      	; 0x930 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe6>
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     928:	f7 01       	movw	r30, r14
     92a:	80 81       	ld	r24, Z
     92c:	91 81       	ldd	r25, Z+1	; 0x01
     92e:	04 96       	adiw	r24, 0x04	; 4
     930:	f6 01       	movw	r30, r12
     932:	91 83       	std	Z+1, r25	; 0x01
     934:	80 83       	st	Z, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     936:	8f ef       	ldi	r24, 0xFF	; 255
     938:	88 83       	st	Y, r24
  }
}
     93a:	44 c0       	rjmp	.+136    	; 0x9c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     93c:	f7 01       	movw	r30, r14
     93e:	40 81       	ld	r20, Z
     940:	51 81       	ldd	r21, Z+1	; 0x01
     942:	88 81       	ld	r24, Y
     944:	b9 01       	movw	r22, r18
     946:	68 0f       	add	r22, r24
     948:	71 1d       	adc	r23, r1
     94a:	87 fd       	sbrc	r24, 7
     94c:	7a 95       	dec	r23
     94e:	cb 01       	movw	r24, r22
     950:	fb 01       	movw	r30, r22
     952:	ee 0f       	add	r30, r30
     954:	ff 1f       	adc	r31, r31
     956:	8e 0f       	add	r24, r30
     958:	9f 1f       	adc	r25, r31
     95a:	fc 01       	movw	r30, r24
     95c:	e5 58       	subi	r30, 0x85	; 133
     95e:	fc 4f       	sbci	r31, 0xFC	; 252
     960:	81 81       	ldd	r24, Z+1	; 0x01
     962:	92 81       	ldd	r25, Z+2	; 0x02
     964:	84 0f       	add	r24, r20
     966:	95 1f       	adc	r25, r21
     968:	f6 01       	movw	r30, r12
     96a:	91 83       	std	Z+1, r25	; 0x01
     96c:	80 83       	st	Z, r24
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     96e:	88 81       	ld	r24, Y
     970:	a9 01       	movw	r20, r18
     972:	48 0f       	add	r20, r24
     974:	51 1d       	adc	r21, r1
     976:	87 fd       	sbrc	r24, 7
     978:	5a 95       	dec	r21
     97a:	ca 01       	movw	r24, r20
     97c:	fa 01       	movw	r30, r20
     97e:	ee 0f       	add	r30, r30
     980:	ff 1f       	adc	r31, r31
     982:	8e 0f       	add	r24, r30
     984:	9f 1f       	adc	r25, r31
     986:	fc 01       	movw	r30, r24
     988:	e5 58       	subi	r30, 0x85	; 133
     98a:	fc 4f       	sbci	r31, 0xFC	; 252
     98c:	80 81       	ld	r24, Z
     98e:	86 ff       	sbrs	r24, 6
     990:	19 c0       	rjmp	.+50     	; 0x9c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
     992:	88 81       	ld	r24, Y
     994:	28 0f       	add	r18, r24
     996:	31 1d       	adc	r19, r1
     998:	87 fd       	sbrc	r24, 7
     99a:	3a 95       	dec	r19
     99c:	f9 01       	movw	r30, r18
     99e:	ee 0f       	add	r30, r30
     9a0:	ff 1f       	adc	r31, r31
     9a2:	2e 0f       	add	r18, r30
     9a4:	3f 1f       	adc	r19, r31
     9a6:	f9 01       	movw	r30, r18
     9a8:	e5 58       	subi	r30, 0x85	; 133
     9aa:	fc 4f       	sbci	r31, 0xFC	; 252
     9ac:	80 81       	ld	r24, Z
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	8f 73       	andi	r24, 0x3F	; 63
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	df 90       	pop	r13

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
     9c0:	cf 90       	pop	r12
     9c2:	64 c3       	rjmp	.+1736   	; 0x108c <digitalWrite>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	08 95       	ret

000009d6 <__vector_17>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
     9d6:	1f 92       	push	r1
     9d8:	0f 92       	push	r0
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	0f 92       	push	r0
     9de:	11 24       	eor	r1, r1
     9e0:	0b b6       	in	r0, 0x3b	; 59
     9e2:	0f 92       	push	r0
     9e4:	2f 93       	push	r18
     9e6:	3f 93       	push	r19
     9e8:	4f 93       	push	r20
     9ea:	5f 93       	push	r21
     9ec:	6f 93       	push	r22
     9ee:	7f 93       	push	r23
     9f0:	8f 93       	push	r24
     9f2:	9f 93       	push	r25
     9f4:	af 93       	push	r26
     9f6:	bf 93       	push	r27
     9f8:	ef 93       	push	r30
     9fa:	ff 93       	push	r31
  handle_interrupts(_timer1, &TCNT1, &OCR1A);
     9fc:	48 e8       	ldi	r20, 0x88	; 136
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	64 e8       	ldi	r22, 0x84	; 132
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	21 df       	rcall	.-446    	; 0x84a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     a08:	ff 91       	pop	r31
     a0a:	ef 91       	pop	r30
     a0c:	bf 91       	pop	r27
     a0e:	af 91       	pop	r26
     a10:	9f 91       	pop	r25
     a12:	8f 91       	pop	r24
     a14:	7f 91       	pop	r23
     a16:	6f 91       	pop	r22
     a18:	5f 91       	pop	r21
     a1a:	4f 91       	pop	r20
     a1c:	3f 91       	pop	r19
     a1e:	2f 91       	pop	r18
     a20:	0f 90       	pop	r0
     a22:	0b be       	out	0x3b, r0	; 59
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	0f 90       	pop	r0
     a2a:	1f 90       	pop	r1
     a2c:	18 95       	reti

00000a2e <__vector_32>:
#endif

#if defined(_useTimer3)
SIGNAL (TIMER3_COMPA_vect)
{
     a2e:	1f 92       	push	r1
     a30:	0f 92       	push	r0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	0f 92       	push	r0
     a36:	11 24       	eor	r1, r1
     a38:	0b b6       	in	r0, 0x3b	; 59
     a3a:	0f 92       	push	r0
     a3c:	2f 93       	push	r18
     a3e:	3f 93       	push	r19
     a40:	4f 93       	push	r20
     a42:	5f 93       	push	r21
     a44:	6f 93       	push	r22
     a46:	7f 93       	push	r23
     a48:	8f 93       	push	r24
     a4a:	9f 93       	push	r25
     a4c:	af 93       	push	r26
     a4e:	bf 93       	push	r27
     a50:	ef 93       	push	r30
     a52:	ff 93       	push	r31
  handle_interrupts(_timer3, &TCNT3, &OCR3A);
     a54:	48 e9       	ldi	r20, 0x98	; 152
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	64 e9       	ldi	r22, 0x94	; 148
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	f5 de       	rcall	.-534    	; 0x84a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     a60:	ff 91       	pop	r31
     a62:	ef 91       	pop	r30
     a64:	bf 91       	pop	r27
     a66:	af 91       	pop	r26
     a68:	9f 91       	pop	r25
     a6a:	8f 91       	pop	r24
     a6c:	7f 91       	pop	r23
     a6e:	6f 91       	pop	r22
     a70:	5f 91       	pop	r21
     a72:	4f 91       	pop	r20
     a74:	3f 91       	pop	r19
     a76:	2f 91       	pop	r18
     a78:	0f 90       	pop	r0
     a7a:	0b be       	out	0x3b, r0	; 59
     a7c:	0f 90       	pop	r0
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	0f 90       	pop	r0
     a82:	1f 90       	pop	r1
     a84:	18 95       	reti

00000a86 <__vector_42>:
#endif

#if defined(_useTimer4)
SIGNAL (TIMER4_COMPA_vect)
{
     a86:	1f 92       	push	r1
     a88:	0f 92       	push	r0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	0f 92       	push	r0
     a8e:	11 24       	eor	r1, r1
     a90:	0b b6       	in	r0, 0x3b	; 59
     a92:	0f 92       	push	r0
     a94:	2f 93       	push	r18
     a96:	3f 93       	push	r19
     a98:	4f 93       	push	r20
     a9a:	5f 93       	push	r21
     a9c:	6f 93       	push	r22
     a9e:	7f 93       	push	r23
     aa0:	8f 93       	push	r24
     aa2:	9f 93       	push	r25
     aa4:	af 93       	push	r26
     aa6:	bf 93       	push	r27
     aa8:	ef 93       	push	r30
     aaa:	ff 93       	push	r31
  handle_interrupts(_timer4, &TCNT4, &OCR4A);
     aac:	48 ea       	ldi	r20, 0xA8	; 168
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	64 ea       	ldi	r22, 0xA4	; 164
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	83 e0       	ldi	r24, 0x03	; 3
     ab6:	c9 de       	rcall	.-622    	; 0x84a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     ab8:	ff 91       	pop	r31
     aba:	ef 91       	pop	r30
     abc:	bf 91       	pop	r27
     abe:	af 91       	pop	r26
     ac0:	9f 91       	pop	r25
     ac2:	8f 91       	pop	r24
     ac4:	7f 91       	pop	r23
     ac6:	6f 91       	pop	r22
     ac8:	5f 91       	pop	r21
     aca:	4f 91       	pop	r20
     acc:	3f 91       	pop	r19
     ace:	2f 91       	pop	r18
     ad0:	0f 90       	pop	r0
     ad2:	0b be       	out	0x3b, r0	; 59
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	0f 90       	pop	r0
     ada:	1f 90       	pop	r1
     adc:	18 95       	reti

00000ade <__vector_47>:
#endif

#if defined(_useTimer5)
SIGNAL (TIMER5_COMPA_vect)
{
     ade:	1f 92       	push	r1
     ae0:	0f 92       	push	r0
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	0f 92       	push	r0
     ae6:	11 24       	eor	r1, r1
     ae8:	0b b6       	in	r0, 0x3b	; 59
     aea:	0f 92       	push	r0
     aec:	2f 93       	push	r18
     aee:	3f 93       	push	r19
     af0:	4f 93       	push	r20
     af2:	5f 93       	push	r21
     af4:	6f 93       	push	r22
     af6:	7f 93       	push	r23
     af8:	8f 93       	push	r24
     afa:	9f 93       	push	r25
     afc:	af 93       	push	r26
     afe:	bf 93       	push	r27
     b00:	ef 93       	push	r30
     b02:	ff 93       	push	r31
  handle_interrupts(_timer5, &TCNT5, &OCR5A);
     b04:	48 e2       	ldi	r20, 0x28	; 40
     b06:	51 e0       	ldi	r21, 0x01	; 1
     b08:	64 e2       	ldi	r22, 0x24	; 36
     b0a:	71 e0       	ldi	r23, 0x01	; 1
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	9d de       	rcall	.-710    	; 0x84a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     b10:	ff 91       	pop	r31
     b12:	ef 91       	pop	r30
     b14:	bf 91       	pop	r27
     b16:	af 91       	pop	r26
     b18:	9f 91       	pop	r25
     b1a:	8f 91       	pop	r24
     b1c:	7f 91       	pop	r23
     b1e:	6f 91       	pop	r22
     b20:	5f 91       	pop	r21
     b22:	4f 91       	pop	r20
     b24:	3f 91       	pop	r19
     b26:	2f 91       	pop	r18
     b28:	0f 90       	pop	r0
     b2a:	0b be       	out	0x3b, r0	; 59
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0f 90       	pop	r0
     b32:	1f 90       	pop	r1
     b34:	18 95       	reti

00000b36 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	0b b6       	in	r0, 0x3b	; 59
     b42:	0f 92       	push	r0
     b44:	2f 93       	push	r18
     b46:	8f 93       	push	r24
     b48:	9f 93       	push	r25
     b4a:	ef 93       	push	r30
     b4c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     b4e:	e0 91 1b 04 	lds	r30, 0x041B	; 0x80041b <Serial+0x10>
     b52:	f0 91 1c 04 	lds	r31, 0x041C	; 0x80041c <Serial+0x11>
     b56:	80 81       	ld	r24, Z
     b58:	e0 91 21 04 	lds	r30, 0x0421	; 0x800421 <Serial+0x16>
     b5c:	f0 91 22 04 	lds	r31, 0x0422	; 0x800422 <Serial+0x17>
     b60:	82 fd       	sbrc	r24, 2
     b62:	12 c0       	rjmp	.+36     	; 0xb88 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     b64:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     b66:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <Serial+0x19>
     b6a:	8f 5f       	subi	r24, 0xFF	; 255
     b6c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     b6e:	20 91 25 04 	lds	r18, 0x0425	; 0x800425 <Serial+0x1a>
     b72:	82 17       	cp	r24, r18
     b74:	51 f0       	breq	.+20     	; 0xb8a <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     b76:	e0 91 24 04 	lds	r30, 0x0424	; 0x800424 <Serial+0x19>
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	e5 5f       	subi	r30, 0xF5	; 245
     b7e:	fb 4f       	sbci	r31, 0xFB	; 251
     b80:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     b82:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <Serial+0x19>
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     b88:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	9f 91       	pop	r25
     b90:	8f 91       	pop	r24
     b92:	2f 91       	pop	r18
     b94:	0f 90       	pop	r0
     b96:	0b be       	out	0x3b, r0	; 59
     b98:	0f 90       	pop	r0
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	0f 90       	pop	r0
     b9e:	1f 90       	pop	r1
     ba0:	18 95       	reti

00000ba2 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     ba2:	1f 92       	push	r1
     ba4:	0f 92       	push	r0
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	0f 92       	push	r0
     baa:	11 24       	eor	r1, r1
     bac:	0b b6       	in	r0, 0x3b	; 59
     bae:	0f 92       	push	r0
     bb0:	2f 93       	push	r18
     bb2:	3f 93       	push	r19
     bb4:	4f 93       	push	r20
     bb6:	5f 93       	push	r21
     bb8:	6f 93       	push	r22
     bba:	7f 93       	push	r23
     bbc:	8f 93       	push	r24
     bbe:	9f 93       	push	r25
     bc0:	af 93       	push	r26
     bc2:	bf 93       	push	r27
     bc4:	ef 93       	push	r30
     bc6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     bc8:	8b e0       	ldi	r24, 0x0B	; 11
     bca:	94 e0       	ldi	r25, 0x04	; 4
     bcc:	2e d3       	rcall	.+1628   	; 0x122a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     bce:	ff 91       	pop	r31
     bd0:	ef 91       	pop	r30
     bd2:	bf 91       	pop	r27
     bd4:	af 91       	pop	r26
     bd6:	9f 91       	pop	r25
     bd8:	8f 91       	pop	r24
     bda:	7f 91       	pop	r23
     bdc:	6f 91       	pop	r22
     bde:	5f 91       	pop	r21
     be0:	4f 91       	pop	r20
     be2:	3f 91       	pop	r19
     be4:	2f 91       	pop	r18
     be6:	0f 90       	pop	r0
     be8:	0b be       	out	0x3b, r0	; 59
     bea:	0f 90       	pop	r0
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	0f 90       	pop	r0
     bf0:	1f 90       	pop	r1
     bf2:	18 95       	reti

00000bf4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     bf4:	8b e0       	ldi	r24, 0x0B	; 11
     bf6:	94 e0       	ldi	r25, 0x04	; 4
     bf8:	9f d2       	rcall	.+1342   	; 0x1138 <_ZN14HardwareSerial9availableEv>
     bfa:	21 e0       	ldi	r18, 0x01	; 1
     bfc:	89 2b       	or	r24, r25
     bfe:	09 f4       	brne	.+2      	; 0xc02 <_Z17Serial0_availablev+0xe>
     c00:	20 e0       	ldi	r18, 0x00	; 0
}
     c02:	82 2f       	mov	r24, r18
     c04:	08 95       	ret

00000c06 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c06:	eb e0       	ldi	r30, 0x0B	; 11
     c08:	f4 e0       	ldi	r31, 0x04	; 4
     c0a:	13 82       	std	Z+3, r1	; 0x03
     c0c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     c0e:	88 ee       	ldi	r24, 0xE8	; 232
     c10:	93 e0       	ldi	r25, 0x03	; 3
     c12:	a0 e0       	ldi	r26, 0x00	; 0
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	84 83       	std	Z+4, r24	; 0x04
     c18:	95 83       	std	Z+5, r25	; 0x05
     c1a:	a6 83       	std	Z+6, r26	; 0x06
     c1c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     c1e:	8b ee       	ldi	r24, 0xEB	; 235
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	91 83       	std	Z+1, r25	; 0x01
     c24:	80 83       	st	Z, r24
     c26:	85 ec       	ldi	r24, 0xC5	; 197
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	95 87       	std	Z+13, r25	; 0x0d
     c2c:	84 87       	std	Z+12, r24	; 0x0c
     c2e:	84 ec       	ldi	r24, 0xC4	; 196
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	97 87       	std	Z+15, r25	; 0x0f
     c34:	86 87       	std	Z+14, r24	; 0x0e
     c36:	80 ec       	ldi	r24, 0xC0	; 192
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	91 8b       	std	Z+17, r25	; 0x11
     c3c:	80 8b       	std	Z+16, r24	; 0x10
     c3e:	81 ec       	ldi	r24, 0xC1	; 193
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	93 8b       	std	Z+19, r25	; 0x13
     c44:	82 8b       	std	Z+18, r24	; 0x12
     c46:	82 ec       	ldi	r24, 0xC2	; 194
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	95 8b       	std	Z+21, r25	; 0x15
     c4c:	84 8b       	std	Z+20, r24	; 0x14
     c4e:	86 ec       	ldi	r24, 0xC6	; 198
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	97 8b       	std	Z+23, r25	; 0x17
     c54:	86 8b       	std	Z+22, r24	; 0x16
     c56:	11 8e       	std	Z+25, r1	; 0x19
     c58:	12 8e       	std	Z+26, r1	; 0x1a
     c5a:	13 8e       	std	Z+27, r1	; 0x1b
     c5c:	14 8e       	std	Z+28, r1	; 0x1c
     c5e:	08 95       	ret

00000c60 <initVariant>:
     c60:	08 95       	ret

00000c62 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     c62:	21 d1       	rcall	.+578    	; 0xea6 <init>

	initVariant();
     c64:	fd df       	rcall	.-6      	; 0xc60 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     c66:	fb db       	rcall	.-2058   	; 0x45e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     c68:	c9 ed       	ldi	r28, 0xD9	; 217
     c6a:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
     c6c:	01 dc       	rcall	.-2046   	; 0x470 <loop>
		if (serialEventRun) serialEventRun();
     c6e:	20 97       	sbiw	r28, 0x00	; 0
     c70:	e9 f3       	breq	.-6      	; 0xc6c <main+0xa>
     c72:	9f d2       	rcall	.+1342   	; 0x11b2 <_Z14serialEventRunv>
     c74:	fb cf       	rjmp	.-10     	; 0xc6c <main+0xa>

00000c76 <_ZN5Print5writeEPKhj>:
     c76:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     c78:	df 92       	push	r13
     c7a:	ef 92       	push	r14
     c7c:	ff 92       	push	r15
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	6c 01       	movw	r12, r24
     c88:	7a 01       	movw	r14, r20
     c8a:	8b 01       	movw	r16, r22
     c8c:	c0 e0       	ldi	r28, 0x00	; 0
     c8e:	d0 e0       	ldi	r29, 0x00	; 0
     c90:	ce 15       	cp	r28, r14
     c92:	df 05       	cpc	r29, r15
     c94:	81 f0       	breq	.+32     	; 0xcb6 <_ZN5Print5writeEPKhj+0x40>
     c96:	d8 01       	movw	r26, r16
     c98:	6d 91       	ld	r22, X+
     c9a:	8d 01       	movw	r16, r26
     c9c:	d6 01       	movw	r26, r12
     c9e:	ed 91       	ld	r30, X+
     ca0:	fc 91       	ld	r31, X
     ca2:	01 90       	ld	r0, Z+
     ca4:	f0 81       	ld	r31, Z
     ca6:	e0 2d       	mov	r30, r0
     ca8:	c6 01       	movw	r24, r12
     caa:	19 95       	eicall
     cac:	89 2b       	or	r24, r25
     cae:	11 f0       	breq	.+4      	; 0xcb4 <_ZN5Print5writeEPKhj+0x3e>
     cb0:	21 96       	adiw	r28, 0x01	; 1
     cb2:	ee cf       	rjmp	.-36     	; 0xc90 <_ZN5Print5writeEPKhj+0x1a>
     cb4:	7e 01       	movw	r14, r28
     cb6:	c7 01       	movw	r24, r14
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	08 95       	ret

00000cca <_ZN5Print5printEc>:
     cca:	dc 01       	movw	r26, r24
     ccc:	ed 91       	ld	r30, X+
     cce:	fc 91       	ld	r31, X
     cd0:	01 90       	ld	r0, Z+
     cd2:	f0 81       	ld	r31, Z
     cd4:	e0 2d       	mov	r30, r0
     cd6:	19 94       	eijmp

00000cd8 <_ZN5Print11printNumberEmh>:
     cd8:	8f 92       	push	r8
     cda:	9f 92       	push	r9
     cdc:	af 92       	push	r10
     cde:	bf 92       	push	r11
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	a1 97       	sbiw	r28, 0x21	; 33
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	7c 01       	movw	r14, r24
     cfe:	fa 01       	movw	r30, r20
     d00:	cb 01       	movw	r24, r22
     d02:	19 a2       	std	Y+33, r1	; 0x21
     d04:	22 30       	cpi	r18, 0x02	; 2
     d06:	08 f4       	brcc	.+2      	; 0xd0a <_ZN5Print11printNumberEmh+0x32>
     d08:	2a e0       	ldi	r18, 0x0A	; 10
     d0a:	8e 01       	movw	r16, r28
     d0c:	0f 5d       	subi	r16, 0xDF	; 223
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
     d10:	82 2e       	mov	r8, r18
     d12:	91 2c       	mov	r9, r1
     d14:	a1 2c       	mov	r10, r1
     d16:	b1 2c       	mov	r11, r1
     d18:	bf 01       	movw	r22, r30
     d1a:	a5 01       	movw	r20, r10
     d1c:	94 01       	movw	r18, r8
     d1e:	14 d3       	rcall	.+1576   	; 0x1348 <__udivmodsi4>
     d20:	f9 01       	movw	r30, r18
     d22:	ca 01       	movw	r24, r20
     d24:	01 50       	subi	r16, 0x01	; 1
     d26:	11 09       	sbc	r17, r1
     d28:	6a 30       	cpi	r22, 0x0A	; 10
     d2a:	10 f4       	brcc	.+4      	; 0xd30 <_ZN5Print11printNumberEmh+0x58>
     d2c:	60 5d       	subi	r22, 0xD0	; 208
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <_ZN5Print11printNumberEmh+0x5a>
     d30:	69 5c       	subi	r22, 0xC9	; 201
     d32:	d8 01       	movw	r26, r16
     d34:	6c 93       	st	X, r22
     d36:	23 2b       	or	r18, r19
     d38:	24 2b       	or	r18, r20
     d3a:	25 2b       	or	r18, r21
     d3c:	69 f7       	brne	.-38     	; 0xd18 <_ZN5Print11printNumberEmh+0x40>
     d3e:	b8 01       	movw	r22, r16
     d40:	c7 01       	movw	r24, r14
     d42:	a5 da       	rcall	.-2742   	; 0x28e <_ZN5Print5writeEPKc>
     d44:	a1 96       	adiw	r28, 0x21	; 33
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	bf 90       	pop	r11
     d5e:	af 90       	pop	r10
     d60:	9f 90       	pop	r9
     d62:	8f 90       	pop	r8
     d64:	08 95       	ret

00000d66 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     d66:	cf 92       	push	r12
     d68:	df 92       	push	r13
     d6a:	ef 92       	push	r14
     d6c:	ff 92       	push	r15
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
  if (base == 0) {
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	81 f4       	brne	.+32     	; 0xd9c <_ZN5Print5printEli+0x36>
    return write(n);
     d7c:	dc 01       	movw	r26, r24
     d7e:	ed 91       	ld	r30, X+
     d80:	fc 91       	ld	r31, X
     d82:	01 90       	ld	r0, Z+
     d84:	f0 81       	ld	r31, Z
     d86:	e0 2d       	mov	r30, r0
     d88:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     d9a:	19 94       	eijmp
  } else if (base == 10) {
     d9c:	2a 30       	cpi	r18, 0x0A	; 10
     d9e:	31 05       	cpc	r19, r1
     da0:	f1 f4       	brne	.+60     	; 0xdde <_ZN5Print5printEli+0x78>
    if (n < 0) {
     da2:	77 ff       	sbrs	r23, 7
     da4:	1b c0       	rjmp	.+54     	; 0xddc <_ZN5Print5printEli+0x76>
     da6:	6a 01       	movw	r12, r20
     da8:	7b 01       	movw	r14, r22
     daa:	ec 01       	movw	r28, r24
      int t = print('-');
     dac:	6d e2       	ldi	r22, 0x2D	; 45
     dae:	8d df       	rcall	.-230    	; 0xcca <_ZN5Print5printEc>
     db0:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     db2:	44 27       	eor	r20, r20
     db4:	55 27       	eor	r21, r21
     db6:	ba 01       	movw	r22, r20
     db8:	4c 19       	sub	r20, r12
     dba:	5d 09       	sbc	r21, r13
     dbc:	6e 09       	sbc	r22, r14
     dbe:	7f 09       	sbc	r23, r15
     dc0:	2a e0       	ldi	r18, 0x0A	; 10
     dc2:	ce 01       	movw	r24, r28
     dc4:	89 df       	rcall	.-238    	; 0xcd8 <_ZN5Print11printNumberEmh>
     dc6:	80 0f       	add	r24, r16
     dc8:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	ff 90       	pop	r15
     dd4:	ef 90       	pop	r14
     dd6:	df 90       	pop	r13
     dd8:	cf 90       	pop	r12
     dda:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     ddc:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     dec:	cf 90       	pop	r12
     dee:	74 cf       	rjmp	.-280    	; 0xcd8 <_ZN5Print11printNumberEmh>

00000df0 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     df0:	9a 01       	movw	r18, r20
  return print((long) n, base);
     df2:	ab 01       	movw	r20, r22
     df4:	77 0f       	add	r23, r23
     df6:	66 0b       	sbc	r22, r22
     df8:	77 0b       	sbc	r23, r23
     dfa:	b5 cf       	rjmp	.-150    	; 0xd66 <_ZN5Print5printEli>

00000dfc <__vector_23>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     dfc:	1f 92       	push	r1
     dfe:	0f 92       	push	r0
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	0f 92       	push	r0
     e04:	11 24       	eor	r1, r1
     e06:	2f 93       	push	r18
     e08:	3f 93       	push	r19
     e0a:	8f 93       	push	r24
     e0c:	9f 93       	push	r25
     e0e:	af 93       	push	r26
     e10:	bf 93       	push	r27
     e12:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <timer0_millis>
     e16:	90 91 aa 04 	lds	r25, 0x04AA	; 0x8004aa <timer0_millis+0x1>
     e1a:	a0 91 ab 04 	lds	r26, 0x04AB	; 0x8004ab <timer0_millis+0x2>
     e1e:	b0 91 ac 04 	lds	r27, 0x04AC	; 0x8004ac <timer0_millis+0x3>
     e22:	30 91 a8 04 	lds	r19, 0x04A8	; 0x8004a8 <timer0_fract>
     e26:	23 e0       	ldi	r18, 0x03	; 3
     e28:	23 0f       	add	r18, r19
     e2a:	2d 37       	cpi	r18, 0x7D	; 125
     e2c:	20 f4       	brcc	.+8      	; 0xe36 <__vector_23+0x3a>
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	a1 1d       	adc	r26, r1
     e32:	b1 1d       	adc	r27, r1
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <__vector_23+0x44>
     e36:	26 e8       	ldi	r18, 0x86	; 134
     e38:	23 0f       	add	r18, r19
     e3a:	02 96       	adiw	r24, 0x02	; 2
     e3c:	a1 1d       	adc	r26, r1
     e3e:	b1 1d       	adc	r27, r1
     e40:	20 93 a8 04 	sts	0x04A8, r18	; 0x8004a8 <timer0_fract>
     e44:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <timer0_millis>
     e48:	90 93 aa 04 	sts	0x04AA, r25	; 0x8004aa <timer0_millis+0x1>
     e4c:	a0 93 ab 04 	sts	0x04AB, r26	; 0x8004ab <timer0_millis+0x2>
     e50:	b0 93 ac 04 	sts	0x04AC, r27	; 0x8004ac <timer0_millis+0x3>
     e54:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <timer0_overflow_count>
     e58:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <timer0_overflow_count+0x1>
     e5c:	a0 91 af 04 	lds	r26, 0x04AF	; 0x8004af <timer0_overflow_count+0x2>
     e60:	b0 91 b0 04 	lds	r27, 0x04B0	; 0x8004b0 <timer0_overflow_count+0x3>
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	a1 1d       	adc	r26, r1
     e68:	b1 1d       	adc	r27, r1
     e6a:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <timer0_overflow_count>
     e6e:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <timer0_overflow_count+0x1>
     e72:	a0 93 af 04 	sts	0x04AF, r26	; 0x8004af <timer0_overflow_count+0x2>
     e76:	b0 93 b0 04 	sts	0x04B0, r27	; 0x8004b0 <timer0_overflow_count+0x3>
     e7a:	bf 91       	pop	r27
     e7c:	af 91       	pop	r26
     e7e:	9f 91       	pop	r25
     e80:	8f 91       	pop	r24
     e82:	3f 91       	pop	r19
     e84:	2f 91       	pop	r18
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	0f 90       	pop	r0
     e8c:	1f 90       	pop	r1
     e8e:	18 95       	reti

00000e90 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     e90:	82 30       	cpi	r24, 0x02	; 2
     e92:	91 05       	cpc	r25, r1
     e94:	38 f0       	brcs	.+14     	; 0xea4 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     e9e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <delayMicroseconds+0x10>
     ea4:	08 95       	ret

00000ea6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     ea6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     ea8:	84 b5       	in	r24, 0x24	; 36
     eaa:	82 60       	ori	r24, 0x02	; 2
     eac:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     eae:	84 b5       	in	r24, 0x24	; 36
     eb0:	81 60       	ori	r24, 0x01	; 1
     eb2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     eb4:	85 b5       	in	r24, 0x25	; 37
     eb6:	82 60       	ori	r24, 0x02	; 2
     eb8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     eba:	85 b5       	in	r24, 0x25	; 37
     ebc:	81 60       	ori	r24, 0x01	; 1
     ebe:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     ec0:	ee e6       	ldi	r30, 0x6E	; 110
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	81 60       	ori	r24, 0x01	; 1
     ec8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     eca:	e1 e8       	ldi	r30, 0x81	; 129
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ed0:	80 81       	ld	r24, Z
     ed2:	82 60       	ori	r24, 0x02	; 2
     ed4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ed6:	80 81       	ld	r24, Z
     ed8:	81 60       	ori	r24, 0x01	; 1
     eda:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     edc:	e0 e8       	ldi	r30, 0x80	; 128
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	81 60       	ori	r24, 0x01	; 1
     ee4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ee6:	e1 eb       	ldi	r30, 0xB1	; 177
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	84 60       	ori	r24, 0x04	; 4
     eee:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     ef0:	e0 eb       	ldi	r30, 0xB0	; 176
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	81 60       	ori	r24, 0x01	; 1
     ef8:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     efa:	e1 e9       	ldi	r30, 0x91	; 145
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	82 60       	ori	r24, 0x02	; 2
     f02:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     f04:	80 81       	ld	r24, Z
     f06:	81 60       	ori	r24, 0x01	; 1
     f08:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     f0a:	e0 e9       	ldi	r30, 0x90	; 144
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	81 60       	ori	r24, 0x01	; 1
     f12:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     f14:	e1 ea       	ldi	r30, 0xA1	; 161
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	82 60       	ori	r24, 0x02	; 2
     f1c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     f1e:	80 81       	ld	r24, Z
     f20:	81 60       	ori	r24, 0x01	; 1
     f22:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     f24:	e0 ea       	ldi	r30, 0xA0	; 160
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	81 60       	ori	r24, 0x01	; 1
     f2c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     f2e:	e1 e2       	ldi	r30, 0x21	; 33
     f30:	f1 e0       	ldi	r31, 0x01	; 1
     f32:	80 81       	ld	r24, Z
     f34:	82 60       	ori	r24, 0x02	; 2
     f36:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     f38:	80 81       	ld	r24, Z
     f3a:	81 60       	ori	r24, 0x01	; 1
     f3c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     f3e:	e0 e2       	ldi	r30, 0x20	; 32
     f40:	f1 e0       	ldi	r31, 0x01	; 1
     f42:	80 81       	ld	r24, Z
     f44:	81 60       	ori	r24, 0x01	; 1
     f46:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     f48:	ea e7       	ldi	r30, 0x7A	; 122
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	84 60       	ori	r24, 0x04	; 4
     f50:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     f52:	80 81       	ld	r24, Z
     f54:	82 60       	ori	r24, 0x02	; 2
     f56:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     f58:	80 81       	ld	r24, Z
     f5a:	81 60       	ori	r24, 0x01	; 1
     f5c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     f5e:	80 81       	ld	r24, Z
     f60:	80 68       	ori	r24, 0x80	; 128
     f62:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     f64:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     f68:	08 95       	ret

00000f6a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	fc 01       	movw	r30, r24
     f6e:	31 97       	sbiw	r30, 0x01	; 1
     f70:	e2 31       	cpi	r30, 0x12	; 18
     f72:	f1 05       	cpc	r31, r1
     f74:	08 f0       	brcs	.+2      	; 0xf78 <turnOffPWM+0xe>
     f76:	4d c0       	rjmp	.+154    	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
     f78:	88 27       	eor	r24, r24
     f7a:	ee 58       	subi	r30, 0x8E	; 142
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	8f 4f       	sbci	r24, 0xFF	; 255
     f80:	05 c2       	rjmp	.+1034   	; 0x138c <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f82:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     f86:	8f 77       	andi	r24, 0x7F	; 127
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f8a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     f8e:	8f 7d       	andi	r24, 0xDF	; 223
     f90:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     f94:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     f96:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     f9a:	87 7f       	andi	r24, 0xF7	; 247
     f9c:	f9 cf       	rjmp	.-14     	; 0xf90 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     f9e:	84 b5       	in	r24, 0x24	; 36
     fa0:	8f 77       	andi	r24, 0x7F	; 127
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     fa4:	84 b5       	in	r24, 0x24	; 36
     fa6:	8f 7d       	andi	r24, 0xDF	; 223
     fa8:	84 bd       	out	0x24, r24	; 36
     faa:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     fac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     fb0:	8f 77       	andi	r24, 0x7F	; 127
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     fb4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     fb8:	8f 7d       	andi	r24, 0xDF	; 223
     fba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     fbe:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     fc0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     fc4:	8f 77       	andi	r24, 0x7F	; 127
     fc6:	07 c0       	rjmp	.+14     	; 0xfd6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     fc8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     fcc:	8f 7d       	andi	r24, 0xDF	; 223
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     fd0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     fd4:	87 7f       	andi	r24, 0xF7	; 247
     fd6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     fda:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     fdc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     fe0:	8f 77       	andi	r24, 0x7F	; 127
     fe2:	07 c0       	rjmp	.+14     	; 0xff2 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     fe4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     fe8:	8f 7d       	andi	r24, 0xDF	; 223
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     fec:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     ff0:	87 7f       	andi	r24, 0xF7	; 247
     ff2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     ff6:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     ff8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     ffc:	8f 77       	andi	r24, 0x7F	; 127
     ffe:	07 c0       	rjmp	.+14     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1000:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1004:	8f 7d       	andi	r24, 0xDF	; 223
    1006:	03 c0       	rjmp	.+6      	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1008:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    100c:	87 7f       	andi	r24, 0xF7	; 247
    100e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1012:	08 95       	ret

00001014 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	fc 01       	movw	r30, r24
    101c:	e2 5b       	subi	r30, 0xB2	; 178
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1022:	fc 01       	movw	r30, r24
    1024:	ec 56       	subi	r30, 0x6C	; 108
    1026:	fe 4f       	sbci	r31, 0xFE	; 254
    1028:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    102a:	88 23       	and	r24, r24
    102c:	61 f1       	breq	.+88     	; 0x1086 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	fc 01       	movw	r30, r24
    1036:	e2 5f       	subi	r30, 0xF2	; 242
    1038:	fd 4f       	sbci	r31, 0xFD	; 253
    103a:	c5 91       	lpm	r28, Z+
    103c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    103e:	fc 01       	movw	r30, r24
    1040:	ec 50       	subi	r30, 0x0C	; 12
    1042:	fe 4f       	sbci	r31, 0xFE	; 254
    1044:	a5 91       	lpm	r26, Z+
    1046:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1048:	61 11       	cpse	r22, r1
    104a:	09 c0       	rjmp	.+18     	; 0x105e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    104c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    104e:	f8 94       	cli
		*reg &= ~bit;
    1050:	88 81       	ld	r24, Y
    1052:	20 95       	com	r18
    1054:	82 23       	and	r24, r18
    1056:	88 83       	st	Y, r24
		*out &= ~bit;
    1058:	ec 91       	ld	r30, X
    105a:	2e 23       	and	r18, r30
    105c:	0b c0       	rjmp	.+22     	; 0x1074 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    105e:	62 30       	cpi	r22, 0x02	; 2
    1060:	61 f4       	brne	.+24     	; 0x107a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1062:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1064:	f8 94       	cli
		*reg &= ~bit;
    1066:	88 81       	ld	r24, Y
    1068:	32 2f       	mov	r19, r18
    106a:	30 95       	com	r19
    106c:	83 23       	and	r24, r19
    106e:	88 83       	st	Y, r24
		*out |= bit;
    1070:	ec 91       	ld	r30, X
    1072:	2e 2b       	or	r18, r30
    1074:	2c 93       	st	X, r18
		SREG = oldSREG;
    1076:	9f bf       	out	0x3f, r25	; 63
    1078:	06 c0       	rjmp	.+12     	; 0x1086 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    107a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    107c:	f8 94       	cli
		*reg |= bit;
    107e:	e8 81       	ld	r30, Y
    1080:	2e 2b       	or	r18, r30
    1082:	28 83       	st	Y, r18
		SREG = oldSREG;
    1084:	8f bf       	out	0x3f, r24	; 63
	}
}
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	f9 01       	movw	r30, r18
    1098:	e8 5f       	subi	r30, 0xF8	; 248
    109a:	fe 4f       	sbci	r31, 0xFE	; 254
    109c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    109e:	f9 01       	movw	r30, r18
    10a0:	e2 5b       	subi	r30, 0xB2	; 178
    10a2:	fe 4f       	sbci	r31, 0xFE	; 254
    10a4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    10a6:	f9 01       	movw	r30, r18
    10a8:	ec 56       	subi	r30, 0x6C	; 108
    10aa:	fe 4f       	sbci	r31, 0xFE	; 254
    10ac:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    10ae:	cc 23       	and	r28, r28
    10b0:	b9 f0       	breq	.+46     	; 0x10e0 <digitalWrite+0x54>
    10b2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    10b4:	81 11       	cpse	r24, r1
    10b6:	59 df       	rcall	.-334    	; 0xf6a <turnOffPWM>

	out = portOutputRegister(port);
    10b8:	ec 2f       	mov	r30, r28
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	ec 50       	subi	r30, 0x0C	; 12
    10c2:	fe 4f       	sbci	r31, 0xFE	; 254
    10c4:	a5 91       	lpm	r26, Z+
    10c6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    10c8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    10ca:	f8 94       	cli

	if (val == LOW) {
    10cc:	11 11       	cpse	r17, r1
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <digitalWrite+0x4c>
		*out &= ~bit;
    10d0:	8c 91       	ld	r24, X
    10d2:	d0 95       	com	r29
    10d4:	d8 23       	and	r29, r24
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <digitalWrite+0x50>
	} else {
		*out |= bit;
    10d8:	ec 91       	ld	r30, X
    10da:	de 2b       	or	r29, r30
    10dc:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    10de:	9f bf       	out	0x3f, r25	; 63
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	08 95       	ret

000010e8 <digitalRead>:

int digitalRead(uint8_t pin)
{
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	f9 01       	movw	r30, r18
    10f2:	e8 5f       	subi	r30, 0xF8	; 248
    10f4:	fe 4f       	sbci	r31, 0xFE	; 254
    10f6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    10f8:	f9 01       	movw	r30, r18
    10fa:	e2 5b       	subi	r30, 0xB2	; 178
    10fc:	fe 4f       	sbci	r31, 0xFE	; 254
    10fe:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1100:	f9 01       	movw	r30, r18
    1102:	ec 56       	subi	r30, 0x6C	; 108
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
    1106:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1108:	cc 23       	and	r28, r28
    110a:	89 f0       	breq	.+34     	; 0x112e <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    110c:	81 11       	cpse	r24, r1
    110e:	2d df       	rcall	.-422    	; 0xf6a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1110:	ec 2f       	mov	r30, r28
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	e6 52       	subi	r30, 0x26	; 38
    111a:	fe 4f       	sbci	r31, 0xFE	; 254
    111c:	a5 91       	lpm	r26, Z+
    111e:	b4 91       	lpm	r27, Z
    1120:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1122:	ed 23       	and	r30, r29
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	21 f4       	brne	.+8      	; 0x1132 <digitalRead+0x4a>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <digitalRead+0x4a>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1138:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    113a:	91 8d       	ldd	r25, Z+25	; 0x19
    113c:	22 8d       	ldd	r18, Z+26	; 0x1a
    113e:	89 2f       	mov	r24, r25
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	80 5c       	subi	r24, 0xC0	; 192
    1144:	9f 4f       	sbci	r25, 0xFF	; 255
    1146:	82 1b       	sub	r24, r18
    1148:	91 09       	sbc	r25, r1
}
    114a:	8f 73       	andi	r24, 0x3F	; 63
    114c:	99 27       	eor	r25, r25
    114e:	08 95       	ret

00001150 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1150:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1152:	91 8d       	ldd	r25, Z+25	; 0x19
    1154:	82 8d       	ldd	r24, Z+26	; 0x1a
    1156:	98 17       	cp	r25, r24
    1158:	31 f0       	breq	.+12     	; 0x1166 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    115a:	82 8d       	ldd	r24, Z+26	; 0x1a
    115c:	e8 0f       	add	r30, r24
    115e:	f1 1d       	adc	r31, r1
    1160:	85 8d       	ldd	r24, Z+29	; 0x1d
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1166:	8f ef       	ldi	r24, 0xFF	; 255
    1168:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    116a:	08 95       	ret

0000116c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    116c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    116e:	91 8d       	ldd	r25, Z+25	; 0x19
    1170:	82 8d       	ldd	r24, Z+26	; 0x1a
    1172:	98 17       	cp	r25, r24
    1174:	61 f0       	breq	.+24     	; 0x118e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1176:	82 8d       	ldd	r24, Z+26	; 0x1a
    1178:	df 01       	movw	r26, r30
    117a:	a8 0f       	add	r26, r24
    117c:	b1 1d       	adc	r27, r1
    117e:	5d 96       	adiw	r26, 0x1d	; 29
    1180:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1182:	92 8d       	ldd	r25, Z+26	; 0x1a
    1184:	9f 5f       	subi	r25, 0xFF	; 255
    1186:	9f 73       	andi	r25, 0x3F	; 63
    1188:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1192:	08 95       	ret

00001194 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1194:	fc 01       	movw	r30, r24
    1196:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1198:	44 8d       	ldd	r20, Z+28	; 0x1c
    119a:	25 2f       	mov	r18, r21
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	84 2f       	mov	r24, r20
    11a0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    11a2:	82 1b       	sub	r24, r18
    11a4:	93 0b       	sbc	r25, r19
    11a6:	54 17       	cp	r21, r20
    11a8:	10 f0       	brcs	.+4      	; 0x11ae <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    11aa:	cf 96       	adiw	r24, 0x3f	; 63
    11ac:	08 95       	ret
  return tail - head - 1;
    11ae:	01 97       	sbiw	r24, 0x01	; 1
}
    11b0:	08 95       	ret

000011b2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    11b2:	8a ef       	ldi	r24, 0xFA	; 250
    11b4:	95 e0       	ldi	r25, 0x05	; 5
    11b6:	89 2b       	or	r24, r25
    11b8:	39 f0       	breq	.+14     	; 0x11c8 <_Z14serialEventRunv+0x16>
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	89 2b       	or	r24, r25
    11c0:	19 f0       	breq	.+6      	; 0x11c8 <_Z14serialEventRunv+0x16>
    11c2:	18 dd       	rcall	.-1488   	; 0xbf4 <_Z17Serial0_availablev>
    11c4:	81 11       	cpse	r24, r1
    11c6:	25 c0       	rjmp	.+74     	; 0x1212 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	89 2b       	or	r24, r25
    11ce:	41 f0       	breq	.+16     	; 0x11e0 <_Z14serialEventRunv+0x2e>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	89 2b       	or	r24, r25
    11d6:	21 f0       	breq	.+8      	; 0x11e0 <_Z14serialEventRunv+0x2e>
    11d8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    11dc:	81 11       	cpse	r24, r1
    11de:	1c c0       	rjmp	.+56     	; 0x1218 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	89 2b       	or	r24, r25
    11e6:	41 f0       	breq	.+16     	; 0x11f8 <_Z14serialEventRunv+0x46>
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	89 2b       	or	r24, r25
    11ee:	21 f0       	breq	.+8      	; 0x11f8 <_Z14serialEventRunv+0x46>
    11f0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    11f4:	81 11       	cpse	r24, r1
    11f6:	13 c0       	rjmp	.+38     	; 0x121e <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	89 2b       	or	r24, r25
    11fe:	a1 f0       	breq	.+40     	; 0x1228 <_Z14serialEventRunv+0x76>
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	89 2b       	or	r24, r25
    1206:	81 f0       	breq	.+32     	; 0x1228 <_Z14serialEventRunv+0x76>
    1208:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    120c:	81 11       	cpse	r24, r1
    120e:	0a c0       	rjmp	.+20     	; 0x1224 <_Z14serialEventRunv+0x72>
    1210:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1212:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1216:	d8 cf       	rjmp	.-80     	; 0x11c8 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1218:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    121c:	e1 cf       	rjmp	.-62     	; 0x11e0 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    121e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1222:	ea cf       	rjmp	.-44     	; 0x11f8 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1228:	08 95       	ret

0000122a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    122a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    122c:	84 8d       	ldd	r24, Z+28	; 0x1c
    122e:	df 01       	movw	r26, r30
    1230:	a8 0f       	add	r26, r24
    1232:	b1 1d       	adc	r27, r1
    1234:	a3 5a       	subi	r26, 0xA3	; 163
    1236:	bf 4f       	sbci	r27, 0xFF	; 255
    1238:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    123a:	84 8d       	ldd	r24, Z+28	; 0x1c
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	8f 73       	andi	r24, 0x3F	; 63
    1242:	99 27       	eor	r25, r25
    1244:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1246:	a6 89       	ldd	r26, Z+22	; 0x16
    1248:	b7 89       	ldd	r27, Z+23	; 0x17
    124a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    124c:	a0 89       	ldd	r26, Z+16	; 0x10
    124e:	b1 89       	ldd	r27, Z+17	; 0x11
    1250:	8c 91       	ld	r24, X
    1252:	83 70       	andi	r24, 0x03	; 3
    1254:	80 64       	ori	r24, 0x40	; 64
    1256:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1258:	93 8d       	ldd	r25, Z+27	; 0x1b
    125a:	84 8d       	ldd	r24, Z+28	; 0x1c
    125c:	98 13       	cpse	r25, r24
    125e:	06 c0       	rjmp	.+12     	; 0x126c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1260:	02 88       	ldd	r0, Z+18	; 0x12
    1262:	f3 89       	ldd	r31, Z+19	; 0x13
    1264:	e0 2d       	mov	r30, r0
    1266:	80 81       	ld	r24, Z
    1268:	8f 7d       	andi	r24, 0xDF	; 223
    126a:	80 83       	st	Z, r24
    126c:	08 95       	ret

0000126e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	ec 01       	movw	r28, r24
  _written = true;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1280:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1282:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1284:	98 13       	cpse	r25, r24
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <_ZN14HardwareSerial5writeEh+0x24>
    1288:	e8 89       	ldd	r30, Y+16	; 0x10
    128a:	f9 89       	ldd	r31, Y+17	; 0x11
    128c:	80 81       	ld	r24, Z
    128e:	85 fd       	sbrc	r24, 5
    1290:	25 c0       	rjmp	.+74     	; 0x12dc <_ZN14HardwareSerial5writeEh+0x6e>
    1292:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1294:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1296:	10 e0       	ldi	r17, 0x00	; 0
    1298:	0f 5f       	subi	r16, 0xFF	; 255
    129a:	1f 4f       	sbci	r17, 0xFF	; 255
    129c:	0f 73       	andi	r16, 0x3F	; 63
    129e:	11 27       	eor	r17, r17
    12a0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    12a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12a4:	e8 12       	cpse	r14, r24
    12a6:	0b c0       	rjmp	.+22     	; 0x12be <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	07 fc       	sbrc	r0, 7
    12ac:	fa cf       	rjmp	.-12     	; 0x12a2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    12ae:	e8 89       	ldd	r30, Y+16	; 0x10
    12b0:	f9 89       	ldd	r31, Y+17	; 0x11
    12b2:	80 81       	ld	r24, Z
    12b4:	85 ff       	sbrs	r24, 5
    12b6:	f5 cf       	rjmp	.-22     	; 0x12a2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    12b8:	ce 01       	movw	r24, r28
    12ba:	b7 df       	rcall	.-146    	; 0x122a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    12bc:	f2 cf       	rjmp	.-28     	; 0x12a2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    12be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12c0:	fe 01       	movw	r30, r28
    12c2:	e8 0f       	add	r30, r24
    12c4:	f1 1d       	adc	r31, r1
    12c6:	e3 5a       	subi	r30, 0xA3	; 163
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    12cc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12ce:	f8 94       	cli
    _tx_buffer_head = i;
    12d0:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    12d2:	ea 89       	ldd	r30, Y+18	; 0x12
    12d4:	fb 89       	ldd	r31, Y+19	; 0x13
    12d6:	80 81       	ld	r24, Z
    12d8:	80 62       	ori	r24, 0x20	; 32
    12da:	0a c0       	rjmp	.+20     	; 0x12f0 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    12dc:	9f b7       	in	r25, 0x3f	; 63
    12de:	f8 94       	cli
      *_udr = c;
    12e0:	ee 89       	ldd	r30, Y+22	; 0x16
    12e2:	ff 89       	ldd	r31, Y+23	; 0x17
    12e4:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    12e6:	e8 89       	ldd	r30, Y+16	; 0x10
    12e8:	f9 89       	ldd	r31, Y+17	; 0x11
    12ea:	80 81       	ld	r24, Z
    12ec:	83 70       	andi	r24, 0x03	; 3
    12ee:	80 64       	ori	r24, 0x40	; 64
    12f0:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12f2:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	ff 90       	pop	r15
    1302:	ef 90       	pop	r14
    1304:	08 95       	ret

00001306 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    130c:	88 8d       	ldd	r24, Y+24	; 0x18
    130e:	88 23       	and	r24, r24
    1310:	c1 f0       	breq	.+48     	; 0x1342 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1312:	ea 89       	ldd	r30, Y+18	; 0x12
    1314:	fb 89       	ldd	r31, Y+19	; 0x13
    1316:	80 81       	ld	r24, Z
    1318:	85 fd       	sbrc	r24, 5
    131a:	05 c0       	rjmp	.+10     	; 0x1326 <_ZN14HardwareSerial5flushEv+0x20>
    131c:	a8 89       	ldd	r26, Y+16	; 0x10
    131e:	b9 89       	ldd	r27, Y+17	; 0x11
    1320:	8c 91       	ld	r24, X
    1322:	86 fd       	sbrc	r24, 6
    1324:	0e c0       	rjmp	.+28     	; 0x1342 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	07 fc       	sbrc	r0, 7
    132a:	f5 cf       	rjmp	.-22     	; 0x1316 <_ZN14HardwareSerial5flushEv+0x10>
    132c:	80 81       	ld	r24, Z
    132e:	85 ff       	sbrs	r24, 5
    1330:	f2 cf       	rjmp	.-28     	; 0x1316 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1332:	a8 89       	ldd	r26, Y+16	; 0x10
    1334:	b9 89       	ldd	r27, Y+17	; 0x11
    1336:	8c 91       	ld	r24, X
    1338:	85 ff       	sbrs	r24, 5
    133a:	ed cf       	rjmp	.-38     	; 0x1316 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    133c:	ce 01       	movw	r24, r28
    133e:	75 df       	rcall	.-278    	; 0x122a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1340:	e8 cf       	rjmp	.-48     	; 0x1312 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	08 95       	ret

00001348 <__udivmodsi4>:
    1348:	a1 e2       	ldi	r26, 0x21	; 33
    134a:	1a 2e       	mov	r1, r26
    134c:	aa 1b       	sub	r26, r26
    134e:	bb 1b       	sub	r27, r27
    1350:	fd 01       	movw	r30, r26
    1352:	0d c0       	rjmp	.+26     	; 0x136e <__udivmodsi4_ep>

00001354 <__udivmodsi4_loop>:
    1354:	aa 1f       	adc	r26, r26
    1356:	bb 1f       	adc	r27, r27
    1358:	ee 1f       	adc	r30, r30
    135a:	ff 1f       	adc	r31, r31
    135c:	a2 17       	cp	r26, r18
    135e:	b3 07       	cpc	r27, r19
    1360:	e4 07       	cpc	r30, r20
    1362:	f5 07       	cpc	r31, r21
    1364:	20 f0       	brcs	.+8      	; 0x136e <__udivmodsi4_ep>
    1366:	a2 1b       	sub	r26, r18
    1368:	b3 0b       	sbc	r27, r19
    136a:	e4 0b       	sbc	r30, r20
    136c:	f5 0b       	sbc	r31, r21

0000136e <__udivmodsi4_ep>:
    136e:	66 1f       	adc	r22, r22
    1370:	77 1f       	adc	r23, r23
    1372:	88 1f       	adc	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	1a 94       	dec	r1
    1378:	69 f7       	brne	.-38     	; 0x1354 <__udivmodsi4_loop>
    137a:	60 95       	com	r22
    137c:	70 95       	com	r23
    137e:	80 95       	com	r24
    1380:	90 95       	com	r25
    1382:	9b 01       	movw	r18, r22
    1384:	ac 01       	movw	r20, r24
    1386:	bd 01       	movw	r22, r26
    1388:	cf 01       	movw	r24, r30
    138a:	08 95       	ret

0000138c <__tablejump2__>:
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	88 1f       	adc	r24, r24
    1392:	8b bf       	out	0x3b, r24	; 59
    1394:	07 90       	elpm	r0, Z+
    1396:	f6 91       	elpm	r31, Z
    1398:	e0 2d       	mov	r30, r0
    139a:	19 94       	eijmp

0000139c <_exit>:
    139c:	f8 94       	cli

0000139e <__stop_program>:
    139e:	ff cf       	rjmp	.-2      	; 0x139e <__stop_program>
