
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000182  00800200  00001b28  00001bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bb  00800382  00800382  00001d3e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000598  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d251  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003004  00000000  00000000  0000f599  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037f7  00000000  00000000  0001259d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011c4  00000000  00000000  00015d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000031cf  00000000  00000000  00016f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006308  00000000  00000000  0001a127  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000650  00000000  00000000  0002042f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4d c1       	rjmp	.+666    	; 0x29c <__ctors_end>
       2:	00 00       	nop
       4:	7c c1       	rjmp	.+760    	; 0x2fe <__bad_interrupt>
       6:	00 00       	nop
       8:	7a c1       	rjmp	.+756    	; 0x2fe <__bad_interrupt>
       a:	00 00       	nop
       c:	78 c1       	rjmp	.+752    	; 0x2fe <__bad_interrupt>
       e:	00 00       	nop
      10:	76 c1       	rjmp	.+748    	; 0x2fe <__bad_interrupt>
      12:	00 00       	nop
      14:	74 c1       	rjmp	.+744    	; 0x2fe <__bad_interrupt>
      16:	00 00       	nop
      18:	72 c1       	rjmp	.+740    	; 0x2fe <__bad_interrupt>
      1a:	00 00       	nop
      1c:	70 c1       	rjmp	.+736    	; 0x2fe <__bad_interrupt>
      1e:	00 00       	nop
      20:	6e c1       	rjmp	.+732    	; 0x2fe <__bad_interrupt>
      22:	00 00       	nop
      24:	6c c1       	rjmp	.+728    	; 0x2fe <__bad_interrupt>
      26:	00 00       	nop
      28:	6a c1       	rjmp	.+724    	; 0x2fe <__bad_interrupt>
      2a:	00 00       	nop
      2c:	68 c1       	rjmp	.+720    	; 0x2fe <__bad_interrupt>
      2e:	00 00       	nop
      30:	66 c1       	rjmp	.+716    	; 0x2fe <__bad_interrupt>
      32:	00 00       	nop
      34:	64 c1       	rjmp	.+712    	; 0x2fe <__bad_interrupt>
      36:	00 00       	nop
      38:	62 c1       	rjmp	.+708    	; 0x2fe <__bad_interrupt>
      3a:	00 00       	nop
      3c:	60 c1       	rjmp	.+704    	; 0x2fe <__bad_interrupt>
      3e:	00 00       	nop
      40:	5e c1       	rjmp	.+700    	; 0x2fe <__bad_interrupt>
      42:	00 00       	nop
      44:	b3 c5       	rjmp	.+2918   	; 0xbac <__vector_17>
      46:	00 00       	nop
      48:	5a c1       	rjmp	.+692    	; 0x2fe <__bad_interrupt>
      4a:	00 00       	nop
      4c:	58 c1       	rjmp	.+688    	; 0x2fe <__bad_interrupt>
      4e:	00 00       	nop
      50:	56 c1       	rjmp	.+684    	; 0x2fe <__bad_interrupt>
      52:	00 00       	nop
      54:	54 c1       	rjmp	.+680    	; 0x2fe <__bad_interrupt>
      56:	00 00       	nop
      58:	52 c1       	rjmp	.+676    	; 0x2fe <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__vector_23>
      60:	4e c1       	rjmp	.+668    	; 0x2fe <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__vector_25>
      68:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__vector_26>
      6c:	48 c1       	rjmp	.+656    	; 0x2fe <__bad_interrupt>
      6e:	00 00       	nop
      70:	46 c1       	rjmp	.+652    	; 0x2fe <__bad_interrupt>
      72:	00 00       	nop
      74:	44 c1       	rjmp	.+648    	; 0x2fe <__bad_interrupt>
      76:	00 00       	nop
      78:	42 c1       	rjmp	.+644    	; 0x2fe <__bad_interrupt>
      7a:	00 00       	nop
      7c:	40 c1       	rjmp	.+640    	; 0x2fe <__bad_interrupt>
      7e:	00 00       	nop
      80:	c1 c5       	rjmp	.+2946   	; 0xc04 <__vector_32>
      82:	00 00       	nop
      84:	3c c1       	rjmp	.+632    	; 0x2fe <__bad_interrupt>
      86:	00 00       	nop
      88:	3a c1       	rjmp	.+628    	; 0x2fe <__bad_interrupt>
      8a:	00 00       	nop
      8c:	38 c1       	rjmp	.+624    	; 0x2fe <__bad_interrupt>
      8e:	00 00       	nop
      90:	36 c1       	rjmp	.+620    	; 0x2fe <__bad_interrupt>
      92:	00 00       	nop
      94:	34 c1       	rjmp	.+616    	; 0x2fe <__bad_interrupt>
      96:	00 00       	nop
      98:	32 c1       	rjmp	.+612    	; 0x2fe <__bad_interrupt>
      9a:	00 00       	nop
      9c:	30 c1       	rjmp	.+608    	; 0x2fe <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2e c1       	rjmp	.+604    	; 0x2fe <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2c c1       	rjmp	.+600    	; 0x2fe <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d9 c5       	rjmp	.+2994   	; 0xc5c <__vector_42>
      aa:	00 00       	nop
      ac:	28 c1       	rjmp	.+592    	; 0x2fe <__bad_interrupt>
      ae:	00 00       	nop
      b0:	26 c1       	rjmp	.+588    	; 0x2fe <__bad_interrupt>
      b2:	00 00       	nop
      b4:	24 c1       	rjmp	.+584    	; 0x2fe <__bad_interrupt>
      b6:	00 00       	nop
      b8:	22 c1       	rjmp	.+580    	; 0x2fe <__bad_interrupt>
      ba:	00 00       	nop
      bc:	fb c5       	rjmp	.+3062   	; 0xcb4 <__vector_47>
      be:	00 00       	nop
      c0:	1e c1       	rjmp	.+572    	; 0x2fe <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1c c1       	rjmp	.+568    	; 0x2fe <__bad_interrupt>
      c6:	00 00       	nop
      c8:	1a c1       	rjmp	.+564    	; 0x2fe <__bad_interrupt>
      ca:	00 00       	nop
      cc:	18 c1       	rjmp	.+560    	; 0x2fe <__bad_interrupt>
      ce:	00 00       	nop
      d0:	16 c1       	rjmp	.+556    	; 0x2fe <__bad_interrupt>
      d2:	00 00       	nop
      d4:	14 c1       	rjmp	.+552    	; 0x2fe <__bad_interrupt>
      d6:	00 00       	nop
      d8:	12 c1       	rjmp	.+548    	; 0x2fe <__bad_interrupt>
      da:	00 00       	nop
      dc:	10 c1       	rjmp	.+544    	; 0x2fe <__bad_interrupt>
      de:	00 00       	nop
      e0:	0e c1       	rjmp	.+540    	; 0x2fe <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a5 01       	movw	r20, r10
      e6:	bf 01       	movw	r22, r30
      e8:	c9 02       	muls	r28, r25
      ea:	e3 01       	movw	r28, r6
      ec:	fd 01       	movw	r30, r26
      ee:	15 02       	muls	r17, r21
      f0:	2f 02       	muls	r18, r31
      f2:	49 02       	muls	r20, r25
      f4:	8b 02       	muls	r24, r27
      f6:	c9 02       	muls	r28, r25
      f8:	d9 02       	muls	r29, r25
      fa:	08 00       	.word	0x0008	; ????
      fc:	00 00       	nop
      fe:	be 92       	st	-X, r11
     100:	24 49       	sbci	r18, 0x94	; 148
     102:	12 3e       	cpi	r17, 0xE2	; 226
     104:	ab aa       	std	Y+51, r10	; 0x33
     106:	aa 2a       	or	r10, r26
     108:	be cd       	rjmp	.-1156   	; 0xfffffc86 <__eeprom_end+0xff7efc86>
     10a:	cc cc       	rjmp	.-1640   	; 0xfffffaa4 <__eeprom_end+0xff7efaa4>
     10c:	4c 3e       	cpi	r20, 0xEC	; 236
     10e:	00 00       	nop
     110:	00 80       	ld	r0, Z
     112:	be ab       	std	Y+54, r27	; 0x36
     114:	aa aa       	std	Y+50, r10	; 0x32
     116:	aa 3e       	cpi	r26, 0xEA	; 234
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	bf 00       	.word	0x00bf	; ????
     11e:	00 00       	nop
     120:	80 3f       	cpi	r24, 0xF0	; 240
     122:	00 00       	nop
     124:	00 00       	nop
     126:	00 08       	sbc	r0, r0
     128:	41 78       	andi	r20, 0x81	; 129
     12a:	d3 bb       	out	0x13, r29	; 19
     12c:	43 87       	std	Z+11, r20	; 0x0b
     12e:	d1 13       	cpse	r29, r17
     130:	3d 19       	sub	r19, r13
     132:	0e 3c       	cpi	r16, 0xCE	; 206
     134:	c3 bd       	out	0x23, r28	; 35
     136:	42 82       	std	Z+2, r4	; 0x02
     138:	ad 2b       	or	r26, r29
     13a:	3e 68       	ori	r19, 0x8E	; 142
     13c:	ec 82       	std	Y+4, r14	; 0x04
     13e:	76 be       	out	0x36, r7	; 54
     140:	d9 8f       	std	Y+25, r29	; 0x19
     142:	e1 a9       	ldd	r30, Z+49	; 0x31
     144:	3e 4c       	sbci	r19, 0xCE	; 206
     146:	80 ef       	ldi	r24, 0xF0	; 240
     148:	ff be       	out	0x3f, r15	; 63
     14a:	01 c4       	rjmp	.+2050   	; 0x94e <_ZN13LiquidCrystal5beginEhhh+0x90>
     14c:	ff 7f       	andi	r31, 0xFF	; 255
     14e:	3f 00       	.word	0x003f	; ????
     150:	00 00       	nop
     152:	00 00       	nop
     154:	93 0b       	sbc	r25, r19
     156:	96 0b       	sbc	r25, r22
     158:	85 0b       	sbc	r24, r21
     15a:	89 0b       	sbc	r24, r25
     15c:	8f 0b       	sbc	r24, r31
     15e:	cd 0b       	sbc	r28, r29
     160:	9a 0b       	sbc	r25, r26
     162:	9e 0b       	sbc	r25, r30
     164:	a4 0b       	sbc	r26, r20
     166:	a8 0b       	sbc	r26, r24
     168:	ac 0b       	sbc	r26, r28
     16a:	b2 0b       	sbc	r27, r18
     16c:	b6 0b       	sbc	r27, r22
     16e:	ba 0b       	sbc	r27, r26
     170:	cd 0b       	sbc	r28, r29
     172:	c0 0b       	sbc	r28, r16
     174:	c4 0b       	sbc	r28, r20
     176:	c8 0b       	sbc	r28, r24

00000178 <__trampolines_end>:
     178:	00 00       	nop
     17a:	0a 0b       	sbc	r16, r26
     17c:	02 09       	sbc	r16, r2
     17e:	0c 0d       	add	r16, r12
     180:	0e 08       	sbc	r0, r14
     182:	07 03       	mulsu	r16, r23
     184:	04 01       	movw	r0, r8
	...
     1a2:	00 00       	nop
     1a4:	12 11       	cpse	r17, r2
     1a6:	10 00       	.word	0x0010	; ????
	...

000001be <digital_pin_to_bit_mask_PGM>:
     1be:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1ce:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1de:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1ee:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1fe:	04 08 10 20 40 80                                   ... @.

00000204 <digital_pin_to_port_PGM>:
     204:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     214:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     224:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     234:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     244:	0b 0b 0b 0b 0b 0b                                   ......

0000024a <port_to_input_PGM>:
     24a:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     25a:	00 01 00 00 03 01 06 01 09 01                       ..........

00000264 <port_to_output_PGM>:
     264:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     274:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000027e <port_to_mode_PGM>:
     27e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     28e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000298 <__ctors_start>:
     298:	1d 03       	fmul	r17, r21
     29a:	a1 09       	sbc	r26, r1

0000029c <__ctors_end>:
     29c:	11 24       	eor	r1, r1
     29e:	1f be       	out	0x3f, r1	; 63
     2a0:	cf ef       	ldi	r28, 0xFF	; 255
     2a2:	d1 e2       	ldi	r29, 0x21	; 33
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	00 e0       	ldi	r16, 0x00	; 0
     2aa:	0c bf       	out	0x3c, r16	; 60

000002ac <__do_copy_data>:
     2ac:	13 e0       	ldi	r17, 0x03	; 3
     2ae:	a0 e0       	ldi	r26, 0x00	; 0
     2b0:	b2 e0       	ldi	r27, 0x02	; 2
     2b2:	e8 e2       	ldi	r30, 0x28	; 40
     2b4:	fb e1       	ldi	r31, 0x1B	; 27
     2b6:	00 e0       	ldi	r16, 0x00	; 0
     2b8:	0b bf       	out	0x3b, r16	; 59
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <__do_copy_data+0x14>
     2bc:	07 90       	elpm	r0, Z+
     2be:	0d 92       	st	X+, r0
     2c0:	a2 38       	cpi	r26, 0x82	; 130
     2c2:	b1 07       	cpc	r27, r17
     2c4:	d9 f7       	brne	.-10     	; 0x2bc <__do_copy_data+0x10>

000002c6 <__do_clear_bss>:
     2c6:	25 e0       	ldi	r18, 0x05	; 5
     2c8:	a2 e8       	ldi	r26, 0x82	; 130
     2ca:	b3 e0       	ldi	r27, 0x03	; 3
     2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <.do_clear_bss_start>

000002ce <.do_clear_bss_loop>:
     2ce:	1d 92       	st	X+, r1

000002d0 <.do_clear_bss_start>:
     2d0:	ad 33       	cpi	r26, 0x3D	; 61
     2d2:	b2 07       	cpc	r27, r18
     2d4:	e1 f7       	brne	.-8      	; 0x2ce <.do_clear_bss_loop>

000002d6 <__do_global_ctors>:
     2d6:	11 e0       	ldi	r17, 0x01	; 1
     2d8:	ce e4       	ldi	r28, 0x4E	; 78
     2da:	d1 e0       	ldi	r29, 0x01	; 1
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	06 c0       	rjmp	.+12     	; 0x2ec <__do_global_ctors+0x16>
     2e0:	21 97       	sbiw	r28, 0x01	; 1
     2e2:	01 09       	sbc	r16, r1
     2e4:	80 2f       	mov	r24, r16
     2e6:	fe 01       	movw	r30, r28
     2e8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__tablejump2__>
     2ec:	cc 34       	cpi	r28, 0x4C	; 76
     2ee:	d1 07       	cpc	r29, r17
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	08 07       	cpc	r16, r24
     2f4:	a9 f7       	brne	.-22     	; 0x2e0 <__do_global_ctors+0xa>
     2f6:	0e 94 cf 09 	call	0x139e	; 0x139e <main>
     2fa:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <_exit>

000002fe <__bad_interrupt>:
     2fe:	80 ce       	rjmp	.-768    	; 0x0 <__vectors>

00000300 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     300:	61 15       	cp	r22, r1
     302:	71 05       	cpc	r23, r1
     304:	79 f0       	breq	.+30     	; 0x324 <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
     306:	fb 01       	movw	r30, r22
     308:	01 90       	ld	r0, Z+
     30a:	00 20       	and	r0, r0
     30c:	e9 f7       	brne	.-6      	; 0x308 <_ZN5Print5writeEPKc+0x8>
     30e:	31 97       	sbiw	r30, 0x01	; 1
     310:	af 01       	movw	r20, r30
     312:	46 1b       	sub	r20, r22
     314:	57 0b       	sbc	r21, r23
     316:	dc 01       	movw	r26, r24
     318:	ed 91       	ld	r30, X+
     31a:	fc 91       	ld	r31, X
     31c:	02 80       	ldd	r0, Z+2	; 0x02
     31e:	f3 81       	ldd	r31, Z+3	; 0x03
     320:	e0 2d       	mov	r30, r0
     322:	19 94       	eijmp
    }
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	08 95       	ret

0000032a <_Z13lcdMenuLoaderii>:
#include "MenuControl.h"

void lcdMenuLoader(int menuStage = 0, int ns = 0)
{
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	eb 01       	movw	r28, r22
	switch (menuStage)
     330:	8b 30       	cpi	r24, 0x0B	; 11
     332:	91 05       	cpc	r25, r1
     334:	08 f0       	brcs	.+2      	; 0x338 <_Z13lcdMenuLoaderii+0xe>
     336:	5f c1       	rjmp	.+702    	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     338:	fc 01       	movw	r30, r24
		break;
		
		//Window control menu
		//ns1 = window is open, ns2 = window is closed
		case 10:
			lcd.setCursor(0, 0);
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	60 e0       	ldi	r22, 0x00	; 0
#include "MenuControl.h"

void lcdMenuLoader(int menuStage = 0, int ns = 0)
{
	switch (menuStage)
     33e:	88 27       	eor	r24, r24
     340:	ee 58       	subi	r30, 0x8E	; 142
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	8f 4f       	sbci	r24, 0xFF	; 255
     346:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__tablejump2__>
	{
		//Main menu
		case 0:
			lcd.setCursor(0, 0);
     34a:	86 ee       	ldi	r24, 0xE6	; 230
     34c:	93 e0       	ldi	r25, 0x03	; 3
     34e:	9e d2       	rcall	.+1340   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("<>Chose Option<>");
     350:	6f e1       	ldi	r22, 0x1F	; 31
     352:	72 e0       	ldi	r23, 0x02	; 2
     354:	86 ee       	ldi	r24, 0xE6	; 230
     356:	93 e0       	ldi	r25, 0x03	; 3
     358:	d3 df       	rcall	.-90     	; 0x300 <_ZN5Print5writeEPKc>
			lcd.setCursor(0, 1);
     35a:	41 e0       	ldi	r20, 0x01	; 1
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	86 ee       	ldi	r24, 0xE6	; 230
     360:	93 e0       	ldi	r25, 0x03	; 3
     362:	94 d2       	rcall	.+1320   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("A<Heat");
     364:	60 e3       	ldi	r22, 0x30	; 48
     366:	72 e0       	ldi	r23, 0x02	; 2
     368:	86 ee       	ldi	r24, 0xE6	; 230
     36a:	93 e0       	ldi	r25, 0x03	; 3
     36c:	c9 df       	rcall	.-110    	; 0x300 <_ZN5Print5writeEPKc>
			lcd.setCursor(8, 1);
     36e:	41 e0       	ldi	r20, 0x01	; 1
     370:	68 e0       	ldi	r22, 0x08	; 8
     372:	86 ee       	ldi	r24, 0xE6	; 230
     374:	93 e0       	ldi	r25, 0x03	; 3
     376:	8a d2       	rcall	.+1300   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Lights>B");
     378:	67 e3       	ldi	r22, 0x37	; 55
     37a:	72 e0       	ldi	r23, 0x02	; 2
		break;
		
#pragma region Heat Menus
		//Heat menu
		case 1:
			lcd.setCursor(0, 0);
     37c:	4d c1       	rjmp	.+666    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     37e:	86 ee       	ldi	r24, 0xE6	; 230
     380:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("A<Fan");
     382:	84 d2       	rcall	.+1288   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     384:	60 e4       	ldi	r22, 0x40	; 64
     386:	72 e0       	ldi	r23, 0x02	; 2
     388:	86 ee       	ldi	r24, 0xE6	; 230
     38a:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(9 ,0);
     38c:	b9 df       	rcall	.-142    	; 0x300 <_ZN5Print5writeEPKc>
     38e:	40 e0       	ldi	r20, 0x00	; 0
     390:	69 e0       	ldi	r22, 0x09	; 9
     392:	86 ee       	ldi	r24, 0xE6	; 230
     394:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("Temps>B");
     396:	7a d2       	rcall	.+1268   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     398:	66 e4       	ldi	r22, 0x46	; 70
     39a:	72 e0       	ldi	r23, 0x02	; 2
     39c:	86 ee       	ldi	r24, 0xE6	; 230
     39e:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(0, 1);
     3a0:	af df       	rcall	.-162    	; 0x300 <_ZN5Print5writeEPKc>
     3a2:	41 e0       	ldi	r20, 0x01	; 1
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	86 ee       	ldi	r24, 0xE6	; 230
     3a8:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("C<Window");
     3aa:	70 d2       	rcall	.+1248   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     3ac:	6e e4       	ldi	r22, 0x4E	; 78
     3ae:	72 e0       	ldi	r23, 0x02	; 2
     3b0:	86 ee       	ldi	r24, 0xE6	; 230
     3b2:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(10, 1);
     3b4:	a5 df       	rcall	.-182    	; 0x300 <_ZN5Print5writeEPKc>
     3b6:	41 e0       	ldi	r20, 0x01	; 1
     3b8:	6a e0       	ldi	r22, 0x0A	; 10
     3ba:	86 ee       	ldi	r24, 0xE6	; 230
     3bc:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("Back>D");
     3be:	66 d2       	rcall	.+1228   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     3c0:	67 e5       	ldi	r22, 0x57	; 87
     3c2:	72 e0       	ldi	r23, 0x02	; 2
			lcd.write("Back>B");
		break;
		
		//Fan Control menu if Auto Mode is off
		case 3:
			lcd.setCursor(0, 0);
     3c4:	29 c1       	rjmp	.+594    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     3c6:	86 ee       	ldi	r24, 0xE6	; 230
     3c8:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("<>Fan Controls<>");
     3ca:	60 d2       	rcall	.+1216   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     3cc:	6e e7       	ldi	r22, 0x7E	; 126
     3ce:	72 e0       	ldi	r23, 0x02	; 2
     3d0:	86 ee       	ldi	r24, 0xE6	; 230
     3d2:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(0, 1);
     3d4:	95 df       	rcall	.-214    	; 0x300 <_ZN5Print5writeEPKc>
     3d6:	41 e0       	ldi	r20, 0x01	; 1
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	86 ee       	ldi	r24, 0xE6	; 230
     3dc:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("A<T.Auto");
     3de:	56 d2       	rcall	.+1196   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     3e0:	6f e8       	ldi	r22, 0x8F	; 143
     3e2:	72 e0       	ldi	r23, 0x02	; 2
     3e4:	86 ee       	ldi	r24, 0xE6	; 230
     3e6:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(9, 1);
     3e8:	8b df       	rcall	.-234    	; 0x300 <_ZN5Print5writeEPKc>
     3ea:	41 e0       	ldi	r20, 0x01	; 1
     3ec:	69 e0       	ldi	r22, 0x09	; 9
     3ee:	86 ee       	ldi	r24, 0xE6	; 230
     3f0:	93 e0       	ldi	r25, 0x03	; 3
     3f2:	4c d2       	rcall	.+1176   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Speed>B");
     3f4:	68 e9       	ldi	r22, 0x98	; 152
     3f6:	72 e0       	ldi	r23, 0x02	; 2
     3f8:	0f c1       	rjmp	.+542    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
		break;
		
		//Fan Speed Control menu
		case 4:
			lcd.setCursor(0, 0);
     3fa:	86 ee       	ldi	r24, 0xE6	; 230
     3fc:	93 e0       	ldi	r25, 0x03	; 3
     3fe:	46 d2       	rcall	.+1164   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     400:	60 ea       	ldi	r22, 0xA0	; 160
			lcd.write("Speed:"); lcd.print(currentFanSpeed); lcd.write("%");
     402:	72 e0       	ldi	r23, 0x02	; 2
     404:	86 ee       	ldi	r24, 0xE6	; 230
     406:	93 e0       	ldi	r25, 0x03	; 3
     408:	7b df       	rcall	.-266    	; 0x300 <_ZN5Print5writeEPKc>
     40a:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <currentFanSpeed>
     40e:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <currentFanSpeed+0x1>
     412:	4a e0       	ldi	r20, 0x0A	; 10
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	86 ee       	ldi	r24, 0xE6	; 230
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	0e 94 97 0a 	call	0x152e	; 0x152e <_ZN5Print5printEii>
     41e:	67 ea       	ldi	r22, 0xA7	; 167
     420:	72 e0       	ldi	r23, 0x02	; 2
     422:	86 ee       	ldi	r24, 0xE6	; 230
     424:	93 e0       	ldi	r25, 0x03	; 3
     426:	6c df       	rcall	.-296    	; 0x300 <_ZN5Print5writeEPKc>
#pragma endregion
		
#pragma region Temperature Menus
		//Temperature Menu
		case 5:
			lcd.setCursor(0, 0);
     428:	5a c0       	rjmp	.+180    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     42a:	86 ee       	ldi	r24, 0xE6	; 230
     42c:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("<>Temperatures<>");
     42e:	2e d2       	rcall	.+1116   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     430:	6e eb       	ldi	r22, 0xBE	; 190
     432:	72 e0       	ldi	r23, 0x02	; 2
     434:	86 ee       	ldi	r24, 0xE6	; 230
     436:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(0, 1);
     438:	63 df       	rcall	.-314    	; 0x300 <_ZN5Print5writeEPKc>
     43a:	41 e0       	ldi	r20, 0x01	; 1
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	86 ee       	ldi	r24, 0xE6	; 230
     440:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("A<Set");
     442:	24 d2       	rcall	.+1096   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     444:	6f ec       	ldi	r22, 0xCF	; 207
     446:	72 e0       	ldi	r23, 0x02	; 2
     448:	86 ee       	ldi	r24, 0xE6	; 230
     44a:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(9, 1);
     44c:	59 df       	rcall	.-334    	; 0x300 <_ZN5Print5writeEPKc>
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	69 e0       	ldi	r22, 0x09	; 9
     452:	86 ee       	ldi	r24, 0xE6	; 230
     454:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("Check>B");
     456:	1a d2       	rcall	.+1076   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     458:	65 ed       	ldi	r22, 0xD5	; 213
		break;
		
		//Set temperature Menu
		case 6:
			lcd.setCursor(0, 0);
     45a:	72 e0       	ldi	r23, 0x02	; 2
     45c:	dd c0       	rjmp	.+442    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     45e:	86 ee       	ldi	r24, 0xE6	; 230
			lcd.write("<->Chose Room<->");
     460:	93 e0       	ldi	r25, 0x03	; 3
     462:	14 d2       	rcall	.+1064   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     464:	6d ed       	ldi	r22, 0xDD	; 221
     466:	72 e0       	ldi	r23, 0x02	; 2
     468:	86 ee       	ldi	r24, 0xE6	; 230
			lcd.setCursor(0, 1);
     46a:	93 e0       	ldi	r25, 0x03	; 3
     46c:	49 df       	rcall	.-366    	; 0x300 <_ZN5Print5writeEPKc>
     46e:	41 e0       	ldi	r20, 0x01	; 1
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	86 ee       	ldi	r24, 0xE6	; 230
     474:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("A<Dining");
     476:	0a d2       	rcall	.+1044   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     478:	6e ee       	ldi	r22, 0xEE	; 238
     47a:	72 e0       	ldi	r23, 0x02	; 2
     47c:	86 ee       	ldi	r24, 0xE6	; 230
     47e:	93 e0       	ldi	r25, 0x03	; 3
     480:	3f df       	rcall	.-386    	; 0x300 <_ZN5Print5writeEPKc>
			lcd.setCursor(10, 1);
     482:	41 e0       	ldi	r20, 0x01	; 1
     484:	6a e0       	ldi	r22, 0x0A	; 10
     486:	86 ee       	ldi	r24, 0xE6	; 230
     488:	93 e0       	ldi	r25, 0x03	; 3
     48a:	00 d2       	rcall	.+1024   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     48c:	67 ef       	ldi	r22, 0xF7	; 247
			lcd.write("Kids>B");
     48e:	72 e0       	ldi	r23, 0x02	; 2
     490:	c3 c0       	rjmp	.+390    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     492:	86 ee       	ldi	r24, 0xE6	; 230
		break;
		
		//Set temperatures for room Menu
		//ns1 = Dining Room, ns2 = Kids Room
		case 7:
			lcd.setCursor(0, 0);
     494:	93 e0       	ldi	r25, 0x03	; 3
     496:	fa d1       	rcall	.+1012   	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     498:	6e ef       	ldi	r22, 0xFE	; 254
			lcd.write("Set:"); 
     49a:	72 e0       	ldi	r23, 0x02	; 2
     49c:	86 ee       	ldi	r24, 0xE6	; 230
     49e:	93 e0       	ldi	r25, 0x03	; 3
     4a0:	2f df       	rcall	.-418    	; 0x300 <_ZN5Print5writeEPKc>
     4a2:	c1 30       	cpi	r28, 0x01	; 1
			if (ns == 1)
     4a4:	d1 05       	cpc	r29, r1
     4a6:	29 f4       	brne	.+10     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
			{
				lcd.print(currentSetTemperatureDining); 
     4a8:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <currentSetTemperatureDining>
     4ac:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <currentSetTemperatureDining+0x1>
			}
			else if (ns == 2)
     4b0:	06 c0       	rjmp	.+12     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4b2:	22 97       	sbiw	r28, 0x02	; 2
			{
				lcd.print(currentSetTemperatureKids);
     4b4:	59 f4       	brne	.+22     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4b6:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <currentSetTemperatureKids>
     4ba:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <currentSetTemperatureKids+0x1>
     4be:	4a e0       	ldi	r20, 0x0A	; 10
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	86 ee       	ldi	r24, 0xE6	; 230
     4c4:	93 e0       	ldi	r25, 0x03	; 3
			}
			else
			{
				lcd.write("??");
     4c6:	0e 94 97 0a 	call	0x152e	; 0x152e <_ZN5Print5printEii>
     4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4cc:	63 e0       	ldi	r22, 0x03	; 3
     4ce:	73 e0       	ldi	r23, 0x03	; 3
			}
			lcd.write(223);
     4d0:	86 ee       	ldi	r24, 0xE6	; 230
     4d2:	93 e0       	ldi	r25, 0x03	; 3
     4d4:	15 df       	rcall	.-470    	; 0x300 <_ZN5Print5writeEPKc>
     4d6:	6f ed       	ldi	r22, 0xDF	; 223
			lcd.setCursor(10, 0);
     4d8:	86 ee       	ldi	r24, 0xE6	; 230
     4da:	93 e0       	ldi	r25, 0x03	; 3
     4dc:	9c d2       	rcall	.+1336   	; 0xa16 <_ZN13LiquidCrystal5writeEh>
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	6a e0       	ldi	r22, 0x0A	; 10
			lcd.write("Done>A");
     4e2:	86 ee       	ldi	r24, 0xE6	; 230
     4e4:	93 e0       	ldi	r25, 0x03	; 3
     4e6:	d2 d1       	rcall	.+932    	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     4e8:	69 ea       	ldi	r22, 0xA9	; 169
     4ea:	72 e0       	ldi	r23, 0x02	; 2
			lcd.setCursor(0, 1);
     4ec:	86 ee       	ldi	r24, 0xE6	; 230
     4ee:	93 e0       	ldi	r25, 0x03	; 3
     4f0:	07 df       	rcall	.-498    	; 0x300 <_ZN5Print5writeEPKc>
     4f2:	41 e0       	ldi	r20, 0x01	; 1
     4f4:	60 e0       	ldi	r22, 0x00	; 0
			lcd.write("B<Dec.");
     4f6:	86 ee       	ldi	r24, 0xE6	; 230
     4f8:	93 e0       	ldi	r25, 0x03	; 3
     4fa:	c8 d1       	rcall	.+912    	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     4fc:	60 eb       	ldi	r22, 0xB0	; 176
     4fe:	72 e0       	ldi	r23, 0x02	; 2
			lcd.setCursor(10, 1);
     500:	86 ee       	ldi	r24, 0xE6	; 230
     502:	93 e0       	ldi	r25, 0x03	; 3
     504:	fd de       	rcall	.-518    	; 0x300 <_ZN5Print5writeEPKc>
     506:	41 e0       	ldi	r20, 0x01	; 1
     508:	6a e0       	ldi	r22, 0x0A	; 10
			lcd.write("Inc.>C");
     50a:	86 ee       	ldi	r24, 0xE6	; 230
     50c:	93 e0       	ldi	r25, 0x03	; 3
		break;
		
		//Current temperatures menu
		case 8:
			lcd.setCursor(0, 0);
     50e:	be d1       	rcall	.+892    	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     510:	67 eb       	ldi	r22, 0xB7	; 183
     512:	72 e0       	ldi	r23, 0x02	; 2
			lcd.write("Dining:"); lcd.print(currentTemperaturesDining); lcd.write(223);
     514:	81 c0       	rjmp	.+258    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     516:	86 ee       	ldi	r24, 0xE6	; 230
     518:	93 e0       	ldi	r25, 0x03	; 3
     51a:	b8 d1       	rcall	.+880    	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     51c:	66 e0       	ldi	r22, 0x06	; 6
     51e:	73 e0       	ldi	r23, 0x03	; 3
     520:	86 ee       	ldi	r24, 0xE6	; 230
     522:	93 e0       	ldi	r25, 0x03	; 3
     524:	ed de       	rcall	.-550    	; 0x300 <_ZN5Print5writeEPKc>
     526:	60 91 00 04 	lds	r22, 0x0400	; 0x800400 <currentTemperaturesDining>
     52a:	70 91 01 04 	lds	r23, 0x0401	; 0x800401 <currentTemperaturesDining+0x1>
     52e:	4a e0       	ldi	r20, 0x0A	; 10
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	86 ee       	ldi	r24, 0xE6	; 230
     534:	93 e0       	ldi	r25, 0x03	; 3
     536:	fb d7       	rcall	.+4086   	; 0x152e <_ZN5Print5printEii>
			lcd.setCursor(10, 0);
     538:	6f ed       	ldi	r22, 0xDF	; 223
     53a:	86 ee       	ldi	r24, 0xE6	; 230
     53c:	93 e0       	ldi	r25, 0x03	; 3
     53e:	6b d2       	rcall	.+1238   	; 0xa16 <_ZN13LiquidCrystal5writeEh>
     540:	40 e0       	ldi	r20, 0x00	; 0
			lcd.write("Done>A");
     542:	6a e0       	ldi	r22, 0x0A	; 10
     544:	86 ee       	ldi	r24, 0xE6	; 230
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	a1 d1       	rcall	.+834    	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     54a:	69 ea       	ldi	r22, 0xA9	; 169
			lcd.setCursor(0, 1);
     54c:	72 e0       	ldi	r23, 0x02	; 2
     54e:	86 ee       	ldi	r24, 0xE6	; 230
     550:	93 e0       	ldi	r25, 0x03	; 3
     552:	d6 de       	rcall	.-596    	; 0x300 <_ZN5Print5writeEPKc>
     554:	41 e0       	ldi	r20, 0x01	; 1
			lcd.write("Kids:  "); lcd.print(currentTemperaturesKids); lcd.write(223);
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	86 ee       	ldi	r24, 0xE6	; 230
     55a:	93 e0       	ldi	r25, 0x03	; 3
     55c:	97 d1       	rcall	.+814    	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     55e:	6e e0       	ldi	r22, 0x0E	; 14
     560:	73 e0       	ldi	r23, 0x03	; 3
     562:	86 ee       	ldi	r24, 0xE6	; 230
     564:	93 e0       	ldi	r25, 0x03	; 3
     566:	cc de       	rcall	.-616    	; 0x300 <_ZN5Print5writeEPKc>
     568:	60 91 fe 03 	lds	r22, 0x03FE	; 0x8003fe <currentTemperaturesKids>
     56c:	70 91 ff 03 	lds	r23, 0x03FF	; 0x8003ff <currentTemperaturesKids+0x1>
     570:	4a e0       	ldi	r20, 0x0A	; 10
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	86 ee       	ldi	r24, 0xE6	; 230
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	da d7       	rcall	.+4020   	; 0x152e <_ZN5Print5printEii>
			lcd.setCursor(11, 1);
     57a:	6f ed       	ldi	r22, 0xDF	; 223
     57c:	86 ee       	ldi	r24, 0xE6	; 230
     57e:	93 e0       	ldi	r25, 0x03	; 3
     580:	4a d2       	rcall	.+1172   	; 0xa16 <_ZN13LiquidCrystal5writeEh>
     582:	41 e0       	ldi	r20, 0x01	; 1
			lcd.write("Set>B");
     584:	6b e0       	ldi	r22, 0x0B	; 11
     586:	86 ee       	ldi	r24, 0xE6	; 230
#pragma endregion

#pragma region Windows Menus
		//Window menu if Auto Mode is on
		case 9:
			lcd.setCursor(0, 0);
     588:	93 e0       	ldi	r25, 0x03	; 3
     58a:	80 d1       	rcall	.+768    	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     58c:	66 e1       	ldi	r22, 0x16	; 22
     58e:	73 e0       	ldi	r23, 0x03	; 3
			lcd.write("Auto Mode is on!");
     590:	43 c0       	rjmp	.+134    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     592:	86 ee       	ldi	r24, 0xE6	; 230
     594:	93 e0       	ldi	r25, 0x03	; 3
     596:	7a d1       	rcall	.+756    	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     598:	6e e5       	ldi	r22, 0x5E	; 94
			lcd.setCursor(0, 1);
     59a:	72 e0       	ldi	r23, 0x02	; 2
     59c:	86 ee       	ldi	r24, 0xE6	; 230
     59e:	93 e0       	ldi	r25, 0x03	; 3
     5a0:	af de       	rcall	.-674    	; 0x300 <_ZN5Print5writeEPKc>
     5a2:	41 e0       	ldi	r20, 0x01	; 1
			lcd.write("A<T.Off");
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	86 ee       	ldi	r24, 0xE6	; 230
		break;
		
		//Window control menu
		//ns1 = window is open, ns2 = window is closed
		case 10:
			lcd.setCursor(0, 0);
     5a8:	93 e0       	ldi	r25, 0x03	; 3
     5aa:	70 d1       	rcall	.+736    	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     5ac:	6f e6       	ldi	r22, 0x6F	; 111
     5ae:	72 e0       	ldi	r23, 0x02	; 2
			lcd.write("<>Window Cont.<>");
     5b0:	17 c0       	rjmp	.+46     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5b2:	86 ee       	ldi	r24, 0xE6	; 230
     5b4:	93 e0       	ldi	r25, 0x03	; 3
     5b6:	6a d1       	rcall	.+724    	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     5b8:	6c e1       	ldi	r22, 0x1C	; 28
			lcd.setCursor(0, 1);
     5ba:	73 e0       	ldi	r23, 0x03	; 3
     5bc:	86 ee       	ldi	r24, 0xE6	; 230
     5be:	93 e0       	ldi	r25, 0x03	; 3
     5c0:	9f de       	rcall	.-706    	; 0x300 <_ZN5Print5writeEPKc>
     5c2:	41 e0       	ldi	r20, 0x01	; 1
     5c4:	60 e0       	ldi	r22, 0x00	; 0
			if (ns == 1)
     5c6:	86 ee       	ldi	r24, 0xE6	; 230
     5c8:	93 e0       	ldi	r25, 0x03	; 3
     5ca:	60 d1       	rcall	.+704    	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
			{
				lcd.write("A<Close");
     5cc:	c1 30       	cpi	r28, 0x01	; 1
     5ce:	d1 05       	cpc	r29, r1
     5d0:	19 f4       	brne	.+6      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
			}
			else if (ns == 2)
     5d2:	6d e2       	ldi	r22, 0x2D	; 45
     5d4:	73 e0       	ldi	r23, 0x03	; 3
			{
				lcd.write("A<Open");
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5d8:	22 97       	sbiw	r28, 0x02	; 2
     5da:	29 f4       	brne	.+10     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
     5dc:	65 e3       	ldi	r22, 0x35	; 53
     5de:	73 e0       	ldi	r23, 0x03	; 3
     5e0:	86 ee       	ldi	r24, 0xE6	; 230
			}
			lcd.setCursor(10, 1);
     5e2:	93 e0       	ldi	r25, 0x03	; 3
     5e4:	8d de       	rcall	.-742    	; 0x300 <_ZN5Print5writeEPKc>
     5e6:	41 e0       	ldi	r20, 0x01	; 1
     5e8:	6a e0       	ldi	r22, 0x0A	; 10
     5ea:	86 ee       	ldi	r24, 0xE6	; 230
     5ec:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("Back>B");
     5ee:	4e d1       	rcall	.+668    	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     5f0:	67 e7       	ldi	r22, 0x77	; 119
     5f2:	72 e0       	ldi	r23, 0x02	; 2

#pragma endregion
		
		//Error menu
		default:
			lcd.setCursor(0, 0);
     5f4:	11 c0       	rjmp	.+34     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	86 ee       	ldi	r24, 0xE6	; 230
     5fc:	93 e0       	ldi	r25, 0x03	; 3
     5fe:	46 d1       	rcall	.+652    	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Unknown Stage!");
     600:	6c e3       	ldi	r22, 0x3C	; 60
     602:	73 e0       	ldi	r23, 0x03	; 3
     604:	86 ee       	ldi	r24, 0xE6	; 230
     606:	93 e0       	ldi	r25, 0x03	; 3
     608:	7b de       	rcall	.-778    	; 0x300 <_ZN5Print5writeEPKc>
     60a:	41 e0       	ldi	r20, 0x01	; 1
			lcd.setCursor(0, 1);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	86 ee       	ldi	r24, 0xE6	; 230
     610:	93 e0       	ldi	r25, 0x03	; 3
     612:	3c d1       	rcall	.+632    	; 0x88c <_ZN13LiquidCrystal9setCursorEhh>
     614:	6b e4       	ldi	r22, 0x4B	; 75
     616:	73 e0       	ldi	r23, 0x03	; 3
			lcd.write("Try \"Reset\"!!!");
     618:	86 ee       	ldi	r24, 0xE6	; 230
     61a:	93 e0       	ldi	r25, 0x03	; 3
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
		break;
	}
     620:	6f ce       	rjmp	.-802    	; 0x300 <_ZN5Print5writeEPKc>

00000622 <setup>:
Keypad kpd = Keypad(makeKeymap(Keys), rowPins, colPins, Rows, Cols);
#pragma endregion

void setup() 
{
	lcd.begin(16, 2);
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	42 e0       	ldi	r20, 0x02	; 2
     626:	60 e1       	ldi	r22, 0x10	; 16
     628:	86 ee       	ldi	r24, 0xE6	; 230
     62a:	93 e0       	ldi	r25, 0x03	; 3
     62c:	48 c1       	rjmp	.+656    	; 0x8be <_ZN13LiquidCrystal5beginEhhh>

0000062e <loop>:
	
}

void loop() 
{
	lcdMenuLoader(8, NULL);
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	88 e0       	ldi	r24, 0x08	; 8
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	79 de       	rcall	.-782    	; 0x32a <_Z13lcdMenuLoaderii>
	GetCurrentTemperature();
     638:	ac c3       	rjmp	.+1880   	; 0xd92 <_Z21GetCurrentTemperaturev>

0000063a <_GLOBAL__sub_I_motorPin>:
     63a:	cf 92       	push	r12
}
     63c:	ef 92       	push	r14
     63e:	0f 93       	push	r16

#pragma region LCD setup
//LCD is connected to these pins
const int rs = 8, en = 9, d4 = 10, d5 = 11, d6 = 12, d7 = 13;

LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
     640:	8d e0       	ldi	r24, 0x0D	; 13
     642:	c8 2e       	mov	r12, r24
     644:	9c e0       	ldi	r25, 0x0C	; 12
     646:	e9 2e       	mov	r14, r25
     648:	0b e0       	ldi	r16, 0x0B	; 11
     64a:	2a e0       	ldi	r18, 0x0A	; 10
     64c:	49 e0       	ldi	r20, 0x09	; 9
     64e:	68 e0       	ldi	r22, 0x08	; 8
     650:	86 ee       	ldi	r24, 0xE6	; 230
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	c1 d1       	rcall	.+898    	; 0x9d8 <_ZN13LiquidCrystalC1Ehhhhhh>
// Connected keypad ROW0, ROW1, ROW2 and ROW3 to these pins.
byte rowPins[Rows] = {29, 28, 27, 26};
// Connected keypad COL0, COL1 and COL2 to these pins.
byte colPins[Cols] = {25, 24, 23, 22};
	
Keypad kpd = Keypad(makeKeymap(Keys), rowPins, colPins, Rows, Cols);
     656:	24 e0       	ldi	r18, 0x04	; 4
     658:	e2 2e       	mov	r14, r18
     65a:	04 e0       	ldi	r16, 0x04	; 4
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	32 e0       	ldi	r19, 0x02	; 2
     660:	44 e0       	ldi	r20, 0x04	; 4
     662:	52 e0       	ldi	r21, 0x02	; 2
     664:	68 e0       	ldi	r22, 0x08	; 8
     666:	72 e0       	ldi	r23, 0x02	; 2
     668:	82 e8       	ldi	r24, 0x82	; 130
     66a:	93 e0       	ldi	r25, 0x03	; 3
     66c:	14 d0       	rcall	.+40     	; 0x696 <_ZN6KeypadC1EPcPhS1_hh>

void loop() 
{
	lcdMenuLoader(8, NULL);
	GetCurrentTemperature();
}
     66e:	0f 91       	pop	r16
     670:	ef 90       	pop	r14
     672:	cf 90       	pop	r12
     674:	08 95       	ret

00000676 <_ZN3KeyC1Ev>:
*/
#include <Key.h>


// default constructor
Key::Key() {
     676:	fc 01       	movw	r30, r24
	kchar = NO_KEY;
     678:	10 82       	st	Z, r1
	kstate = IDLE;
     67a:	13 82       	std	Z+3, r1	; 0x03
	stateChanged = false;
     67c:	14 82       	std	Z+4, r1	; 0x04
     67e:	08 95       	ret

00000680 <_ZN6Keypad8pin_readEh>:

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
	virtual void pin_write(byte pinNum, boolean level) { digitalWrite(pinNum, level); }
	virtual int  pin_read(byte pinNum) { return digitalRead(pinNum); }
     680:	86 2f       	mov	r24, r22
     682:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <digitalRead>

00000686 <_ZN6Keypad9pin_writeEhb>:
public:

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
	virtual void pin_write(byte pinNum, boolean level) { digitalWrite(pinNum, level); }
     686:	86 2f       	mov	r24, r22
     688:	64 2f       	mov	r22, r20
     68a:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <digitalWrite>

0000068e <_ZN6Keypad8pin_modeEhh>:
class Keypad : public Key {
public:

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
     68e:	86 2f       	mov	r24, r22
     690:	64 2f       	mov	r22, r20
     692:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <pinMode>

00000696 <_ZN6KeypadC1EPcPhS1_hh>:
||
*/
#include <Keypad.h>

// <<constructor>> Allows custom keymap, pin configuration, and keypad sizes.
Keypad::Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols) {
     696:	4f 92       	push	r4
     698:	5f 92       	push	r5
     69a:	6f 92       	push	r6
     69c:	7f 92       	push	r7
     69e:	8f 92       	push	r8
     6a0:	9f 92       	push	r9
     6a2:	af 92       	push	r10
     6a4:	bf 92       	push	r11
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	0f 93       	push	r16
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	ec 01       	movw	r28, r24
     6b4:	6b 01       	movw	r12, r22
     6b6:	4a 01       	movw	r8, r20
     6b8:	59 01       	movw	r10, r18
     6ba:	02 96       	adiw	r24, 0x02	; 2
     6bc:	dc df       	rcall	.-72     	; 0x676 <_ZN3KeyC1Ev>
     6be:	8e e5       	ldi	r24, 0x5E	; 94
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	99 83       	std	Y+1, r25	; 0x01
     6c4:	88 83       	st	Y, r24
     6c6:	2e 01       	movw	r4, r28
     6c8:	8b e1       	ldi	r24, 0x1B	; 27
     6ca:	48 0e       	add	r4, r24
     6cc:	51 1c       	adc	r5, r1
     6ce:	3e 01       	movw	r6, r28
     6d0:	8d e4       	ldi	r24, 0x4D	; 77
     6d2:	68 0e       	add	r6, r24
     6d4:	71 1c       	adc	r7, r1
     6d6:	c2 01       	movw	r24, r4
     6d8:	ce df       	rcall	.-100    	; 0x676 <_ZN3KeyC1Ev>
     6da:	85 e0       	ldi	r24, 0x05	; 5
     6dc:	48 0e       	add	r4, r24
     6de:	51 1c       	adc	r5, r1
     6e0:	46 14       	cp	r4, r6
     6e2:	57 04       	cpc	r5, r7
     6e4:	c1 f7       	brne	.-16     	; 0x6d6 <_ZN6KeypadC1EPcPhS1_hh+0x40>
	rowPins = row;
     6e6:	fe 01       	movw	r30, r28
     6e8:	e9 5a       	subi	r30, 0xA9	; 169
     6ea:	ff 4f       	sbci	r31, 0xFF	; 255
     6ec:	91 82       	std	Z+1, r9	; 0x01
     6ee:	80 82       	st	Z, r8
	columnPins = col;
     6f0:	32 96       	adiw	r30, 0x02	; 2
     6f2:	b1 82       	std	Z+1, r11	; 0x01
     6f4:	a0 82       	st	Z, r10
	sizeKpd.rows = numRows;
     6f6:	32 96       	adiw	r30, 0x02	; 2
     6f8:	00 83       	st	Z, r16
	sizeKpd.columns = numCols;
     6fa:	31 96       	adiw	r30, 0x01	; 1
     6fc:	e0 82       	st	Z, r14
	single_key = false;
}

// Let the user define a keymap - assume the same row/column count as defined in constructor
void Keypad::begin(char *userKeymap) {
    keymap = userKeymap;
     6fe:	37 97       	sbiw	r30, 0x07	; 7
     700:	d1 82       	std	Z+1, r13	; 0x01
     702:	c0 82       	st	Z, r12
	return sizeof(key)/sizeof(Key);
}

// Minimum debounceTime is 1 mS. Any lower *will* slow down the loop().
void Keypad::setDebounceTime(uint debounce) {
	debounce<1 ? debounceTime=1 : debounceTime=debounce;
     704:	38 96       	adiw	r30, 0x08	; 8
     706:	8a e0       	ldi	r24, 0x0A	; 10
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	91 83       	std	Z+1, r25	; 0x01
     70c:	80 83       	st	Z, r24
}

void Keypad::setHoldTime(uint hold) {
    holdTime = hold;
     70e:	32 96       	adiw	r30, 0x02	; 2
     710:	84 ef       	ldi	r24, 0xF4	; 244
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	91 83       	std	Z+1, r25	; 0x01
     716:	80 83       	st	Z, r24

	begin(userKeymap);

	setDebounceTime(10);
	setHoldTime(500);
	keypadEventListener = 0;
     718:	33 96       	adiw	r30, 0x03	; 3
     71a:	11 82       	std	Z+1, r1	; 0x01
     71c:	10 82       	st	Z, r1

	startTime = 0;
     71e:	71 97       	sbiw	r30, 0x11	; 17
     720:	10 82       	st	Z, r1
     722:	11 82       	std	Z+1, r1	; 0x01
     724:	12 82       	std	Z+2, r1	; 0x02
     726:	13 82       	std	Z+3, r1	; 0x03
	single_key = false;
     728:	cf 59       	subi	r28, 0x9F	; 159
     72a:	df 4f       	sbci	r29, 0xFF	; 255
     72c:	18 82       	st	Y, r1
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	0f 91       	pop	r16
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	bf 90       	pop	r11
     73c:	af 90       	pop	r10
     73e:	9f 90       	pop	r9
     740:	8f 90       	pop	r8
     742:	7f 90       	pop	r7
     744:	6f 90       	pop	r6
     746:	5f 90       	pop	r5
     748:	4f 90       	pop	r4
     74a:	08 95       	ret

0000074c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	08 95       	ret

00000752 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     752:	08 95       	ret

00000754 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	ec 01       	movw	r28, r24
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	8e 81       	ldd	r24, Y+6	; 0x06
     75e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <digitalWrite>
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	33 d7       	rcall	.+3686   	; 0x15ce <delayMicroseconds>
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	8e 81       	ldd	r24, Y+6	; 0x06
     76c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <digitalWrite>
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	2c d7       	rcall	.+3672   	; 0x15ce <delayMicroseconds>
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	8e 81       	ldd	r24, Y+6	; 0x06
     77a:	0e 94 0a 0c 	call	0x1814	; 0x1814 <digitalWrite>
     77e:	84 e6       	ldi	r24, 0x64	; 100
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	23 c7       	rjmp	.+3654   	; 0x15ce <delayMicroseconds>

00000788 <_ZN13LiquidCrystal10write4bitsEh>:
     788:	cf 92       	push	r12
     78a:	df 92       	push	r13
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	6c 01       	movw	r12, r24
     79a:	7c 01       	movw	r14, r24
     79c:	87 e0       	ldi	r24, 0x07	; 7
     79e:	e8 0e       	add	r14, r24
     7a0:	f1 1c       	adc	r15, r1
     7a2:	c0 e0       	ldi	r28, 0x00	; 0
     7a4:	d0 e0       	ldi	r29, 0x00	; 0
     7a6:	06 2f       	mov	r16, r22
     7a8:	10 e0       	ldi	r17, 0x00	; 0
     7aa:	b8 01       	movw	r22, r16
     7ac:	0c 2e       	mov	r0, r28
     7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     7b0:	75 95       	asr	r23
     7b2:	67 95       	ror	r22
     7b4:	0a 94       	dec	r0
     7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <_ZN13LiquidCrystal10write4bitsEh+0x28>
     7b8:	61 70       	andi	r22, 0x01	; 1
     7ba:	f7 01       	movw	r30, r14
     7bc:	81 91       	ld	r24, Z+
     7be:	7f 01       	movw	r14, r30
     7c0:	0e 94 0a 0c 	call	0x1814	; 0x1814 <digitalWrite>
     7c4:	21 96       	adiw	r28, 0x01	; 1
     7c6:	c4 30       	cpi	r28, 0x04	; 4
     7c8:	d1 05       	cpc	r29, r1
     7ca:	79 f7       	brne	.-34     	; 0x7aa <_ZN13LiquidCrystal10write4bitsEh+0x22>
     7cc:	c6 01       	movw	r24, r12
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	df 90       	pop	r13
     7dc:	cf 90       	pop	r12
     7de:	ba cf       	rjmp	.-140    	; 0x754 <_ZN13LiquidCrystal11pulseEnableEv>

000007e0 <_ZN13LiquidCrystal10write8bitsEh>:
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	6c 01       	movw	r12, r24
     7f2:	7c 01       	movw	r14, r24
     7f4:	87 e0       	ldi	r24, 0x07	; 7
     7f6:	e8 0e       	add	r14, r24
     7f8:	f1 1c       	adc	r15, r1
     7fa:	c0 e0       	ldi	r28, 0x00	; 0
     7fc:	d0 e0       	ldi	r29, 0x00	; 0
     7fe:	06 2f       	mov	r16, r22
     800:	10 e0       	ldi	r17, 0x00	; 0
     802:	b8 01       	movw	r22, r16
     804:	0c 2e       	mov	r0, r28
     806:	02 c0       	rjmp	.+4      	; 0x80c <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     808:	75 95       	asr	r23
     80a:	67 95       	ror	r22
     80c:	0a 94       	dec	r0
     80e:	e2 f7       	brpl	.-8      	; 0x808 <_ZN13LiquidCrystal10write8bitsEh+0x28>
     810:	61 70       	andi	r22, 0x01	; 1
     812:	f7 01       	movw	r30, r14
     814:	81 91       	ld	r24, Z+
     816:	7f 01       	movw	r14, r30
     818:	fd d7       	rcall	.+4090   	; 0x1814 <digitalWrite>
     81a:	21 96       	adiw	r28, 0x01	; 1
     81c:	c8 30       	cpi	r28, 0x08	; 8
     81e:	d1 05       	cpc	r29, r1
     820:	81 f7       	brne	.-32     	; 0x802 <_ZN13LiquidCrystal10write8bitsEh+0x22>
     822:	c6 01       	movw	r24, r12
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	8f cf       	rjmp	.-226    	; 0x754 <_ZN13LiquidCrystal11pulseEnableEv>

00000836 <_ZN13LiquidCrystal4sendEhh>:
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	ec 01       	movw	r28, r24
     83e:	16 2f       	mov	r17, r22
     840:	64 2f       	mov	r22, r20
     842:	8c 81       	ldd	r24, Y+4	; 0x04
     844:	e7 d7       	rcall	.+4046   	; 0x1814 <digitalWrite>
     846:	8d 81       	ldd	r24, Y+5	; 0x05
     848:	8f 3f       	cpi	r24, 0xFF	; 255
     84a:	11 f0       	breq	.+4      	; 0x850 <_ZN13LiquidCrystal4sendEhh+0x1a>
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	e2 d7       	rcall	.+4036   	; 0x1814 <digitalWrite>
     850:	8f 85       	ldd	r24, Y+15	; 0x0f
     852:	61 2f       	mov	r22, r17
     854:	84 ff       	sbrs	r24, 4
     856:	05 c0       	rjmp	.+10     	; 0x862 <_ZN13LiquidCrystal4sendEhh+0x2c>
     858:	ce 01       	movw	r24, r28
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	bf cf       	rjmp	.-130    	; 0x7e0 <_ZN13LiquidCrystal10write8bitsEh>
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	84 e0       	ldi	r24, 0x04	; 4
     866:	75 95       	asr	r23
     868:	67 95       	ror	r22
     86a:	8a 95       	dec	r24
     86c:	e1 f7       	brne	.-8      	; 0x866 <_ZN13LiquidCrystal4sendEhh+0x30>
     86e:	ce 01       	movw	r24, r28
     870:	8b df       	rcall	.-234    	; 0x788 <_ZN13LiquidCrystal10write4bitsEh>
     872:	61 2f       	mov	r22, r17
     874:	ce 01       	movw	r24, r28
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	85 cf       	rjmp	.-246    	; 0x788 <_ZN13LiquidCrystal10write4bitsEh>

0000087e <_ZN13LiquidCrystal7commandEh>:
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	da cf       	rjmp	.-76     	; 0x836 <_ZN13LiquidCrystal4sendEhh>

00000882 <_ZN13LiquidCrystal5clearEv>:
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	fc df       	rcall	.-8      	; 0x87e <_ZN13LiquidCrystal7commandEh>
     886:	80 ed       	ldi	r24, 0xD0	; 208
     888:	97 e0       	ldi	r25, 0x07	; 7
     88a:	a1 c6       	rjmp	.+3394   	; 0x15ce <delayMicroseconds>

0000088c <_ZN13LiquidCrystal9setCursorEhh>:
     88c:	fc 01       	movw	r30, r24
     88e:	44 30       	cpi	r20, 0x04	; 4
     890:	08 f0       	brcs	.+2      	; 0x894 <_ZN13LiquidCrystal9setCursorEhh+0x8>
     892:	43 e0       	ldi	r20, 0x03	; 3
     894:	83 89       	ldd	r24, Z+19	; 0x13
     896:	48 17       	cp	r20, r24
     898:	10 f0       	brcs	.+4      	; 0x89e <_ZN13LiquidCrystal9setCursorEhh+0x12>
     89a:	4f ef       	ldi	r20, 0xFF	; 255
     89c:	48 0f       	add	r20, r24
     89e:	df 01       	movw	r26, r30
     8a0:	a4 0f       	add	r26, r20
     8a2:	b1 1d       	adc	r27, r1
     8a4:	54 96       	adiw	r26, 0x14	; 20
     8a6:	9c 91       	ld	r25, X
     8a8:	69 0f       	add	r22, r25
     8aa:	60 68       	ori	r22, 0x80	; 128
     8ac:	cf 01       	movw	r24, r30
     8ae:	e7 cf       	rjmp	.-50     	; 0x87e <_ZN13LiquidCrystal7commandEh>

000008b0 <_ZN13LiquidCrystal7displayEv>:
     8b0:	fc 01       	movw	r30, r24
     8b2:	60 89       	ldd	r22, Z+16	; 0x10
     8b4:	26 2f       	mov	r18, r22
     8b6:	24 60       	ori	r18, 0x04	; 4
     8b8:	20 8b       	std	Z+16, r18	; 0x10
     8ba:	6c 60       	ori	r22, 0x0C	; 12
     8bc:	e0 cf       	rjmp	.-64     	; 0x87e <_ZN13LiquidCrystal7commandEh>

000008be <_ZN13LiquidCrystal5beginEhhh>:
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	ec 01       	movw	r28, r24
     8cc:	42 30       	cpi	r20, 0x02	; 2
     8ce:	18 f0       	brcs	.+6      	; 0x8d6 <_ZN13LiquidCrystal5beginEhhh+0x18>
     8d0:	8f 85       	ldd	r24, Y+15	; 0x0f
     8d2:	88 60       	ori	r24, 0x08	; 8
     8d4:	8f 87       	std	Y+15, r24	; 0x0f
     8d6:	4b 8b       	std	Y+19, r20	; 0x13
     8d8:	1c 8a       	std	Y+20, r1	; 0x14
     8da:	80 e4       	ldi	r24, 0x40	; 64
     8dc:	8d 8b       	std	Y+21, r24	; 0x15
     8de:	6e 8b       	std	Y+22, r22	; 0x16
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	60 5c       	subi	r22, 0xC0	; 192
     8e4:	7f 4f       	sbci	r23, 0xFF	; 255
     8e6:	6f 8b       	std	Y+23, r22	; 0x17
     8e8:	22 23       	and	r18, r18
     8ea:	29 f0       	breq	.+10     	; 0x8f6 <_ZN13LiquidCrystal5beginEhhh+0x38>
     8ec:	41 30       	cpi	r20, 0x01	; 1
     8ee:	19 f4       	brne	.+6      	; 0x8f6 <_ZN13LiquidCrystal5beginEhhh+0x38>
     8f0:	8f 85       	ldd	r24, Y+15	; 0x0f
     8f2:	84 60       	ori	r24, 0x04	; 4
     8f4:	8f 87       	std	Y+15, r24	; 0x0f
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	8c 81       	ldd	r24, Y+4	; 0x04
     8fa:	50 d7       	rcall	.+3744   	; 0x179c <pinMode>
     8fc:	8d 81       	ldd	r24, Y+5	; 0x05
     8fe:	8f 3f       	cpi	r24, 0xFF	; 255
     900:	11 f0       	breq	.+4      	; 0x906 <_ZN13LiquidCrystal5beginEhhh+0x48>
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	4b d7       	rcall	.+3734   	; 0x179c <pinMode>
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	8e 81       	ldd	r24, Y+6	; 0x06
     90a:	48 d7       	rcall	.+3728   	; 0x179c <pinMode>
     90c:	7e 01       	movw	r14, r28
     90e:	87 e0       	ldi	r24, 0x07	; 7
     910:	e8 0e       	add	r14, r24
     912:	f1 1c       	adc	r15, r1
     914:	00 e0       	ldi	r16, 0x00	; 0
     916:	10 e0       	ldi	r17, 0x00	; 0
     918:	8f 85       	ldd	r24, Y+15	; 0x0f
     91a:	84 fd       	sbrc	r24, 4
     91c:	03 c0       	rjmp	.+6      	; 0x924 <_ZN13LiquidCrystal5beginEhhh+0x66>
     91e:	84 e0       	ldi	r24, 0x04	; 4
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	02 c0       	rjmp	.+4      	; 0x928 <_ZN13LiquidCrystal5beginEhhh+0x6a>
     924:	88 e0       	ldi	r24, 0x08	; 8
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	08 17       	cp	r16, r24
     92a:	19 07       	cpc	r17, r25
     92c:	44 f4       	brge	.+16     	; 0x93e <_ZN13LiquidCrystal5beginEhhh+0x80>
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	f7 01       	movw	r30, r14
     932:	81 91       	ld	r24, Z+
     934:	7f 01       	movw	r14, r30
     936:	32 d7       	rcall	.+3684   	; 0x179c <pinMode>
     938:	0f 5f       	subi	r16, 0xFF	; 255
     93a:	1f 4f       	sbci	r17, 0xFF	; 255
     93c:	ed cf       	rjmp	.-38     	; 0x918 <_ZN13LiquidCrystal5beginEhhh+0x5a>
     93e:	80 e5       	ldi	r24, 0x50	; 80
     940:	93 ec       	ldi	r25, 0xC3	; 195
     942:	45 d6       	rcall	.+3210   	; 0x15ce <delayMicroseconds>
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	8c 81       	ldd	r24, Y+4	; 0x04
     948:	65 d7       	rcall	.+3786   	; 0x1814 <digitalWrite>
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	8e 81       	ldd	r24, Y+6	; 0x06
     94e:	62 d7       	rcall	.+3780   	; 0x1814 <digitalWrite>
     950:	8d 81       	ldd	r24, Y+5	; 0x05
     952:	8f 3f       	cpi	r24, 0xFF	; 255
     954:	11 f0       	breq	.+4      	; 0x95a <_ZN13LiquidCrystal5beginEhhh+0x9c>
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	5d d7       	rcall	.+3770   	; 0x1814 <digitalWrite>
     95a:	6f 85       	ldd	r22, Y+15	; 0x0f
     95c:	64 fd       	sbrc	r22, 4
     95e:	16 c0       	rjmp	.+44     	; 0x98c <_ZN13LiquidCrystal5beginEhhh+0xce>
     960:	63 e0       	ldi	r22, 0x03	; 3
     962:	ce 01       	movw	r24, r28
     964:	11 df       	rcall	.-478    	; 0x788 <_ZN13LiquidCrystal10write4bitsEh>
     966:	84 e9       	ldi	r24, 0x94	; 148
     968:	91 e1       	ldi	r25, 0x11	; 17
     96a:	31 d6       	rcall	.+3170   	; 0x15ce <delayMicroseconds>
     96c:	63 e0       	ldi	r22, 0x03	; 3
     96e:	ce 01       	movw	r24, r28
     970:	0b df       	rcall	.-490    	; 0x788 <_ZN13LiquidCrystal10write4bitsEh>
     972:	84 e9       	ldi	r24, 0x94	; 148
     974:	91 e1       	ldi	r25, 0x11	; 17
     976:	2b d6       	rcall	.+3158   	; 0x15ce <delayMicroseconds>
     978:	63 e0       	ldi	r22, 0x03	; 3
     97a:	ce 01       	movw	r24, r28
     97c:	05 df       	rcall	.-502    	; 0x788 <_ZN13LiquidCrystal10write4bitsEh>
     97e:	86 e9       	ldi	r24, 0x96	; 150
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	25 d6       	rcall	.+3146   	; 0x15ce <delayMicroseconds>
     984:	62 e0       	ldi	r22, 0x02	; 2
     986:	ce 01       	movw	r24, r28
     988:	ff de       	rcall	.-514    	; 0x788 <_ZN13LiquidCrystal10write4bitsEh>
     98a:	11 c0       	rjmp	.+34     	; 0x9ae <_ZN13LiquidCrystal5beginEhhh+0xf0>
     98c:	60 62       	ori	r22, 0x20	; 32
     98e:	ce 01       	movw	r24, r28
     990:	76 df       	rcall	.-276    	; 0x87e <_ZN13LiquidCrystal7commandEh>
     992:	84 e9       	ldi	r24, 0x94	; 148
     994:	91 e1       	ldi	r25, 0x11	; 17
     996:	1b d6       	rcall	.+3126   	; 0x15ce <delayMicroseconds>
     998:	6f 85       	ldd	r22, Y+15	; 0x0f
     99a:	60 62       	ori	r22, 0x20	; 32
     99c:	ce 01       	movw	r24, r28
     99e:	6f df       	rcall	.-290    	; 0x87e <_ZN13LiquidCrystal7commandEh>
     9a0:	86 e9       	ldi	r24, 0x96	; 150
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	14 d6       	rcall	.+3112   	; 0x15ce <delayMicroseconds>
     9a6:	6f 85       	ldd	r22, Y+15	; 0x0f
     9a8:	60 62       	ori	r22, 0x20	; 32
     9aa:	ce 01       	movw	r24, r28
     9ac:	68 df       	rcall	.-304    	; 0x87e <_ZN13LiquidCrystal7commandEh>
     9ae:	6f 85       	ldd	r22, Y+15	; 0x0f
     9b0:	60 62       	ori	r22, 0x20	; 32
     9b2:	ce 01       	movw	r24, r28
     9b4:	64 df       	rcall	.-312    	; 0x87e <_ZN13LiquidCrystal7commandEh>
     9b6:	84 e0       	ldi	r24, 0x04	; 4
     9b8:	88 8b       	std	Y+16, r24	; 0x10
     9ba:	ce 01       	movw	r24, r28
     9bc:	79 df       	rcall	.-270    	; 0x8b0 <_ZN13LiquidCrystal7displayEv>
     9be:	ce 01       	movw	r24, r28
     9c0:	60 df       	rcall	.-320    	; 0x882 <_ZN13LiquidCrystal5clearEv>
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	89 8b       	std	Y+17, r24	; 0x11
     9c6:	66 e0       	ldi	r22, 0x06	; 6
     9c8:	ce 01       	movw	r24, r28
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	53 cf       	rjmp	.-346    	; 0x87e <_ZN13LiquidCrystal7commandEh>

000009d8 <_ZN13LiquidCrystalC1Ehhhhhh>:
     9d8:	cf 92       	push	r12
     9da:	ef 92       	push	r14
     9dc:	0f 93       	push	r16
     9de:	fc 01       	movw	r30, r24
     9e0:	13 82       	std	Z+3, r1	; 0x03
     9e2:	12 82       	std	Z+2, r1	; 0x02
     9e4:	88 e6       	ldi	r24, 0x68	; 104
     9e6:	93 e0       	ldi	r25, 0x03	; 3
     9e8:	91 83       	std	Z+1, r25	; 0x01
     9ea:	80 83       	st	Z, r24
     9ec:	64 83       	std	Z+4, r22	; 0x04
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	85 83       	std	Z+5, r24	; 0x05
     9f2:	46 83       	std	Z+6, r20	; 0x06
     9f4:	27 83       	std	Z+7, r18	; 0x07
     9f6:	00 87       	std	Z+8, r16	; 0x08
     9f8:	e1 86       	std	Z+9, r14	; 0x09
     9fa:	c2 86       	std	Z+10, r12	; 0x0a
     9fc:	13 86       	std	Z+11, r1	; 0x0b
     9fe:	14 86       	std	Z+12, r1	; 0x0c
     a00:	15 86       	std	Z+13, r1	; 0x0d
     a02:	16 86       	std	Z+14, r1	; 0x0e
     a04:	17 86       	std	Z+15, r1	; 0x0f
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	41 e0       	ldi	r20, 0x01	; 1
     a0a:	60 e1       	ldi	r22, 0x10	; 16
     a0c:	cf 01       	movw	r24, r30
     a0e:	0f 91       	pop	r16
     a10:	ef 90       	pop	r14
     a12:	cf 90       	pop	r12
     a14:	54 cf       	rjmp	.-344    	; 0x8be <_ZN13LiquidCrystal5beginEhhh>

00000a16 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     a16:	41 e0       	ldi	r20, 0x01	; 1
     a18:	0e df       	rcall	.-484    	; 0x836 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	08 95       	ret

00000a20 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
#define SERVO_MAX() (MAX_PULSE_WIDTH - this->max * 4)  // maximum value in uS for this servo

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	7b 01       	movw	r14, r22
     a32:	6a 01       	movw	r12, r20
  if( Channel[timer] < 0 )
     a34:	08 2f       	mov	r16, r24
     a36:	10 e0       	ldi	r17, 0x00	; 0
     a38:	e8 01       	movw	r28, r16
     a3a:	cd 5f       	subi	r28, 0xFD	; 253
     a3c:	db 4f       	sbci	r29, 0xFB	; 251
     a3e:	88 81       	ld	r24, Y
     a40:	87 ff       	sbrs	r24, 7
     a42:	04 c0       	rjmp	.+8      	; 0xa4c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
     a44:	fb 01       	movw	r30, r22
     a46:	11 82       	std	Z+1, r1	; 0x01
     a48:	10 82       	st	Z, r1
     a4a:	24 c0       	rjmp	.+72     	; 0xa94 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
     a4c:	8c e0       	ldi	r24, 0x0C	; 12
     a4e:	80 9f       	mul	r24, r16
     a50:	90 01       	movw	r18, r0
     a52:	81 9f       	mul	r24, r17
     a54:	30 0d       	add	r19, r0
     a56:	11 24       	eor	r1, r1
     a58:	88 81       	ld	r24, Y
     a5a:	a9 01       	movw	r20, r18
     a5c:	48 0f       	add	r20, r24
     a5e:	51 1d       	adc	r21, r1
     a60:	87 fd       	sbrc	r24, 7
     a62:	5a 95       	dec	r21
     a64:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <ServoCount>
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	48 17       	cp	r20, r24
     a6c:	59 07       	cpc	r21, r25
     a6e:	94 f4       	brge	.+36     	; 0xa94 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
     a70:	88 81       	ld	r24, Y
     a72:	a9 01       	movw	r20, r18
     a74:	48 0f       	add	r20, r24
     a76:	51 1d       	adc	r21, r1
     a78:	87 fd       	sbrc	r24, 7
     a7a:	5a 95       	dec	r21
     a7c:	ca 01       	movw	r24, r20
     a7e:	fa 01       	movw	r30, r20
     a80:	ee 0f       	add	r30, r30
     a82:	ff 1f       	adc	r31, r31
     a84:	8e 0f       	add	r24, r30
     a86:	9f 1f       	adc	r25, r31
     a88:	fc 01       	movw	r30, r24
     a8a:	e9 5f       	subi	r30, 0xF9	; 249
     a8c:	fb 4f       	sbci	r31, 0xFB	; 251
     a8e:	80 81       	ld	r24, Z
     a90:	86 fd       	sbrc	r24, 6
     a92:	19 c0       	rjmp	.+50     	; 0xac6 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xa6>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
     a94:	88 81       	ld	r24, Y
     a96:	8f 5f       	subi	r24, 0xFF	; 255
     a98:	88 83       	st	Y, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     a9a:	8c e0       	ldi	r24, 0x0C	; 12
     a9c:	80 9f       	mul	r24, r16
     a9e:	90 01       	movw	r18, r0
     aa0:	81 9f       	mul	r24, r17
     aa2:	30 0d       	add	r19, r0
     aa4:	11 24       	eor	r1, r1
     aa6:	88 81       	ld	r24, Y
     aa8:	a9 01       	movw	r20, r18
     aaa:	48 0f       	add	r20, r24
     aac:	51 1d       	adc	r21, r1
     aae:	87 fd       	sbrc	r24, 7
     ab0:	5a 95       	dec	r21
     ab2:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <ServoCount>
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	48 17       	cp	r20, r24
     aba:	59 07       	cpc	r21, r25
     abc:	b4 f4       	brge	.+44     	; 0xaea <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xca>
     abe:	88 81       	ld	r24, Y
     ac0:	8c 30       	cpi	r24, 0x0C	; 12
     ac2:	3c f1       	brlt	.+78     	; 0xb12 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xf2>
     ac4:	12 c0       	rjmp	.+36     	; 0xaea <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xca>
{
  if( Channel[timer] < 0 )
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
     ac6:	88 81       	ld	r24, Y
     ac8:	28 0f       	add	r18, r24
     aca:	31 1d       	adc	r19, r1
     acc:	87 fd       	sbrc	r24, 7
     ace:	3a 95       	dec	r19
     ad0:	f9 01       	movw	r30, r18
     ad2:	ee 0f       	add	r30, r30
     ad4:	ff 1f       	adc	r31, r31
     ad6:	2e 0f       	add	r18, r30
     ad8:	3f 1f       	adc	r19, r31
     ada:	f9 01       	movw	r30, r18
     adc:	e9 5f       	subi	r30, 0xF9	; 249
     ade:	fb 4f       	sbci	r31, 0xFB	; 251
     ae0:	80 81       	ld	r24, Z
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	8f 73       	andi	r24, 0x3F	; 63
     ae6:	96 d6       	rcall	.+3372   	; 0x1814 <digitalWrite>
     ae8:	d5 cf       	rjmp	.-86     	; 0xa94 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
     aea:	f7 01       	movw	r30, r14
     aec:	80 81       	ld	r24, Z
     aee:	91 81       	ldd	r25, Z+1	; 0x01
     af0:	04 96       	adiw	r24, 0x04	; 4
     af2:	80 34       	cpi	r24, 0x40	; 64
     af4:	9c 49       	sbci	r25, 0x9C	; 156
     af6:	18 f4       	brcc	.+6      	; 0xafe <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xde>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
     af8:	80 e4       	ldi	r24, 0x40	; 64
     afa:	9c e9       	ldi	r25, 0x9C	; 156
     afc:	04 c0       	rjmp	.+8      	; 0xb06 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe6>
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     afe:	f7 01       	movw	r30, r14
     b00:	80 81       	ld	r24, Z
     b02:	91 81       	ldd	r25, Z+1	; 0x01
     b04:	04 96       	adiw	r24, 0x04	; 4
     b06:	f6 01       	movw	r30, r12
     b08:	91 83       	std	Z+1, r25	; 0x01
     b0a:	80 83       	st	Z, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     b0c:	8f ef       	ldi	r24, 0xFF	; 255
     b0e:	88 83       	st	Y, r24
  }
}
     b10:	44 c0       	rjmp	.+136    	; 0xb9a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     b12:	f7 01       	movw	r30, r14
     b14:	40 81       	ld	r20, Z
     b16:	51 81       	ldd	r21, Z+1	; 0x01
     b18:	88 81       	ld	r24, Y
     b1a:	b9 01       	movw	r22, r18
     b1c:	68 0f       	add	r22, r24
     b1e:	71 1d       	adc	r23, r1
     b20:	87 fd       	sbrc	r24, 7
     b22:	7a 95       	dec	r23
     b24:	cb 01       	movw	r24, r22
     b26:	fb 01       	movw	r30, r22
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	8e 0f       	add	r24, r30
     b2e:	9f 1f       	adc	r25, r31
     b30:	fc 01       	movw	r30, r24
     b32:	e9 5f       	subi	r30, 0xF9	; 249
     b34:	fb 4f       	sbci	r31, 0xFB	; 251
     b36:	81 81       	ldd	r24, Z+1	; 0x01
     b38:	92 81       	ldd	r25, Z+2	; 0x02
     b3a:	84 0f       	add	r24, r20
     b3c:	95 1f       	adc	r25, r21
     b3e:	f6 01       	movw	r30, r12
     b40:	91 83       	std	Z+1, r25	; 0x01
     b42:	80 83       	st	Z, r24
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     b44:	88 81       	ld	r24, Y
     b46:	a9 01       	movw	r20, r18
     b48:	48 0f       	add	r20, r24
     b4a:	51 1d       	adc	r21, r1
     b4c:	87 fd       	sbrc	r24, 7
     b4e:	5a 95       	dec	r21
     b50:	ca 01       	movw	r24, r20
     b52:	fa 01       	movw	r30, r20
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	8e 0f       	add	r24, r30
     b5a:	9f 1f       	adc	r25, r31
     b5c:	fc 01       	movw	r30, r24
     b5e:	e9 5f       	subi	r30, 0xF9	; 249
     b60:	fb 4f       	sbci	r31, 0xFB	; 251
     b62:	80 81       	ld	r24, Z
     b64:	86 ff       	sbrs	r24, 6
     b66:	19 c0       	rjmp	.+50     	; 0xb9a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
     b68:	88 81       	ld	r24, Y
     b6a:	28 0f       	add	r18, r24
     b6c:	31 1d       	adc	r19, r1
     b6e:	87 fd       	sbrc	r24, 7
     b70:	3a 95       	dec	r19
     b72:	f9 01       	movw	r30, r18
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	2e 0f       	add	r18, r30
     b7a:	3f 1f       	adc	r19, r31
     b7c:	f9 01       	movw	r30, r18
     b7e:	e9 5f       	subi	r30, 0xF9	; 249
     b80:	fb 4f       	sbci	r31, 0xFB	; 251
     b82:	80 81       	ld	r24, Z
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	8f 73       	andi	r24, 0x3F	; 63
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
     b96:	cf 90       	pop	r12
     b98:	3d c6       	rjmp	.+3194   	; 0x1814 <digitalWrite>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	df 90       	pop	r13
     ba8:	cf 90       	pop	r12
     baa:	08 95       	ret

00000bac <__vector_17>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	0b b6       	in	r0, 0x3b	; 59
     bb8:	0f 92       	push	r0
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
  handle_interrupts(_timer1, &TCNT1, &OCR1A);
     bd2:	48 e8       	ldi	r20, 0x88	; 136
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	64 e8       	ldi	r22, 0x84	; 132
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	21 df       	rcall	.-446    	; 0xa20 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     bde:	ff 91       	pop	r31
     be0:	ef 91       	pop	r30
     be2:	bf 91       	pop	r27
     be4:	af 91       	pop	r26
     be6:	9f 91       	pop	r25
     be8:	8f 91       	pop	r24
     bea:	7f 91       	pop	r23
     bec:	6f 91       	pop	r22
     bee:	5f 91       	pop	r21
     bf0:	4f 91       	pop	r20
     bf2:	3f 91       	pop	r19
     bf4:	2f 91       	pop	r18
     bf6:	0f 90       	pop	r0
     bf8:	0b be       	out	0x3b, r0	; 59
     bfa:	0f 90       	pop	r0
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	0f 90       	pop	r0
     c00:	1f 90       	pop	r1
     c02:	18 95       	reti

00000c04 <__vector_32>:
#endif

#if defined(_useTimer3)
SIGNAL (TIMER3_COMPA_vect)
{
     c04:	1f 92       	push	r1
     c06:	0f 92       	push	r0
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	0f 92       	push	r0
     c0c:	11 24       	eor	r1, r1
     c0e:	0b b6       	in	r0, 0x3b	; 59
     c10:	0f 92       	push	r0
     c12:	2f 93       	push	r18
     c14:	3f 93       	push	r19
     c16:	4f 93       	push	r20
     c18:	5f 93       	push	r21
     c1a:	6f 93       	push	r22
     c1c:	7f 93       	push	r23
     c1e:	8f 93       	push	r24
     c20:	9f 93       	push	r25
     c22:	af 93       	push	r26
     c24:	bf 93       	push	r27
     c26:	ef 93       	push	r30
     c28:	ff 93       	push	r31
  handle_interrupts(_timer3, &TCNT3, &OCR3A);
     c2a:	48 e9       	ldi	r20, 0x98	; 152
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	64 e9       	ldi	r22, 0x94	; 148
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	f5 de       	rcall	.-534    	; 0xa20 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     c36:	ff 91       	pop	r31
     c38:	ef 91       	pop	r30
     c3a:	bf 91       	pop	r27
     c3c:	af 91       	pop	r26
     c3e:	9f 91       	pop	r25
     c40:	8f 91       	pop	r24
     c42:	7f 91       	pop	r23
     c44:	6f 91       	pop	r22
     c46:	5f 91       	pop	r21
     c48:	4f 91       	pop	r20
     c4a:	3f 91       	pop	r19
     c4c:	2f 91       	pop	r18
     c4e:	0f 90       	pop	r0
     c50:	0b be       	out	0x3b, r0	; 59
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	0f 90       	pop	r0
     c58:	1f 90       	pop	r1
     c5a:	18 95       	reti

00000c5c <__vector_42>:
#endif

#if defined(_useTimer4)
SIGNAL (TIMER4_COMPA_vect)
{
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	0b b6       	in	r0, 0x3b	; 59
     c68:	0f 92       	push	r0
     c6a:	2f 93       	push	r18
     c6c:	3f 93       	push	r19
     c6e:	4f 93       	push	r20
     c70:	5f 93       	push	r21
     c72:	6f 93       	push	r22
     c74:	7f 93       	push	r23
     c76:	8f 93       	push	r24
     c78:	9f 93       	push	r25
     c7a:	af 93       	push	r26
     c7c:	bf 93       	push	r27
     c7e:	ef 93       	push	r30
     c80:	ff 93       	push	r31
  handle_interrupts(_timer4, &TCNT4, &OCR4A);
     c82:	48 ea       	ldi	r20, 0xA8	; 168
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	64 ea       	ldi	r22, 0xA4	; 164
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	c9 de       	rcall	.-622    	; 0xa20 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     c8e:	ff 91       	pop	r31
     c90:	ef 91       	pop	r30
     c92:	bf 91       	pop	r27
     c94:	af 91       	pop	r26
     c96:	9f 91       	pop	r25
     c98:	8f 91       	pop	r24
     c9a:	7f 91       	pop	r23
     c9c:	6f 91       	pop	r22
     c9e:	5f 91       	pop	r21
     ca0:	4f 91       	pop	r20
     ca2:	3f 91       	pop	r19
     ca4:	2f 91       	pop	r18
     ca6:	0f 90       	pop	r0
     ca8:	0b be       	out	0x3b, r0	; 59
     caa:	0f 90       	pop	r0
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	0f 90       	pop	r0
     cb0:	1f 90       	pop	r1
     cb2:	18 95       	reti

00000cb4 <__vector_47>:
#endif

#if defined(_useTimer5)
SIGNAL (TIMER5_COMPA_vect)
{
     cb4:	1f 92       	push	r1
     cb6:	0f 92       	push	r0
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	0b b6       	in	r0, 0x3b	; 59
     cc0:	0f 92       	push	r0
     cc2:	2f 93       	push	r18
     cc4:	3f 93       	push	r19
     cc6:	4f 93       	push	r20
     cc8:	5f 93       	push	r21
     cca:	6f 93       	push	r22
     ccc:	7f 93       	push	r23
     cce:	8f 93       	push	r24
     cd0:	9f 93       	push	r25
     cd2:	af 93       	push	r26
     cd4:	bf 93       	push	r27
     cd6:	ef 93       	push	r30
     cd8:	ff 93       	push	r31
  handle_interrupts(_timer5, &TCNT5, &OCR5A);
     cda:	48 e2       	ldi	r20, 0x28	; 40
     cdc:	51 e0       	ldi	r21, 0x01	; 1
     cde:	64 e2       	ldi	r22, 0x24	; 36
     ce0:	71 e0       	ldi	r23, 0x01	; 1
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	9d de       	rcall	.-710    	; 0xa20 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     ce6:	ff 91       	pop	r31
     ce8:	ef 91       	pop	r30
     cea:	bf 91       	pop	r27
     cec:	af 91       	pop	r26
     cee:	9f 91       	pop	r25
     cf0:	8f 91       	pop	r24
     cf2:	7f 91       	pop	r23
     cf4:	6f 91       	pop	r22
     cf6:	5f 91       	pop	r21
     cf8:	4f 91       	pop	r20
     cfa:	3f 91       	pop	r19
     cfc:	2f 91       	pop	r18
     cfe:	0f 90       	pop	r0
     d00:	0b be       	out	0x3b, r0	; 59
     d02:	0f 90       	pop	r0
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	0f 90       	pop	r0
     d08:	1f 90       	pop	r1
     d0a:	18 95       	reti

00000d0c <_Z13calculateTempi>:
#include "TemperatureControl.h"

float calculateTemp(int sensorValue)
{
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
	float temp = log(10000.0 * (1024.0 / sensorValue - 1));
     d14:	bc 01       	movw	r22, r24
     d16:	99 0f       	add	r25, r25
     d18:	88 0b       	sbc	r24, r24
     d1a:	99 0b       	sbc	r25, r25
     d1c:	43 d1       	rcall	.+646    	; 0xfa4 <__floatsisf>
     d1e:	9b 01       	movw	r18, r22
     d20:	ac 01       	movw	r20, r24
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	80 e8       	ldi	r24, 0x80	; 128
     d28:	94 e4       	ldi	r25, 0x44	; 68
     d2a:	a1 d0       	rcall	.+322    	; 0xe6e <__divsf3>
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e8       	ldi	r20, 0x80	; 128
     d32:	5f e3       	ldi	r21, 0x3F	; 63
     d34:	37 d0       	rcall	.+110    	; 0xda4 <__subsf3>
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e4       	ldi	r19, 0x40	; 64
     d3a:	4c e1       	ldi	r20, 0x1C	; 28
     d3c:	56 e4       	ldi	r21, 0x46	; 70
     d3e:	03 d2       	rcall	.+1030   	; 0x1146 <__mulsf3>
     d40:	c2 d1       	rcall	.+900    	; 0x10c6 <log>
     d42:	6b 01       	movw	r12, r22
     d44:	7c 01       	movw	r14, r24
	float tempK = 1/(0.001129148 + (0.000234125 + (0.0000000876741 * temp * temp)) * temp);
	float tempC = tempK - 273.15;
	return tempC;
     d46:	29 e5       	ldi	r18, 0x59	; 89
     d48:	37 e4       	ldi	r19, 0x47	; 71
     d4a:	4c eb       	ldi	r20, 0xBC	; 188
     d4c:	53 e3       	ldi	r21, 0x33	; 51
     d4e:	fb d1       	rcall	.+1014   	; 0x1146 <__mulsf3>
     d50:	a7 01       	movw	r20, r14
     d52:	96 01       	movw	r18, r12
     d54:	f8 d1       	rcall	.+1008   	; 0x1146 <__mulsf3>
     d56:	23 e7       	ldi	r18, 0x73	; 115
     d58:	3f e7       	ldi	r19, 0x7F	; 127
     d5a:	45 e7       	ldi	r20, 0x75	; 117
     d5c:	59 e3       	ldi	r21, 0x39	; 57
     d5e:	23 d0       	rcall	.+70     	; 0xda6 <__addsf3>
     d60:	a7 01       	movw	r20, r14
     d62:	96 01       	movw	r18, r12
     d64:	f0 d1       	rcall	.+992    	; 0x1146 <__mulsf3>
     d66:	2b ee       	ldi	r18, 0xEB	; 235
     d68:	3f ef       	ldi	r19, 0xFF	; 255
     d6a:	43 e9       	ldi	r20, 0x93	; 147
     d6c:	5a e3       	ldi	r21, 0x3A	; 58
     d6e:	1b d0       	rcall	.+54     	; 0xda6 <__addsf3>
     d70:	9b 01       	movw	r18, r22
     d72:	ac 01       	movw	r20, r24
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	80 e8       	ldi	r24, 0x80	; 128
     d7a:	9f e3       	ldi	r25, 0x3F	; 63
     d7c:	78 d0       	rcall	.+240    	; 0xe6e <__divsf3>
     d7e:	23 e3       	ldi	r18, 0x33	; 51
     d80:	33 e9       	ldi	r19, 0x93	; 147
     d82:	48 e8       	ldi	r20, 0x88	; 136
     d84:	53 e4       	ldi	r21, 0x43	; 67
     d86:	0e d0       	rcall	.+28     	; 0xda4 <__subsf3>
     d88:	ff 90       	pop	r15
}
     d8a:	ef 90       	pop	r14
     d8c:	df 90       	pop	r13
     d8e:	cf 90       	pop	r12
     d90:	08 95       	ret

00000d92 <_Z21GetCurrentTemperaturev>:
     d92:	81 e4       	ldi	r24, 0x41	; 65
void GetCurrentTemperature()
{
	currentTemperaturesKids = calculateTemp(analogRead(A11));
     d94:	89 d4       	rcall	.+2322   	; 0x16a8 <analogRead>
     d96:	ba df       	rcall	.-140    	; 0xd0c <_Z13calculateTempi>
     d98:	d2 d0       	rcall	.+420    	; 0xf3e <__fixsfsi>
     d9a:	70 93 ff 03 	sts	0x03FF, r23	; 0x8003ff <currentTemperaturesKids+0x1>
     d9e:	60 93 fe 03 	sts	0x03FE, r22	; 0x8003fe <currentTemperaturesKids>
     da2:	08 95       	ret

00000da4 <__subsf3>:
     da4:	50 58       	subi	r21, 0x80	; 128

00000da6 <__addsf3>:
     da6:	bb 27       	eor	r27, r27
     da8:	aa 27       	eor	r26, r26
     daa:	0e d0       	rcall	.+28     	; 0xdc8 <__addsf3x>
     dac:	4d c1       	rjmp	.+666    	; 0x1048 <__fp_round>
     dae:	3e d1       	rcall	.+636    	; 0x102c <__fp_pscA>
     db0:	30 f0       	brcs	.+12     	; 0xdbe <__addsf3+0x18>
     db2:	43 d1       	rcall	.+646    	; 0x103a <__fp_pscB>
     db4:	20 f0       	brcs	.+8      	; 0xdbe <__addsf3+0x18>
     db6:	31 f4       	brne	.+12     	; 0xdc4 <__addsf3+0x1e>
     db8:	9f 3f       	cpi	r25, 0xFF	; 255
     dba:	11 f4       	brne	.+4      	; 0xdc0 <__addsf3+0x1a>
     dbc:	1e f4       	brtc	.+6      	; 0xdc4 <__addsf3+0x1e>
     dbe:	33 c1       	rjmp	.+614    	; 0x1026 <__fp_nan>
     dc0:	0e f4       	brtc	.+2      	; 0xdc4 <__addsf3+0x1e>
     dc2:	e0 95       	com	r30
     dc4:	e7 fb       	bst	r30, 7
     dc6:	29 c1       	rjmp	.+594    	; 0x101a <__fp_inf>

00000dc8 <__addsf3x>:
     dc8:	e9 2f       	mov	r30, r25
     dca:	4f d1       	rcall	.+670    	; 0x106a <__fp_split3>
     dcc:	80 f3       	brcs	.-32     	; 0xdae <__addsf3+0x8>
     dce:	ba 17       	cp	r27, r26
     dd0:	62 07       	cpc	r22, r18
     dd2:	73 07       	cpc	r23, r19
     dd4:	84 07       	cpc	r24, r20
     dd6:	95 07       	cpc	r25, r21
     dd8:	18 f0       	brcs	.+6      	; 0xde0 <__addsf3x+0x18>
     dda:	71 f4       	brne	.+28     	; 0xdf8 <__addsf3x+0x30>
     ddc:	9e f5       	brtc	.+102    	; 0xe44 <__addsf3x+0x7c>
     dde:	67 c1       	rjmp	.+718    	; 0x10ae <__fp_zero>
     de0:	0e f4       	brtc	.+2      	; 0xde4 <__addsf3x+0x1c>
     de2:	e0 95       	com	r30
     de4:	0b 2e       	mov	r0, r27
     de6:	ba 2f       	mov	r27, r26
     de8:	a0 2d       	mov	r26, r0
     dea:	0b 01       	movw	r0, r22
     dec:	b9 01       	movw	r22, r18
     dee:	90 01       	movw	r18, r0
     df0:	0c 01       	movw	r0, r24
     df2:	ca 01       	movw	r24, r20
     df4:	a0 01       	movw	r20, r0
     df6:	11 24       	eor	r1, r1
     df8:	ff 27       	eor	r31, r31
     dfa:	59 1b       	sub	r21, r25
     dfc:	99 f0       	breq	.+38     	; 0xe24 <__addsf3x+0x5c>
     dfe:	59 3f       	cpi	r21, 0xF9	; 249
     e00:	50 f4       	brcc	.+20     	; 0xe16 <__addsf3x+0x4e>
     e02:	50 3e       	cpi	r21, 0xE0	; 224
     e04:	68 f1       	brcs	.+90     	; 0xe60 <__addsf3x+0x98>
     e06:	1a 16       	cp	r1, r26
     e08:	f0 40       	sbci	r31, 0x00	; 0
     e0a:	a2 2f       	mov	r26, r18
     e0c:	23 2f       	mov	r18, r19
     e0e:	34 2f       	mov	r19, r20
     e10:	44 27       	eor	r20, r20
     e12:	58 5f       	subi	r21, 0xF8	; 248
     e14:	f3 cf       	rjmp	.-26     	; 0xdfc <__addsf3x+0x34>
     e16:	46 95       	lsr	r20
     e18:	37 95       	ror	r19
     e1a:	27 95       	ror	r18
     e1c:	a7 95       	ror	r26
     e1e:	f0 40       	sbci	r31, 0x00	; 0
     e20:	53 95       	inc	r21
     e22:	c9 f7       	brne	.-14     	; 0xe16 <__addsf3x+0x4e>
     e24:	7e f4       	brtc	.+30     	; 0xe44 <__addsf3x+0x7c>
     e26:	1f 16       	cp	r1, r31
     e28:	ba 0b       	sbc	r27, r26
     e2a:	62 0b       	sbc	r22, r18
     e2c:	73 0b       	sbc	r23, r19
     e2e:	84 0b       	sbc	r24, r20
     e30:	ba f0       	brmi	.+46     	; 0xe60 <__addsf3x+0x98>
     e32:	91 50       	subi	r25, 0x01	; 1
     e34:	a1 f0       	breq	.+40     	; 0xe5e <__addsf3x+0x96>
     e36:	ff 0f       	add	r31, r31
     e38:	bb 1f       	adc	r27, r27
     e3a:	66 1f       	adc	r22, r22
     e3c:	77 1f       	adc	r23, r23
     e3e:	88 1f       	adc	r24, r24
     e40:	c2 f7       	brpl	.-16     	; 0xe32 <__addsf3x+0x6a>
     e42:	0e c0       	rjmp	.+28     	; 0xe60 <__addsf3x+0x98>
     e44:	ba 0f       	add	r27, r26
     e46:	62 1f       	adc	r22, r18
     e48:	73 1f       	adc	r23, r19
     e4a:	84 1f       	adc	r24, r20
     e4c:	48 f4       	brcc	.+18     	; 0xe60 <__addsf3x+0x98>
     e4e:	87 95       	ror	r24
     e50:	77 95       	ror	r23
     e52:	67 95       	ror	r22
     e54:	b7 95       	ror	r27
     e56:	f7 95       	ror	r31
     e58:	9e 3f       	cpi	r25, 0xFE	; 254
     e5a:	08 f0       	brcs	.+2      	; 0xe5e <__addsf3x+0x96>
     e5c:	b3 cf       	rjmp	.-154    	; 0xdc4 <__addsf3+0x1e>
     e5e:	93 95       	inc	r25
     e60:	88 0f       	add	r24, r24
     e62:	08 f0       	brcs	.+2      	; 0xe66 <__addsf3x+0x9e>
     e64:	99 27       	eor	r25, r25
     e66:	ee 0f       	add	r30, r30
     e68:	97 95       	ror	r25
     e6a:	87 95       	ror	r24
     e6c:	08 95       	ret

00000e6e <__divsf3>:
     e6e:	0c d0       	rcall	.+24     	; 0xe88 <__divsf3x>
     e70:	eb c0       	rjmp	.+470    	; 0x1048 <__fp_round>
     e72:	e3 d0       	rcall	.+454    	; 0x103a <__fp_pscB>
     e74:	40 f0       	brcs	.+16     	; 0xe86 <__divsf3+0x18>
     e76:	da d0       	rcall	.+436    	; 0x102c <__fp_pscA>
     e78:	30 f0       	brcs	.+12     	; 0xe86 <__divsf3+0x18>
     e7a:	21 f4       	brne	.+8      	; 0xe84 <__divsf3+0x16>
     e7c:	5f 3f       	cpi	r21, 0xFF	; 255
     e7e:	19 f0       	breq	.+6      	; 0xe86 <__divsf3+0x18>
     e80:	cc c0       	rjmp	.+408    	; 0x101a <__fp_inf>
     e82:	51 11       	cpse	r21, r1
     e84:	15 c1       	rjmp	.+554    	; 0x10b0 <__fp_szero>
     e86:	cf c0       	rjmp	.+414    	; 0x1026 <__fp_nan>

00000e88 <__divsf3x>:
     e88:	f0 d0       	rcall	.+480    	; 0x106a <__fp_split3>
     e8a:	98 f3       	brcs	.-26     	; 0xe72 <__divsf3+0x4>

00000e8c <__divsf3_pse>:
     e8c:	99 23       	and	r25, r25
     e8e:	c9 f3       	breq	.-14     	; 0xe82 <__divsf3+0x14>
     e90:	55 23       	and	r21, r21
     e92:	b1 f3       	breq	.-20     	; 0xe80 <__divsf3+0x12>
     e94:	95 1b       	sub	r25, r21
     e96:	55 0b       	sbc	r21, r21
     e98:	bb 27       	eor	r27, r27
     e9a:	aa 27       	eor	r26, r26
     e9c:	62 17       	cp	r22, r18
     e9e:	73 07       	cpc	r23, r19
     ea0:	84 07       	cpc	r24, r20
     ea2:	38 f0       	brcs	.+14     	; 0xeb2 <__divsf3_pse+0x26>
     ea4:	9f 5f       	subi	r25, 0xFF	; 255
     ea6:	5f 4f       	sbci	r21, 0xFF	; 255
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	44 1f       	adc	r20, r20
     eae:	aa 1f       	adc	r26, r26
     eb0:	a9 f3       	breq	.-22     	; 0xe9c <__divsf3_pse+0x10>
     eb2:	33 d0       	rcall	.+102    	; 0xf1a <__divsf3_pse+0x8e>
     eb4:	0e 2e       	mov	r0, r30
     eb6:	3a f0       	brmi	.+14     	; 0xec6 <__divsf3_pse+0x3a>
     eb8:	e0 e8       	ldi	r30, 0x80	; 128
     eba:	30 d0       	rcall	.+96     	; 0xf1c <__divsf3_pse+0x90>
     ebc:	91 50       	subi	r25, 0x01	; 1
     ebe:	50 40       	sbci	r21, 0x00	; 0
     ec0:	e6 95       	lsr	r30
     ec2:	00 1c       	adc	r0, r0
     ec4:	ca f7       	brpl	.-14     	; 0xeb8 <__divsf3_pse+0x2c>
     ec6:	29 d0       	rcall	.+82     	; 0xf1a <__divsf3_pse+0x8e>
     ec8:	fe 2f       	mov	r31, r30
     eca:	27 d0       	rcall	.+78     	; 0xf1a <__divsf3_pse+0x8e>
     ecc:	66 0f       	add	r22, r22
     ece:	77 1f       	adc	r23, r23
     ed0:	88 1f       	adc	r24, r24
     ed2:	bb 1f       	adc	r27, r27
     ed4:	26 17       	cp	r18, r22
     ed6:	37 07       	cpc	r19, r23
     ed8:	48 07       	cpc	r20, r24
     eda:	ab 07       	cpc	r26, r27
     edc:	b0 e8       	ldi	r27, 0x80	; 128
     ede:	09 f0       	breq	.+2      	; 0xee2 <__divsf3_pse+0x56>
     ee0:	bb 0b       	sbc	r27, r27
     ee2:	80 2d       	mov	r24, r0
     ee4:	bf 01       	movw	r22, r30
     ee6:	ff 27       	eor	r31, r31
     ee8:	93 58       	subi	r25, 0x83	; 131
     eea:	5f 4f       	sbci	r21, 0xFF	; 255
     eec:	2a f0       	brmi	.+10     	; 0xef8 <__divsf3_pse+0x6c>
     eee:	9e 3f       	cpi	r25, 0xFE	; 254
     ef0:	51 05       	cpc	r21, r1
     ef2:	68 f0       	brcs	.+26     	; 0xf0e <__divsf3_pse+0x82>
     ef4:	92 c0       	rjmp	.+292    	; 0x101a <__fp_inf>
     ef6:	dc c0       	rjmp	.+440    	; 0x10b0 <__fp_szero>
     ef8:	5f 3f       	cpi	r21, 0xFF	; 255
     efa:	ec f3       	brlt	.-6      	; 0xef6 <__divsf3_pse+0x6a>
     efc:	98 3e       	cpi	r25, 0xE8	; 232
     efe:	dc f3       	brlt	.-10     	; 0xef6 <__divsf3_pse+0x6a>
     f00:	86 95       	lsr	r24
     f02:	77 95       	ror	r23
     f04:	67 95       	ror	r22
     f06:	b7 95       	ror	r27
     f08:	f7 95       	ror	r31
     f0a:	9f 5f       	subi	r25, 0xFF	; 255
     f0c:	c9 f7       	brne	.-14     	; 0xf00 <__divsf3_pse+0x74>
     f0e:	88 0f       	add	r24, r24
     f10:	91 1d       	adc	r25, r1
     f12:	96 95       	lsr	r25
     f14:	87 95       	ror	r24
     f16:	97 f9       	bld	r25, 7
     f18:	08 95       	ret
     f1a:	e1 e0       	ldi	r30, 0x01	; 1
     f1c:	66 0f       	add	r22, r22
     f1e:	77 1f       	adc	r23, r23
     f20:	88 1f       	adc	r24, r24
     f22:	bb 1f       	adc	r27, r27
     f24:	62 17       	cp	r22, r18
     f26:	73 07       	cpc	r23, r19
     f28:	84 07       	cpc	r24, r20
     f2a:	ba 07       	cpc	r27, r26
     f2c:	20 f0       	brcs	.+8      	; 0xf36 <__divsf3_pse+0xaa>
     f2e:	62 1b       	sub	r22, r18
     f30:	73 0b       	sbc	r23, r19
     f32:	84 0b       	sbc	r24, r20
     f34:	ba 0b       	sbc	r27, r26
     f36:	ee 1f       	adc	r30, r30
     f38:	88 f7       	brcc	.-30     	; 0xf1c <__divsf3_pse+0x90>
     f3a:	e0 95       	com	r30
     f3c:	08 95       	ret

00000f3e <__fixsfsi>:
     f3e:	04 d0       	rcall	.+8      	; 0xf48 <__fixunssfsi>
     f40:	68 94       	set
     f42:	b1 11       	cpse	r27, r1
     f44:	b5 c0       	rjmp	.+362    	; 0x10b0 <__fp_szero>
     f46:	08 95       	ret

00000f48 <__fixunssfsi>:
     f48:	98 d0       	rcall	.+304    	; 0x107a <__fp_splitA>
     f4a:	88 f0       	brcs	.+34     	; 0xf6e <__fixunssfsi+0x26>
     f4c:	9f 57       	subi	r25, 0x7F	; 127
     f4e:	90 f0       	brcs	.+36     	; 0xf74 <__fixunssfsi+0x2c>
     f50:	b9 2f       	mov	r27, r25
     f52:	99 27       	eor	r25, r25
     f54:	b7 51       	subi	r27, 0x17	; 23
     f56:	a0 f0       	brcs	.+40     	; 0xf80 <__fixunssfsi+0x38>
     f58:	d1 f0       	breq	.+52     	; 0xf8e <__fixunssfsi+0x46>
     f5a:	66 0f       	add	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	88 1f       	adc	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	1a f0       	brmi	.+6      	; 0xf6a <__fixunssfsi+0x22>
     f64:	ba 95       	dec	r27
     f66:	c9 f7       	brne	.-14     	; 0xf5a <__fixunssfsi+0x12>
     f68:	12 c0       	rjmp	.+36     	; 0xf8e <__fixunssfsi+0x46>
     f6a:	b1 30       	cpi	r27, 0x01	; 1
     f6c:	81 f0       	breq	.+32     	; 0xf8e <__fixunssfsi+0x46>
     f6e:	9f d0       	rcall	.+318    	; 0x10ae <__fp_zero>
     f70:	b1 e0       	ldi	r27, 0x01	; 1
     f72:	08 95       	ret
     f74:	9c c0       	rjmp	.+312    	; 0x10ae <__fp_zero>
     f76:	67 2f       	mov	r22, r23
     f78:	78 2f       	mov	r23, r24
     f7a:	88 27       	eor	r24, r24
     f7c:	b8 5f       	subi	r27, 0xF8	; 248
     f7e:	39 f0       	breq	.+14     	; 0xf8e <__fixunssfsi+0x46>
     f80:	b9 3f       	cpi	r27, 0xF9	; 249
     f82:	cc f3       	brlt	.-14     	; 0xf76 <__fixunssfsi+0x2e>
     f84:	86 95       	lsr	r24
     f86:	77 95       	ror	r23
     f88:	67 95       	ror	r22
     f8a:	b3 95       	inc	r27
     f8c:	d9 f7       	brne	.-10     	; 0xf84 <__fixunssfsi+0x3c>
     f8e:	3e f4       	brtc	.+14     	; 0xf9e <__fixunssfsi+0x56>
     f90:	90 95       	com	r25
     f92:	80 95       	com	r24
     f94:	70 95       	com	r23
     f96:	61 95       	neg	r22
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	8f 4f       	sbci	r24, 0xFF	; 255
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	08 95       	ret

00000fa0 <__floatunsisf>:
     fa0:	e8 94       	clt
     fa2:	09 c0       	rjmp	.+18     	; 0xfb6 <__floatsisf+0x12>

00000fa4 <__floatsisf>:
     fa4:	97 fb       	bst	r25, 7
     fa6:	3e f4       	brtc	.+14     	; 0xfb6 <__floatsisf+0x12>
     fa8:	90 95       	com	r25
     faa:	80 95       	com	r24
     fac:	70 95       	com	r23
     fae:	61 95       	neg	r22
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	8f 4f       	sbci	r24, 0xFF	; 255
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	99 23       	and	r25, r25
     fb8:	a9 f0       	breq	.+42     	; 0xfe4 <__floatsisf+0x40>
     fba:	f9 2f       	mov	r31, r25
     fbc:	96 e9       	ldi	r25, 0x96	; 150
     fbe:	bb 27       	eor	r27, r27
     fc0:	93 95       	inc	r25
     fc2:	f6 95       	lsr	r31
     fc4:	87 95       	ror	r24
     fc6:	77 95       	ror	r23
     fc8:	67 95       	ror	r22
     fca:	b7 95       	ror	r27
     fcc:	f1 11       	cpse	r31, r1
     fce:	f8 cf       	rjmp	.-16     	; 0xfc0 <__floatsisf+0x1c>
     fd0:	fa f4       	brpl	.+62     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
     fd2:	bb 0f       	add	r27, r27
     fd4:	11 f4       	brne	.+4      	; 0xfda <__floatsisf+0x36>
     fd6:	60 ff       	sbrs	r22, 0
     fd8:	1b c0       	rjmp	.+54     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
     fda:	6f 5f       	subi	r22, 0xFF	; 255
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	8f 4f       	sbci	r24, 0xFF	; 255
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	16 c0       	rjmp	.+44     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
     fe4:	88 23       	and	r24, r24
     fe6:	11 f0       	breq	.+4      	; 0xfec <__floatsisf+0x48>
     fe8:	96 e9       	ldi	r25, 0x96	; 150
     fea:	11 c0       	rjmp	.+34     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
     fec:	77 23       	and	r23, r23
     fee:	21 f0       	breq	.+8      	; 0xff8 <__floatsisf+0x54>
     ff0:	9e e8       	ldi	r25, 0x8E	; 142
     ff2:	87 2f       	mov	r24, r23
     ff4:	76 2f       	mov	r23, r22
     ff6:	05 c0       	rjmp	.+10     	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     ff8:	66 23       	and	r22, r22
     ffa:	71 f0       	breq	.+28     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
     ffc:	96 e8       	ldi	r25, 0x86	; 134
     ffe:	86 2f       	mov	r24, r22
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	2a f0       	brmi	.+10     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    1006:	9a 95       	dec	r25
    1008:	66 0f       	add	r22, r22
    100a:	77 1f       	adc	r23, r23
    100c:	88 1f       	adc	r24, r24
    100e:	da f7       	brpl	.-10     	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
    1010:	88 0f       	add	r24, r24
    1012:	96 95       	lsr	r25
    1014:	87 95       	ror	r24
    1016:	97 f9       	bld	r25, 7
    1018:	08 95       	ret

0000101a <__fp_inf>:
    101a:	97 f9       	bld	r25, 7
    101c:	9f 67       	ori	r25, 0x7F	; 127
    101e:	80 e8       	ldi	r24, 0x80	; 128
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	08 95       	ret

00001026 <__fp_nan>:
    1026:	9f ef       	ldi	r25, 0xFF	; 255
    1028:	80 ec       	ldi	r24, 0xC0	; 192
    102a:	08 95       	ret

0000102c <__fp_pscA>:
    102c:	00 24       	eor	r0, r0
    102e:	0a 94       	dec	r0
    1030:	16 16       	cp	r1, r22
    1032:	17 06       	cpc	r1, r23
    1034:	18 06       	cpc	r1, r24
    1036:	09 06       	cpc	r0, r25
    1038:	08 95       	ret

0000103a <__fp_pscB>:
    103a:	00 24       	eor	r0, r0
    103c:	0a 94       	dec	r0
    103e:	12 16       	cp	r1, r18
    1040:	13 06       	cpc	r1, r19
    1042:	14 06       	cpc	r1, r20
    1044:	05 06       	cpc	r0, r21
    1046:	08 95       	ret

00001048 <__fp_round>:
    1048:	09 2e       	mov	r0, r25
    104a:	03 94       	inc	r0
    104c:	00 0c       	add	r0, r0
    104e:	11 f4       	brne	.+4      	; 0x1054 <__fp_round+0xc>
    1050:	88 23       	and	r24, r24
    1052:	52 f0       	brmi	.+20     	; 0x1068 <__fp_round+0x20>
    1054:	bb 0f       	add	r27, r27
    1056:	40 f4       	brcc	.+16     	; 0x1068 <__fp_round+0x20>
    1058:	bf 2b       	or	r27, r31
    105a:	11 f4       	brne	.+4      	; 0x1060 <__fp_round+0x18>
    105c:	60 ff       	sbrs	r22, 0
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <__fp_round+0x20>
    1060:	6f 5f       	subi	r22, 0xFF	; 255
    1062:	7f 4f       	sbci	r23, 0xFF	; 255
    1064:	8f 4f       	sbci	r24, 0xFF	; 255
    1066:	9f 4f       	sbci	r25, 0xFF	; 255
    1068:	08 95       	ret

0000106a <__fp_split3>:
    106a:	57 fd       	sbrc	r21, 7
    106c:	90 58       	subi	r25, 0x80	; 128
    106e:	44 0f       	add	r20, r20
    1070:	55 1f       	adc	r21, r21
    1072:	59 f0       	breq	.+22     	; 0x108a <__fp_splitA+0x10>
    1074:	5f 3f       	cpi	r21, 0xFF	; 255
    1076:	71 f0       	breq	.+28     	; 0x1094 <__fp_splitA+0x1a>
    1078:	47 95       	ror	r20

0000107a <__fp_splitA>:
    107a:	88 0f       	add	r24, r24
    107c:	97 fb       	bst	r25, 7
    107e:	99 1f       	adc	r25, r25
    1080:	61 f0       	breq	.+24     	; 0x109a <__fp_splitA+0x20>
    1082:	9f 3f       	cpi	r25, 0xFF	; 255
    1084:	79 f0       	breq	.+30     	; 0x10a4 <__fp_splitA+0x2a>
    1086:	87 95       	ror	r24
    1088:	08 95       	ret
    108a:	12 16       	cp	r1, r18
    108c:	13 06       	cpc	r1, r19
    108e:	14 06       	cpc	r1, r20
    1090:	55 1f       	adc	r21, r21
    1092:	f2 cf       	rjmp	.-28     	; 0x1078 <__fp_split3+0xe>
    1094:	46 95       	lsr	r20
    1096:	f1 df       	rcall	.-30     	; 0x107a <__fp_splitA>
    1098:	08 c0       	rjmp	.+16     	; 0x10aa <__fp_splitA+0x30>
    109a:	16 16       	cp	r1, r22
    109c:	17 06       	cpc	r1, r23
    109e:	18 06       	cpc	r1, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	f1 cf       	rjmp	.-30     	; 0x1086 <__fp_splitA+0xc>
    10a4:	86 95       	lsr	r24
    10a6:	71 05       	cpc	r23, r1
    10a8:	61 05       	cpc	r22, r1
    10aa:	08 94       	sec
    10ac:	08 95       	ret

000010ae <__fp_zero>:
    10ae:	e8 94       	clt

000010b0 <__fp_szero>:
    10b0:	bb 27       	eor	r27, r27
    10b2:	66 27       	eor	r22, r22
    10b4:	77 27       	eor	r23, r23
    10b6:	cb 01       	movw	r24, r22
    10b8:	97 f9       	bld	r25, 7
    10ba:	08 95       	ret
    10bc:	0e f0       	brts	.+2      	; 0x10c0 <__fp_szero+0x10>
    10be:	a6 c0       	rjmp	.+332    	; 0x120c <__fp_mpack>
    10c0:	b2 cf       	rjmp	.-156    	; 0x1026 <__fp_nan>
    10c2:	68 94       	set
    10c4:	aa cf       	rjmp	.-172    	; 0x101a <__fp_inf>

000010c6 <log>:
    10c6:	d9 df       	rcall	.-78     	; 0x107a <__fp_splitA>
    10c8:	c8 f3       	brcs	.-14     	; 0x10bc <__fp_szero+0xc>
    10ca:	99 23       	and	r25, r25
    10cc:	d1 f3       	breq	.-12     	; 0x10c2 <__fp_szero+0x12>
    10ce:	c6 f3       	brts	.-16     	; 0x10c0 <__fp_szero+0x10>
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	1f 93       	push	r17
    10d6:	0f 93       	push	r16
    10d8:	ff 92       	push	r15
    10da:	c9 2f       	mov	r28, r25
    10dc:	dd 27       	eor	r29, r29
    10de:	88 23       	and	r24, r24
    10e0:	2a f0       	brmi	.+10     	; 0x10ec <log+0x26>
    10e2:	21 97       	sbiw	r28, 0x01	; 1
    10e4:	66 0f       	add	r22, r22
    10e6:	77 1f       	adc	r23, r23
    10e8:	88 1f       	adc	r24, r24
    10ea:	da f7       	brpl	.-10     	; 0x10e2 <log+0x1c>
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f eb       	ldi	r21, 0xBF	; 191
    10f4:	9f e3       	ldi	r25, 0x3F	; 63
    10f6:	88 39       	cpi	r24, 0x98	; 152
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <log+0x3c>
    10fa:	80 3e       	cpi	r24, 0xE0	; 224
    10fc:	30 f0       	brcs	.+12     	; 0x110a <log+0x44>
    10fe:	21 96       	adiw	r28, 0x01	; 1
    1100:	8f 77       	andi	r24, 0x7F	; 127
    1102:	51 de       	rcall	.-862    	; 0xda6 <__addsf3>
    1104:	ea ef       	ldi	r30, 0xFA	; 250
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <log+0x4a>
    110a:	4d de       	rcall	.-870    	; 0xda6 <__addsf3>
    110c:	e7 e2       	ldi	r30, 0x27	; 39
    110e:	f1 e0       	ldi	r31, 0x01	; 1
    1110:	8b d0       	rcall	.+278    	; 0x1228 <__fp_powser>
    1112:	8b 01       	movw	r16, r22
    1114:	be 01       	movw	r22, r28
    1116:	ec 01       	movw	r28, r24
    1118:	fb 2e       	mov	r15, r27
    111a:	6f 57       	subi	r22, 0x7F	; 127
    111c:	71 09       	sbc	r23, r1
    111e:	75 95       	asr	r23
    1120:	77 1f       	adc	r23, r23
    1122:	88 0b       	sbc	r24, r24
    1124:	99 0b       	sbc	r25, r25
    1126:	3e df       	rcall	.-388    	; 0xfa4 <__floatsisf>
    1128:	28 e1       	ldi	r18, 0x18	; 24
    112a:	32 e7       	ldi	r19, 0x72	; 114
    112c:	41 e3       	ldi	r20, 0x31	; 49
    112e:	5f e3       	ldi	r21, 0x3F	; 63
    1130:	16 d0       	rcall	.+44     	; 0x115e <__mulsf3x>
    1132:	af 2d       	mov	r26, r15
    1134:	98 01       	movw	r18, r16
    1136:	ae 01       	movw	r20, r28
    1138:	ff 90       	pop	r15
    113a:	0f 91       	pop	r16
    113c:	1f 91       	pop	r17
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	42 de       	rcall	.-892    	; 0xdc8 <__addsf3x>
    1144:	81 cf       	rjmp	.-254    	; 0x1048 <__fp_round>

00001146 <__mulsf3>:
    1146:	0b d0       	rcall	.+22     	; 0x115e <__mulsf3x>
    1148:	7f cf       	rjmp	.-258    	; 0x1048 <__fp_round>
    114a:	70 df       	rcall	.-288    	; 0x102c <__fp_pscA>
    114c:	28 f0       	brcs	.+10     	; 0x1158 <__mulsf3+0x12>
    114e:	75 df       	rcall	.-278    	; 0x103a <__fp_pscB>
    1150:	18 f0       	brcs	.+6      	; 0x1158 <__mulsf3+0x12>
    1152:	95 23       	and	r25, r21
    1154:	09 f0       	breq	.+2      	; 0x1158 <__mulsf3+0x12>
    1156:	61 cf       	rjmp	.-318    	; 0x101a <__fp_inf>
    1158:	66 cf       	rjmp	.-308    	; 0x1026 <__fp_nan>
    115a:	11 24       	eor	r1, r1
    115c:	a9 cf       	rjmp	.-174    	; 0x10b0 <__fp_szero>

0000115e <__mulsf3x>:
    115e:	85 df       	rcall	.-246    	; 0x106a <__fp_split3>
    1160:	a0 f3       	brcs	.-24     	; 0x114a <__mulsf3+0x4>

00001162 <__mulsf3_pse>:
    1162:	95 9f       	mul	r25, r21
    1164:	d1 f3       	breq	.-12     	; 0x115a <__mulsf3+0x14>
    1166:	95 0f       	add	r25, r21
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	55 1f       	adc	r21, r21
    116c:	62 9f       	mul	r22, r18
    116e:	f0 01       	movw	r30, r0
    1170:	72 9f       	mul	r23, r18
    1172:	bb 27       	eor	r27, r27
    1174:	f0 0d       	add	r31, r0
    1176:	b1 1d       	adc	r27, r1
    1178:	63 9f       	mul	r22, r19
    117a:	aa 27       	eor	r26, r26
    117c:	f0 0d       	add	r31, r0
    117e:	b1 1d       	adc	r27, r1
    1180:	aa 1f       	adc	r26, r26
    1182:	64 9f       	mul	r22, r20
    1184:	66 27       	eor	r22, r22
    1186:	b0 0d       	add	r27, r0
    1188:	a1 1d       	adc	r26, r1
    118a:	66 1f       	adc	r22, r22
    118c:	82 9f       	mul	r24, r18
    118e:	22 27       	eor	r18, r18
    1190:	b0 0d       	add	r27, r0
    1192:	a1 1d       	adc	r26, r1
    1194:	62 1f       	adc	r22, r18
    1196:	73 9f       	mul	r23, r19
    1198:	b0 0d       	add	r27, r0
    119a:	a1 1d       	adc	r26, r1
    119c:	62 1f       	adc	r22, r18
    119e:	83 9f       	mul	r24, r19
    11a0:	a0 0d       	add	r26, r0
    11a2:	61 1d       	adc	r22, r1
    11a4:	22 1f       	adc	r18, r18
    11a6:	74 9f       	mul	r23, r20
    11a8:	33 27       	eor	r19, r19
    11aa:	a0 0d       	add	r26, r0
    11ac:	61 1d       	adc	r22, r1
    11ae:	23 1f       	adc	r18, r19
    11b0:	84 9f       	mul	r24, r20
    11b2:	60 0d       	add	r22, r0
    11b4:	21 1d       	adc	r18, r1
    11b6:	82 2f       	mov	r24, r18
    11b8:	76 2f       	mov	r23, r22
    11ba:	6a 2f       	mov	r22, r26
    11bc:	11 24       	eor	r1, r1
    11be:	9f 57       	subi	r25, 0x7F	; 127
    11c0:	50 40       	sbci	r21, 0x00	; 0
    11c2:	8a f0       	brmi	.+34     	; 0x11e6 <__mulsf3_pse+0x84>
    11c4:	e1 f0       	breq	.+56     	; 0x11fe <__mulsf3_pse+0x9c>
    11c6:	88 23       	and	r24, r24
    11c8:	4a f0       	brmi	.+18     	; 0x11dc <__mulsf3_pse+0x7a>
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	bb 1f       	adc	r27, r27
    11d0:	66 1f       	adc	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	88 1f       	adc	r24, r24
    11d6:	91 50       	subi	r25, 0x01	; 1
    11d8:	50 40       	sbci	r21, 0x00	; 0
    11da:	a9 f7       	brne	.-22     	; 0x11c6 <__mulsf3_pse+0x64>
    11dc:	9e 3f       	cpi	r25, 0xFE	; 254
    11de:	51 05       	cpc	r21, r1
    11e0:	70 f0       	brcs	.+28     	; 0x11fe <__mulsf3_pse+0x9c>
    11e2:	1b cf       	rjmp	.-458    	; 0x101a <__fp_inf>
    11e4:	65 cf       	rjmp	.-310    	; 0x10b0 <__fp_szero>
    11e6:	5f 3f       	cpi	r21, 0xFF	; 255
    11e8:	ec f3       	brlt	.-6      	; 0x11e4 <__mulsf3_pse+0x82>
    11ea:	98 3e       	cpi	r25, 0xE8	; 232
    11ec:	dc f3       	brlt	.-10     	; 0x11e4 <__mulsf3_pse+0x82>
    11ee:	86 95       	lsr	r24
    11f0:	77 95       	ror	r23
    11f2:	67 95       	ror	r22
    11f4:	b7 95       	ror	r27
    11f6:	f7 95       	ror	r31
    11f8:	e7 95       	ror	r30
    11fa:	9f 5f       	subi	r25, 0xFF	; 255
    11fc:	c1 f7       	brne	.-16     	; 0x11ee <__mulsf3_pse+0x8c>
    11fe:	fe 2b       	or	r31, r30
    1200:	88 0f       	add	r24, r24
    1202:	91 1d       	adc	r25, r1
    1204:	96 95       	lsr	r25
    1206:	87 95       	ror	r24
    1208:	97 f9       	bld	r25, 7
    120a:	08 95       	ret

0000120c <__fp_mpack>:
    120c:	9f 3f       	cpi	r25, 0xFF	; 255
    120e:	31 f0       	breq	.+12     	; 0x121c <__fp_mpack_finite+0xc>

00001210 <__fp_mpack_finite>:
    1210:	91 50       	subi	r25, 0x01	; 1
    1212:	20 f4       	brcc	.+8      	; 0x121c <__fp_mpack_finite+0xc>
    1214:	87 95       	ror	r24
    1216:	77 95       	ror	r23
    1218:	67 95       	ror	r22
    121a:	b7 95       	ror	r27
    121c:	88 0f       	add	r24, r24
    121e:	91 1d       	adc	r25, r1
    1220:	96 95       	lsr	r25
    1222:	87 95       	ror	r24
    1224:	97 f9       	bld	r25, 7
    1226:	08 95       	ret

00001228 <__fp_powser>:
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	1f 93       	push	r17
    122e:	0f 93       	push	r16
    1230:	ff 92       	push	r15
    1232:	ef 92       	push	r14
    1234:	df 92       	push	r13
    1236:	7b 01       	movw	r14, r22
    1238:	8c 01       	movw	r16, r24
    123a:	68 94       	set
    123c:	05 c0       	rjmp	.+10     	; 0x1248 <__fp_powser+0x20>
    123e:	da 2e       	mov	r13, r26
    1240:	ef 01       	movw	r28, r30
    1242:	8d df       	rcall	.-230    	; 0x115e <__mulsf3x>
    1244:	fe 01       	movw	r30, r28
    1246:	e8 94       	clt
    1248:	a5 91       	lpm	r26, Z+
    124a:	25 91       	lpm	r18, Z+
    124c:	35 91       	lpm	r19, Z+
    124e:	45 91       	lpm	r20, Z+
    1250:	55 91       	lpm	r21, Z+
    1252:	ae f3       	brts	.-22     	; 0x123e <__fp_powser+0x16>
    1254:	ef 01       	movw	r28, r30
    1256:	b8 dd       	rcall	.-1168   	; 0xdc8 <__addsf3x>
    1258:	fe 01       	movw	r30, r28
    125a:	97 01       	movw	r18, r14
    125c:	a8 01       	movw	r20, r16
    125e:	da 94       	dec	r13
    1260:	79 f7       	brne	.-34     	; 0x1240 <__fp_powser+0x18>
    1262:	df 90       	pop	r13
    1264:	ef 90       	pop	r14
    1266:	ff 90       	pop	r15
    1268:	0f 91       	pop	r16
    126a:	1f 91       	pop	r17
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1272:	1f 92       	push	r1
    1274:	0f 92       	push	r0
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	0f 92       	push	r0
    127a:	11 24       	eor	r1, r1
    127c:	0b b6       	in	r0, 0x3b	; 59
    127e:	0f 92       	push	r0
    1280:	2f 93       	push	r18
    1282:	8f 93       	push	r24
    1284:	9f 93       	push	r25
    1286:	ef 93       	push	r30
    1288:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    128a:	e0 91 a7 04 	lds	r30, 0x04A7	; 0x8004a7 <Serial+0x10>
    128e:	f0 91 a8 04 	lds	r31, 0x04A8	; 0x8004a8 <Serial+0x11>
    1292:	80 81       	ld	r24, Z
    1294:	e0 91 ad 04 	lds	r30, 0x04AD	; 0x8004ad <Serial+0x16>
    1298:	f0 91 ae 04 	lds	r31, 0x04AE	; 0x8004ae <Serial+0x17>
    129c:	82 fd       	sbrc	r24, 2
    129e:	12 c0       	rjmp	.+36     	; 0x12c4 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    12a0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    12a2:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <Serial+0x19>
    12a6:	8f 5f       	subi	r24, 0xFF	; 255
    12a8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    12aa:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <Serial+0x1a>
    12ae:	82 17       	cp	r24, r18
    12b0:	51 f0       	breq	.+20     	; 0x12c6 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    12b2:	e0 91 b0 04 	lds	r30, 0x04B0	; 0x8004b0 <Serial+0x19>
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	e9 56       	subi	r30, 0x69	; 105
    12ba:	fb 4f       	sbci	r31, 0xFB	; 251
    12bc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    12be:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <Serial+0x19>
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    12c4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    12c6:	ff 91       	pop	r31
    12c8:	ef 91       	pop	r30
    12ca:	9f 91       	pop	r25
    12cc:	8f 91       	pop	r24
    12ce:	2f 91       	pop	r18
    12d0:	0f 90       	pop	r0
    12d2:	0b be       	out	0x3b, r0	; 59
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	0f 90       	pop	r0
    12da:	1f 90       	pop	r1
    12dc:	18 95       	reti

000012de <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    12de:	1f 92       	push	r1
    12e0:	0f 92       	push	r0
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	0f 92       	push	r0
    12e6:	11 24       	eor	r1, r1
    12e8:	0b b6       	in	r0, 0x3b	; 59
    12ea:	0f 92       	push	r0
    12ec:	2f 93       	push	r18
    12ee:	3f 93       	push	r19
    12f0:	4f 93       	push	r20
    12f2:	5f 93       	push	r21
    12f4:	6f 93       	push	r22
    12f6:	7f 93       	push	r23
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
    1300:	ef 93       	push	r30
    1302:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1304:	87 e9       	ldi	r24, 0x97	; 151
    1306:	94 e0       	ldi	r25, 0x04	; 4
    1308:	54 d3       	rcall	.+1704   	; 0x19b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    130a:	ff 91       	pop	r31
    130c:	ef 91       	pop	r30
    130e:	bf 91       	pop	r27
    1310:	af 91       	pop	r26
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	7f 91       	pop	r23
    1318:	6f 91       	pop	r22
    131a:	5f 91       	pop	r21
    131c:	4f 91       	pop	r20
    131e:	3f 91       	pop	r19
    1320:	2f 91       	pop	r18
    1322:	0f 90       	pop	r0
    1324:	0b be       	out	0x3b, r0	; 59
    1326:	0f 90       	pop	r0
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	0f 90       	pop	r0
    132c:	1f 90       	pop	r1
    132e:	18 95       	reti

00001330 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1330:	87 e9       	ldi	r24, 0x97	; 151
    1332:	94 e0       	ldi	r25, 0x04	; 4
    1334:	c5 d2       	rcall	.+1418   	; 0x18c0 <_ZN14HardwareSerial9availableEv>
    1336:	21 e0       	ldi	r18, 0x01	; 1
    1338:	89 2b       	or	r24, r25
    133a:	09 f4       	brne	.+2      	; 0x133e <_Z17Serial0_availablev+0xe>
    133c:	20 e0       	ldi	r18, 0x00	; 0
}
    133e:	82 2f       	mov	r24, r18
    1340:	08 95       	ret

00001342 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1342:	e7 e9       	ldi	r30, 0x97	; 151
    1344:	f4 e0       	ldi	r31, 0x04	; 4
    1346:	13 82       	std	Z+3, r1	; 0x03
    1348:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    134a:	88 ee       	ldi	r24, 0xE8	; 232
    134c:	93 e0       	ldi	r25, 0x03	; 3
    134e:	a0 e0       	ldi	r26, 0x00	; 0
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	84 83       	std	Z+4, r24	; 0x04
    1354:	95 83       	std	Z+5, r25	; 0x05
    1356:	a6 83       	std	Z+6, r26	; 0x06
    1358:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    135a:	84 e7       	ldi	r24, 0x74	; 116
    135c:	93 e0       	ldi	r25, 0x03	; 3
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	80 83       	st	Z, r24
    1362:	85 ec       	ldi	r24, 0xC5	; 197
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	95 87       	std	Z+13, r25	; 0x0d
    1368:	84 87       	std	Z+12, r24	; 0x0c
    136a:	84 ec       	ldi	r24, 0xC4	; 196
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	97 87       	std	Z+15, r25	; 0x0f
    1370:	86 87       	std	Z+14, r24	; 0x0e
    1372:	80 ec       	ldi	r24, 0xC0	; 192
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	91 8b       	std	Z+17, r25	; 0x11
    1378:	80 8b       	std	Z+16, r24	; 0x10
    137a:	81 ec       	ldi	r24, 0xC1	; 193
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	93 8b       	std	Z+19, r25	; 0x13
    1380:	82 8b       	std	Z+18, r24	; 0x12
    1382:	82 ec       	ldi	r24, 0xC2	; 194
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	95 8b       	std	Z+21, r25	; 0x15
    1388:	84 8b       	std	Z+20, r24	; 0x14
    138a:	86 ec       	ldi	r24, 0xC6	; 198
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	97 8b       	std	Z+23, r25	; 0x17
    1390:	86 8b       	std	Z+22, r24	; 0x16
    1392:	11 8e       	std	Z+25, r1	; 0x19
    1394:	12 8e       	std	Z+26, r1	; 0x1a
    1396:	13 8e       	std	Z+27, r1	; 0x1b
    1398:	14 8e       	std	Z+28, r1	; 0x1c
    139a:	08 95       	ret

0000139c <initVariant>:
    139c:	08 95       	ret

0000139e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    139e:	22 d1       	rcall	.+580    	; 0x15e4 <init>

	initVariant();
    13a0:	fd df       	rcall	.-6      	; 0x139c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    13a2:	3f d9       	rcall	.-3458   	; 0x622 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    13a4:	cd e9       	ldi	r28, 0x9D	; 157
    13a6:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    13a8:	42 d9       	rcall	.-3452   	; 0x62e <loop>
		if (serialEventRun) serialEventRun();
    13aa:	20 97       	sbiw	r28, 0x00	; 0
    13ac:	e9 f3       	breq	.-6      	; 0x13a8 <main+0xa>
    13ae:	c5 d2       	rcall	.+1418   	; 0x193a <_Z14serialEventRunv>
    13b0:	fb cf       	rjmp	.-10     	; 0x13a8 <main+0xa>

000013b2 <_ZN5Print5writeEPKhj>:
    13b2:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    13b4:	df 92       	push	r13
    13b6:	ef 92       	push	r14
    13b8:	ff 92       	push	r15
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	6c 01       	movw	r12, r24
    13c4:	7a 01       	movw	r14, r20
    13c6:	8b 01       	movw	r16, r22
    13c8:	c0 e0       	ldi	r28, 0x00	; 0
    13ca:	d0 e0       	ldi	r29, 0x00	; 0
    13cc:	ce 15       	cp	r28, r14
    13ce:	df 05       	cpc	r29, r15
    13d0:	81 f0       	breq	.+32     	; 0x13f2 <_ZN5Print5writeEPKhj+0x40>
    13d2:	d8 01       	movw	r26, r16
    13d4:	6d 91       	ld	r22, X+
    13d6:	8d 01       	movw	r16, r26
    13d8:	d6 01       	movw	r26, r12
    13da:	ed 91       	ld	r30, X+
    13dc:	fc 91       	ld	r31, X
    13de:	01 90       	ld	r0, Z+
    13e0:	f0 81       	ld	r31, Z
    13e2:	e0 2d       	mov	r30, r0
    13e4:	c6 01       	movw	r24, r12
    13e6:	19 95       	eicall
    13e8:	89 2b       	or	r24, r25
    13ea:	11 f0       	breq	.+4      	; 0x13f0 <_ZN5Print5writeEPKhj+0x3e>
    13ec:	21 96       	adiw	r28, 0x01	; 1
    13ee:	ee cf       	rjmp	.-36     	; 0x13cc <_ZN5Print5writeEPKhj+0x1a>
    13f0:	7e 01       	movw	r14, r28
    13f2:	c7 01       	movw	r24, r14
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	08 95       	ret

00001406 <_ZN5Print5printEc>:
    1406:	dc 01       	movw	r26, r24
    1408:	ed 91       	ld	r30, X+
    140a:	fc 91       	ld	r31, X
    140c:	01 90       	ld	r0, Z+
    140e:	f0 81       	ld	r31, Z
    1410:	e0 2d       	mov	r30, r0
    1412:	19 94       	eijmp

00001414 <_ZN5Print11printNumberEmh>:
    1414:	8f 92       	push	r8
    1416:	9f 92       	push	r9
    1418:	af 92       	push	r10
    141a:	bf 92       	push	r11
    141c:	ef 92       	push	r14
    141e:	ff 92       	push	r15
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	a1 97       	sbiw	r28, 0x21	; 33
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	7c 01       	movw	r14, r24
    143a:	fa 01       	movw	r30, r20
    143c:	cb 01       	movw	r24, r22
    143e:	19 a2       	std	Y+33, r1	; 0x21
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	08 f4       	brcc	.+2      	; 0x1446 <_ZN5Print11printNumberEmh+0x32>
    1444:	2a e0       	ldi	r18, 0x0A	; 10
    1446:	8e 01       	movw	r16, r28
    1448:	0f 5d       	subi	r16, 0xDF	; 223
    144a:	1f 4f       	sbci	r17, 0xFF	; 255
    144c:	82 2e       	mov	r8, r18
    144e:	91 2c       	mov	r9, r1
    1450:	a1 2c       	mov	r10, r1
    1452:	b1 2c       	mov	r11, r1
    1454:	bf 01       	movw	r22, r30
    1456:	a5 01       	movw	r20, r10
    1458:	94 01       	movw	r18, r8
    145a:	3a d3       	rcall	.+1652   	; 0x1ad0 <__udivmodsi4>
    145c:	f9 01       	movw	r30, r18
    145e:	ca 01       	movw	r24, r20
    1460:	01 50       	subi	r16, 0x01	; 1
    1462:	11 09       	sbc	r17, r1
    1464:	6a 30       	cpi	r22, 0x0A	; 10
    1466:	10 f4       	brcc	.+4      	; 0x146c <_ZN5Print11printNumberEmh+0x58>
    1468:	60 5d       	subi	r22, 0xD0	; 208
    146a:	01 c0       	rjmp	.+2      	; 0x146e <_ZN5Print11printNumberEmh+0x5a>
    146c:	69 5c       	subi	r22, 0xC9	; 201
    146e:	d8 01       	movw	r26, r16
    1470:	6c 93       	st	X, r22
    1472:	23 2b       	or	r18, r19
    1474:	24 2b       	or	r18, r20
    1476:	25 2b       	or	r18, r21
    1478:	69 f7       	brne	.-38     	; 0x1454 <_ZN5Print11printNumberEmh+0x40>
    147a:	b8 01       	movw	r22, r16
    147c:	c7 01       	movw	r24, r14
    147e:	0e 94 80 01 	call	0x300	; 0x300 <_ZN5Print5writeEPKc>
    1482:	a1 96       	adiw	r28, 0x21	; 33
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	ff 90       	pop	r15
    1498:	ef 90       	pop	r14
    149a:	bf 90       	pop	r11
    149c:	af 90       	pop	r10
    149e:	9f 90       	pop	r9
    14a0:	8f 90       	pop	r8
    14a2:	08 95       	ret

000014a4 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    14a4:	cf 92       	push	r12
    14a6:	df 92       	push	r13
    14a8:	ef 92       	push	r14
    14aa:	ff 92       	push	r15
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
  if (base == 0) {
    14b4:	21 15       	cp	r18, r1
    14b6:	31 05       	cpc	r19, r1
    14b8:	81 f4       	brne	.+32     	; 0x14da <_ZN5Print5printEli+0x36>
    return write(n);
    14ba:	dc 01       	movw	r26, r24
    14bc:	ed 91       	ld	r30, X+
    14be:	fc 91       	ld	r31, X
    14c0:	01 90       	ld	r0, Z+
    14c2:	f0 81       	ld	r31, Z
    14c4:	e0 2d       	mov	r30, r0
    14c6:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	df 90       	pop	r13
    14d6:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    14d8:	19 94       	eijmp
  } else if (base == 10) {
    14da:	2a 30       	cpi	r18, 0x0A	; 10
    14dc:	31 05       	cpc	r19, r1
    14de:	f1 f4       	brne	.+60     	; 0x151c <_ZN5Print5printEli+0x78>
    if (n < 0) {
    14e0:	77 ff       	sbrs	r23, 7
    14e2:	1b c0       	rjmp	.+54     	; 0x151a <_ZN5Print5printEli+0x76>
    14e4:	6a 01       	movw	r12, r20
    14e6:	7b 01       	movw	r14, r22
    14e8:	ec 01       	movw	r28, r24
      int t = print('-');
    14ea:	6d e2       	ldi	r22, 0x2D	; 45
    14ec:	8c df       	rcall	.-232    	; 0x1406 <_ZN5Print5printEc>
    14ee:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    14f0:	44 27       	eor	r20, r20
    14f2:	55 27       	eor	r21, r21
    14f4:	ba 01       	movw	r22, r20
    14f6:	4c 19       	sub	r20, r12
    14f8:	5d 09       	sbc	r21, r13
    14fa:	6e 09       	sbc	r22, r14
    14fc:	7f 09       	sbc	r23, r15
    14fe:	2a e0       	ldi	r18, 0x0A	; 10
    1500:	ce 01       	movw	r24, r28
    1502:	88 df       	rcall	.-240    	; 0x1414 <_ZN5Print11printNumberEmh>
    1504:	80 0f       	add	r24, r16
    1506:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	ff 90       	pop	r15
    1512:	ef 90       	pop	r14
    1514:	df 90       	pop	r13
    1516:	cf 90       	pop	r12
    1518:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    151a:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	ff 90       	pop	r15
    1526:	ef 90       	pop	r14
    1528:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    152a:	cf 90       	pop	r12
    152c:	73 cf       	rjmp	.-282    	; 0x1414 <_ZN5Print11printNumberEmh>

0000152e <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    152e:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1530:	ab 01       	movw	r20, r22
    1532:	77 0f       	add	r23, r23
    1534:	66 0b       	sbc	r22, r22
    1536:	77 0b       	sbc	r23, r23
    1538:	b5 cf       	rjmp	.-150    	; 0x14a4 <_ZN5Print5printEli>

0000153a <__vector_23>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    153a:	1f 92       	push	r1
    153c:	0f 92       	push	r0
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	0f 92       	push	r0
    1542:	11 24       	eor	r1, r1
    1544:	2f 93       	push	r18
    1546:	3f 93       	push	r19
    1548:	8f 93       	push	r24
    154a:	9f 93       	push	r25
    154c:	af 93       	push	r26
    154e:	bf 93       	push	r27
    1550:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <timer0_millis>
    1554:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <timer0_millis+0x1>
    1558:	a0 91 37 05 	lds	r26, 0x0537	; 0x800537 <timer0_millis+0x2>
    155c:	b0 91 38 05 	lds	r27, 0x0538	; 0x800538 <timer0_millis+0x3>
    1560:	30 91 34 05 	lds	r19, 0x0534	; 0x800534 <timer0_fract>
    1564:	23 e0       	ldi	r18, 0x03	; 3
    1566:	23 0f       	add	r18, r19
    1568:	2d 37       	cpi	r18, 0x7D	; 125
    156a:	20 f4       	brcc	.+8      	; 0x1574 <__vector_23+0x3a>
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	a1 1d       	adc	r26, r1
    1570:	b1 1d       	adc	r27, r1
    1572:	05 c0       	rjmp	.+10     	; 0x157e <__vector_23+0x44>
    1574:	26 e8       	ldi	r18, 0x86	; 134
    1576:	23 0f       	add	r18, r19
    1578:	02 96       	adiw	r24, 0x02	; 2
    157a:	a1 1d       	adc	r26, r1
    157c:	b1 1d       	adc	r27, r1
    157e:	20 93 34 05 	sts	0x0534, r18	; 0x800534 <timer0_fract>
    1582:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <timer0_millis>
    1586:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <timer0_millis+0x1>
    158a:	a0 93 37 05 	sts	0x0537, r26	; 0x800537 <timer0_millis+0x2>
    158e:	b0 93 38 05 	sts	0x0538, r27	; 0x800538 <timer0_millis+0x3>
    1592:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <timer0_overflow_count>
    1596:	90 91 3a 05 	lds	r25, 0x053A	; 0x80053a <timer0_overflow_count+0x1>
    159a:	a0 91 3b 05 	lds	r26, 0x053B	; 0x80053b <timer0_overflow_count+0x2>
    159e:	b0 91 3c 05 	lds	r27, 0x053C	; 0x80053c <timer0_overflow_count+0x3>
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	a1 1d       	adc	r26, r1
    15a6:	b1 1d       	adc	r27, r1
    15a8:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <timer0_overflow_count>
    15ac:	90 93 3a 05 	sts	0x053A, r25	; 0x80053a <timer0_overflow_count+0x1>
    15b0:	a0 93 3b 05 	sts	0x053B, r26	; 0x80053b <timer0_overflow_count+0x2>
    15b4:	b0 93 3c 05 	sts	0x053C, r27	; 0x80053c <timer0_overflow_count+0x3>
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	91 05       	cpc	r25, r1
    15d2:	38 f0       	brcs	.+14     	; 0x15e2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    15dc:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <delayMicroseconds+0x10>
    15e2:	08 95       	ret

000015e4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    15e4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    15e6:	84 b5       	in	r24, 0x24	; 36
    15e8:	82 60       	ori	r24, 0x02	; 2
    15ea:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    15ec:	84 b5       	in	r24, 0x24	; 36
    15ee:	81 60       	ori	r24, 0x01	; 1
    15f0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    15f2:	85 b5       	in	r24, 0x25	; 37
    15f4:	82 60       	ori	r24, 0x02	; 2
    15f6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    15f8:	85 b5       	in	r24, 0x25	; 37
    15fa:	81 60       	ori	r24, 0x01	; 1
    15fc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    15fe:	ee e6       	ldi	r30, 0x6E	; 110
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	81 60       	ori	r24, 0x01	; 1
    1606:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1608:	e1 e8       	ldi	r30, 0x81	; 129
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    160e:	80 81       	ld	r24, Z
    1610:	82 60       	ori	r24, 0x02	; 2
    1612:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1614:	80 81       	ld	r24, Z
    1616:	81 60       	ori	r24, 0x01	; 1
    1618:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    161a:	e0 e8       	ldi	r30, 0x80	; 128
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	81 60       	ori	r24, 0x01	; 1
    1622:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1624:	e1 eb       	ldi	r30, 0xB1	; 177
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	84 60       	ori	r24, 0x04	; 4
    162c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    162e:	e0 eb       	ldi	r30, 0xB0	; 176
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	81 60       	ori	r24, 0x01	; 1
    1636:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1638:	e1 e9       	ldi	r30, 0x91	; 145
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	82 60       	ori	r24, 0x02	; 2
    1640:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1642:	80 81       	ld	r24, Z
    1644:	81 60       	ori	r24, 0x01	; 1
    1646:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1648:	e0 e9       	ldi	r30, 0x90	; 144
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	81 60       	ori	r24, 0x01	; 1
    1650:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1652:	e1 ea       	ldi	r30, 0xA1	; 161
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	82 60       	ori	r24, 0x02	; 2
    165a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    165c:	80 81       	ld	r24, Z
    165e:	81 60       	ori	r24, 0x01	; 1
    1660:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1662:	e0 ea       	ldi	r30, 0xA0	; 160
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	81 60       	ori	r24, 0x01	; 1
    166a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    166c:	e1 e2       	ldi	r30, 0x21	; 33
    166e:	f1 e0       	ldi	r31, 0x01	; 1
    1670:	80 81       	ld	r24, Z
    1672:	82 60       	ori	r24, 0x02	; 2
    1674:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1676:	80 81       	ld	r24, Z
    1678:	81 60       	ori	r24, 0x01	; 1
    167a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    167c:	e0 e2       	ldi	r30, 0x20	; 32
    167e:	f1 e0       	ldi	r31, 0x01	; 1
    1680:	80 81       	ld	r24, Z
    1682:	81 60       	ori	r24, 0x01	; 1
    1684:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1686:	ea e7       	ldi	r30, 0x7A	; 122
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	84 60       	ori	r24, 0x04	; 4
    168e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1690:	80 81       	ld	r24, Z
    1692:	82 60       	ori	r24, 0x02	; 2
    1694:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1696:	80 81       	ld	r24, Z
    1698:	81 60       	ori	r24, 0x01	; 1
    169a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    169c:	80 81       	ld	r24, Z
    169e:	80 68       	ori	r24, 0x80	; 128
    16a0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    16a2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    16a6:	08 95       	ret

000016a8 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    16a8:	86 33       	cpi	r24, 0x36	; 54
    16aa:	08 f0       	brcs	.+2      	; 0x16ae <analogRead+0x6>
    16ac:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    16ae:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
    16b2:	28 2f       	mov	r18, r24
    16b4:	28 70       	andi	r18, 0x08	; 8
    16b6:	97 7f       	andi	r25, 0xF7	; 247
    16b8:	92 2b       	or	r25, r18
    16ba:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    16be:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <analog_reference>
    16c2:	90 e4       	ldi	r25, 0x40	; 64
    16c4:	29 9f       	mul	r18, r25
    16c6:	90 01       	movw	r18, r0
    16c8:	11 24       	eor	r1, r1
    16ca:	87 70       	andi	r24, 0x07	; 7
    16cc:	82 2b       	or	r24, r18
    16ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    16d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    16d6:	80 64       	ori	r24, 0x40	; 64
    16d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    16dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    16e0:	86 fd       	sbrc	r24, 6
    16e2:	fc cf       	rjmp	.-8      	; 0x16dc <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    16e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	high = ADCH;
    16e8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    16ec:	90 e0       	ldi	r25, 0x00	; 0
}
    16ee:	92 2b       	or	r25, r18
    16f0:	08 95       	ret

000016f2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	fc 01       	movw	r30, r24
    16f6:	31 97       	sbiw	r30, 0x01	; 1
    16f8:	e2 31       	cpi	r30, 0x12	; 18
    16fa:	f1 05       	cpc	r31, r1
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <turnOffPWM+0xe>
    16fe:	4d c0       	rjmp	.+154    	; 0x179a <turnOffPWM+0xa8>
    1700:	88 27       	eor	r24, r24
    1702:	e6 55       	subi	r30, 0x56	; 86
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	8f 4f       	sbci	r24, 0xFF	; 255
    1708:	05 c2       	rjmp	.+1034   	; 0x1b14 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    170a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    170e:	8f 77       	andi	r24, 0x7F	; 127
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1712:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1716:	8f 7d       	andi	r24, 0xDF	; 223
    1718:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    171c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    171e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1722:	87 7f       	andi	r24, 0xF7	; 247
    1724:	f9 cf       	rjmp	.-14     	; 0x1718 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1726:	84 b5       	in	r24, 0x24	; 36
    1728:	8f 77       	andi	r24, 0x7F	; 127
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    172c:	84 b5       	in	r24, 0x24	; 36
    172e:	8f 7d       	andi	r24, 0xDF	; 223
    1730:	84 bd       	out	0x24, r24	; 36
    1732:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1734:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1738:	8f 77       	andi	r24, 0x7F	; 127
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    173c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1740:	8f 7d       	andi	r24, 0xDF	; 223
    1742:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1746:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1748:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    174c:	8f 77       	andi	r24, 0x7F	; 127
    174e:	07 c0       	rjmp	.+14     	; 0x175e <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1750:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1754:	8f 7d       	andi	r24, 0xDF	; 223
    1756:	03 c0       	rjmp	.+6      	; 0x175e <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1758:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    175c:	87 7f       	andi	r24, 0xF7	; 247
    175e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1762:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1764:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1768:	8f 77       	andi	r24, 0x7F	; 127
    176a:	07 c0       	rjmp	.+14     	; 0x177a <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    176c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1770:	8f 7d       	andi	r24, 0xDF	; 223
    1772:	03 c0       	rjmp	.+6      	; 0x177a <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1774:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1778:	87 7f       	andi	r24, 0xF7	; 247
    177a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    177e:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1780:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1784:	8f 77       	andi	r24, 0x7F	; 127
    1786:	07 c0       	rjmp	.+14     	; 0x1796 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1788:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    178c:	8f 7d       	andi	r24, 0xDF	; 223
    178e:	03 c0       	rjmp	.+6      	; 0x1796 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1790:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1794:	87 7f       	andi	r24, 0xF7	; 247
    1796:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    179a:	08 95       	ret

0000179c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	fc 01       	movw	r30, r24
    17a4:	e2 54       	subi	r30, 0x42	; 66
    17a6:	fe 4f       	sbci	r31, 0xFE	; 254
    17a8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    17aa:	fc 01       	movw	r30, r24
    17ac:	ec 5f       	subi	r30, 0xFC	; 252
    17ae:	fd 4f       	sbci	r31, 0xFD	; 253
    17b0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    17b2:	88 23       	and	r24, r24
    17b4:	61 f1       	breq	.+88     	; 0x180e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	fc 01       	movw	r30, r24
    17be:	e2 58       	subi	r30, 0x82	; 130
    17c0:	fd 4f       	sbci	r31, 0xFD	; 253
    17c2:	c5 91       	lpm	r28, Z+
    17c4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    17c6:	fc 01       	movw	r30, r24
    17c8:	ec 59       	subi	r30, 0x9C	; 156
    17ca:	fd 4f       	sbci	r31, 0xFD	; 253
    17cc:	a5 91       	lpm	r26, Z+
    17ce:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    17d0:	61 11       	cpse	r22, r1
    17d2:	09 c0       	rjmp	.+18     	; 0x17e6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    17d4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17d6:	f8 94       	cli
		*reg &= ~bit;
    17d8:	88 81       	ld	r24, Y
    17da:	20 95       	com	r18
    17dc:	82 23       	and	r24, r18
    17de:	88 83       	st	Y, r24
		*out &= ~bit;
    17e0:	ec 91       	ld	r30, X
    17e2:	2e 23       	and	r18, r30
    17e4:	0b c0       	rjmp	.+22     	; 0x17fc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    17e6:	62 30       	cpi	r22, 0x02	; 2
    17e8:	61 f4       	brne	.+24     	; 0x1802 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    17ea:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17ec:	f8 94       	cli
		*reg &= ~bit;
    17ee:	88 81       	ld	r24, Y
    17f0:	32 2f       	mov	r19, r18
    17f2:	30 95       	com	r19
    17f4:	83 23       	and	r24, r19
    17f6:	88 83       	st	Y, r24
		*out |= bit;
    17f8:	ec 91       	ld	r30, X
    17fa:	2e 2b       	or	r18, r30
    17fc:	2c 93       	st	X, r18
		SREG = oldSREG;
    17fe:	9f bf       	out	0x3f, r25	; 63
    1800:	06 c0       	rjmp	.+12     	; 0x180e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1802:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1804:	f8 94       	cli
		*reg |= bit;
    1806:	e8 81       	ld	r30, Y
    1808:	2e 2b       	or	r18, r30
    180a:	28 83       	st	Y, r18
		SREG = oldSREG;
    180c:	8f bf       	out	0x3f, r24	; 63
	}
}
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	08 95       	ret

00001814 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	f9 01       	movw	r30, r18
    1820:	e8 58       	subi	r30, 0x88	; 136
    1822:	fe 4f       	sbci	r31, 0xFE	; 254
    1824:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1826:	f9 01       	movw	r30, r18
    1828:	e2 54       	subi	r30, 0x42	; 66
    182a:	fe 4f       	sbci	r31, 0xFE	; 254
    182c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    182e:	f9 01       	movw	r30, r18
    1830:	ec 5f       	subi	r30, 0xFC	; 252
    1832:	fd 4f       	sbci	r31, 0xFD	; 253
    1834:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1836:	cc 23       	and	r28, r28
    1838:	b9 f0       	breq	.+46     	; 0x1868 <digitalWrite+0x54>
    183a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    183c:	81 11       	cpse	r24, r1
    183e:	59 df       	rcall	.-334    	; 0x16f2 <turnOffPWM>

	out = portOutputRegister(port);
    1840:	ec 2f       	mov	r30, r28
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	ee 0f       	add	r30, r30
    1846:	ff 1f       	adc	r31, r31
    1848:	ec 59       	subi	r30, 0x9C	; 156
    184a:	fd 4f       	sbci	r31, 0xFD	; 253
    184c:	a5 91       	lpm	r26, Z+
    184e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1850:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1852:	f8 94       	cli

	if (val == LOW) {
    1854:	11 11       	cpse	r17, r1
    1856:	04 c0       	rjmp	.+8      	; 0x1860 <digitalWrite+0x4c>
		*out &= ~bit;
    1858:	8c 91       	ld	r24, X
    185a:	d0 95       	com	r29
    185c:	d8 23       	and	r29, r24
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <digitalWrite+0x50>
	} else {
		*out |= bit;
    1860:	ec 91       	ld	r30, X
    1862:	de 2b       	or	r29, r30
    1864:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1866:	9f bf       	out	0x3f, r25	; 63
}
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	1f 91       	pop	r17
    186e:	08 95       	ret

00001870 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	f9 01       	movw	r30, r18
    187a:	e8 58       	subi	r30, 0x88	; 136
    187c:	fe 4f       	sbci	r31, 0xFE	; 254
    187e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1880:	f9 01       	movw	r30, r18
    1882:	e2 54       	subi	r30, 0x42	; 66
    1884:	fe 4f       	sbci	r31, 0xFE	; 254
    1886:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1888:	f9 01       	movw	r30, r18
    188a:	ec 5f       	subi	r30, 0xFC	; 252
    188c:	fd 4f       	sbci	r31, 0xFD	; 253
    188e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1890:	cc 23       	and	r28, r28
    1892:	89 f0       	breq	.+34     	; 0x18b6 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1894:	81 11       	cpse	r24, r1
    1896:	2d df       	rcall	.-422    	; 0x16f2 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1898:	ec 2f       	mov	r30, r28
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	ee 0f       	add	r30, r30
    189e:	ff 1f       	adc	r31, r31
    18a0:	e6 5b       	subi	r30, 0xB6	; 182
    18a2:	fd 4f       	sbci	r31, 0xFD	; 253
    18a4:	a5 91       	lpm	r26, Z+
    18a6:	b4 91       	lpm	r27, Z
    18a8:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    18aa:	ed 23       	and	r30, r29
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	21 f4       	brne	.+8      	; 0x18ba <digitalRead+0x4a>
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <digitalRead+0x4a>
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    18c0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    18c2:	91 8d       	ldd	r25, Z+25	; 0x19
    18c4:	22 8d       	ldd	r18, Z+26	; 0x1a
    18c6:	89 2f       	mov	r24, r25
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	80 5c       	subi	r24, 0xC0	; 192
    18cc:	9f 4f       	sbci	r25, 0xFF	; 255
    18ce:	82 1b       	sub	r24, r18
    18d0:	91 09       	sbc	r25, r1
}
    18d2:	8f 73       	andi	r24, 0x3F	; 63
    18d4:	99 27       	eor	r25, r25
    18d6:	08 95       	ret

000018d8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    18d8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    18da:	91 8d       	ldd	r25, Z+25	; 0x19
    18dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    18de:	98 17       	cp	r25, r24
    18e0:	31 f0       	breq	.+12     	; 0x18ee <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    18e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    18e4:	e8 0f       	add	r30, r24
    18e6:	f1 1d       	adc	r31, r1
    18e8:	85 8d       	ldd	r24, Z+29	; 0x1d
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    18f2:	08 95       	ret

000018f4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    18f4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    18f6:	91 8d       	ldd	r25, Z+25	; 0x19
    18f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    18fa:	98 17       	cp	r25, r24
    18fc:	61 f0       	breq	.+24     	; 0x1916 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    18fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1900:	df 01       	movw	r26, r30
    1902:	a8 0f       	add	r26, r24
    1904:	b1 1d       	adc	r27, r1
    1906:	5d 96       	adiw	r26, 0x1d	; 29
    1908:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    190a:	92 8d       	ldd	r25, Z+26	; 0x1a
    190c:	9f 5f       	subi	r25, 0xFF	; 255
    190e:	9f 73       	andi	r25, 0x3F	; 63
    1910:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1916:	8f ef       	ldi	r24, 0xFF	; 255
    1918:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    191a:	08 95       	ret

0000191c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    191c:	fc 01       	movw	r30, r24
    191e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1920:	44 8d       	ldd	r20, Z+28	; 0x1c
    1922:	25 2f       	mov	r18, r21
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	84 2f       	mov	r24, r20
    1928:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    192a:	82 1b       	sub	r24, r18
    192c:	93 0b       	sbc	r25, r19
    192e:	54 17       	cp	r21, r20
    1930:	10 f0       	brcs	.+4      	; 0x1936 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1932:	cf 96       	adiw	r24, 0x3f	; 63
    1934:	08 95       	ret
  return tail - head - 1;
    1936:	01 97       	sbiw	r24, 0x01	; 1
}
    1938:	08 95       	ret

0000193a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    193a:	88 e9       	ldi	r24, 0x98	; 152
    193c:	99 e0       	ldi	r25, 0x09	; 9
    193e:	89 2b       	or	r24, r25
    1940:	39 f0       	breq	.+14     	; 0x1950 <_Z14serialEventRunv+0x16>
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	89 2b       	or	r24, r25
    1948:	19 f0       	breq	.+6      	; 0x1950 <_Z14serialEventRunv+0x16>
    194a:	f2 dc       	rcall	.-1564   	; 0x1330 <_Z17Serial0_availablev>
    194c:	81 11       	cpse	r24, r1
    194e:	25 c0       	rjmp	.+74     	; 0x199a <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	89 2b       	or	r24, r25
    1956:	41 f0       	breq	.+16     	; 0x1968 <_Z14serialEventRunv+0x2e>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	89 2b       	or	r24, r25
    195e:	21 f0       	breq	.+8      	; 0x1968 <_Z14serialEventRunv+0x2e>
    1960:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1964:	81 11       	cpse	r24, r1
    1966:	1c c0       	rjmp	.+56     	; 0x19a0 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	89 2b       	or	r24, r25
    196e:	41 f0       	breq	.+16     	; 0x1980 <_Z14serialEventRunv+0x46>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	89 2b       	or	r24, r25
    1976:	21 f0       	breq	.+8      	; 0x1980 <_Z14serialEventRunv+0x46>
    1978:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    197c:	81 11       	cpse	r24, r1
    197e:	13 c0       	rjmp	.+38     	; 0x19a6 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	89 2b       	or	r24, r25
    1986:	a1 f0       	breq	.+40     	; 0x19b0 <_Z14serialEventRunv+0x76>
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	89 2b       	or	r24, r25
    198e:	81 f0       	breq	.+32     	; 0x19b0 <_Z14serialEventRunv+0x76>
    1990:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1994:	81 11       	cpse	r24, r1
    1996:	0a c0       	rjmp	.+20     	; 0x19ac <_Z14serialEventRunv+0x72>
    1998:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    199a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    199e:	d8 cf       	rjmp	.-80     	; 0x1950 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    19a0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    19a4:	e1 cf       	rjmp	.-62     	; 0x1968 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    19a6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    19aa:	ea cf       	rjmp	.-44     	; 0x1980 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    19ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    19b0:	08 95       	ret

000019b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    19b2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    19b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    19b6:	df 01       	movw	r26, r30
    19b8:	a8 0f       	add	r26, r24
    19ba:	b1 1d       	adc	r27, r1
    19bc:	a3 5a       	subi	r26, 0xA3	; 163
    19be:	bf 4f       	sbci	r27, 0xFF	; 255
    19c0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    19c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	8f 73       	andi	r24, 0x3F	; 63
    19ca:	99 27       	eor	r25, r25
    19cc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    19ce:	a6 89       	ldd	r26, Z+22	; 0x16
    19d0:	b7 89       	ldd	r27, Z+23	; 0x17
    19d2:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    19d4:	a0 89       	ldd	r26, Z+16	; 0x10
    19d6:	b1 89       	ldd	r27, Z+17	; 0x11
    19d8:	8c 91       	ld	r24, X
    19da:	83 70       	andi	r24, 0x03	; 3
    19dc:	80 64       	ori	r24, 0x40	; 64
    19de:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    19e0:	93 8d       	ldd	r25, Z+27	; 0x1b
    19e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    19e4:	98 13       	cpse	r25, r24
    19e6:	06 c0       	rjmp	.+12     	; 0x19f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    19e8:	02 88       	ldd	r0, Z+18	; 0x12
    19ea:	f3 89       	ldd	r31, Z+19	; 0x13
    19ec:	e0 2d       	mov	r30, r0
    19ee:	80 81       	ld	r24, Z
    19f0:	8f 7d       	andi	r24, 0xDF	; 223
    19f2:	80 83       	st	Z, r24
    19f4:	08 95       	ret

000019f6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    19f6:	ef 92       	push	r14
    19f8:	ff 92       	push	r15
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	ec 01       	movw	r28, r24
  _written = true;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1a08:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a0c:	98 13       	cpse	r25, r24
    1a0e:	05 c0       	rjmp	.+10     	; 0x1a1a <_ZN14HardwareSerial5writeEh+0x24>
    1a10:	e8 89       	ldd	r30, Y+16	; 0x10
    1a12:	f9 89       	ldd	r31, Y+17	; 0x11
    1a14:	80 81       	ld	r24, Z
    1a16:	85 fd       	sbrc	r24, 5
    1a18:	25 c0       	rjmp	.+74     	; 0x1a64 <_ZN14HardwareSerial5writeEh+0x6e>
    1a1a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1a1c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a1e:	10 e0       	ldi	r17, 0x00	; 0
    1a20:	0f 5f       	subi	r16, 0xFF	; 255
    1a22:	1f 4f       	sbci	r17, 0xFF	; 255
    1a24:	0f 73       	andi	r16, 0x3F	; 63
    1a26:	11 27       	eor	r17, r17
    1a28:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1a2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a2c:	e8 12       	cpse	r14, r24
    1a2e:	0b c0       	rjmp	.+22     	; 0x1a46 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	07 fc       	sbrc	r0, 7
    1a34:	fa cf       	rjmp	.-12     	; 0x1a2a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1a36:	e8 89       	ldd	r30, Y+16	; 0x10
    1a38:	f9 89       	ldd	r31, Y+17	; 0x11
    1a3a:	80 81       	ld	r24, Z
    1a3c:	85 ff       	sbrs	r24, 5
    1a3e:	f5 cf       	rjmp	.-22     	; 0x1a2a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1a40:	ce 01       	movw	r24, r28
    1a42:	b7 df       	rcall	.-146    	; 0x19b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a44:	f2 cf       	rjmp	.-28     	; 0x1a2a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1a46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e8 0f       	add	r30, r24
    1a4c:	f1 1d       	adc	r31, r1
    1a4e:	e3 5a       	subi	r30, 0xA3	; 163
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1a54:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a56:	f8 94       	cli
    _tx_buffer_head = i;
    1a58:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1a5a:	ea 89       	ldd	r30, Y+18	; 0x12
    1a5c:	fb 89       	ldd	r31, Y+19	; 0x13
    1a5e:	80 81       	ld	r24, Z
    1a60:	80 62       	ori	r24, 0x20	; 32
    1a62:	0a c0       	rjmp	.+20     	; 0x1a78 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1a64:	9f b7       	in	r25, 0x3f	; 63
    1a66:	f8 94       	cli
      *_udr = c;
    1a68:	ee 89       	ldd	r30, Y+22	; 0x16
    1a6a:	ff 89       	ldd	r31, Y+23	; 0x17
    1a6c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1a6e:	e8 89       	ldd	r30, Y+16	; 0x10
    1a70:	f9 89       	ldd	r31, Y+17	; 0x11
    1a72:	80 81       	ld	r24, Z
    1a74:	83 70       	andi	r24, 0x03	; 3
    1a76:	80 64       	ori	r24, 0x40	; 64
    1a78:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a7a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	ef 90       	pop	r14
    1a8c:	08 95       	ret

00001a8e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1a8e:	cf 93       	push	r28
    1a90:	df 93       	push	r29
    1a92:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1a94:	88 8d       	ldd	r24, Y+24	; 0x18
    1a96:	88 23       	and	r24, r24
    1a98:	c1 f0       	breq	.+48     	; 0x1aca <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1a9a:	ea 89       	ldd	r30, Y+18	; 0x12
    1a9c:	fb 89       	ldd	r31, Y+19	; 0x13
    1a9e:	80 81       	ld	r24, Z
    1aa0:	85 fd       	sbrc	r24, 5
    1aa2:	05 c0       	rjmp	.+10     	; 0x1aae <_ZN14HardwareSerial5flushEv+0x20>
    1aa4:	a8 89       	ldd	r26, Y+16	; 0x10
    1aa6:	b9 89       	ldd	r27, Y+17	; 0x11
    1aa8:	8c 91       	ld	r24, X
    1aaa:	86 fd       	sbrc	r24, 6
    1aac:	0e c0       	rjmp	.+28     	; 0x1aca <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	07 fc       	sbrc	r0, 7
    1ab2:	f5 cf       	rjmp	.-22     	; 0x1a9e <_ZN14HardwareSerial5flushEv+0x10>
    1ab4:	80 81       	ld	r24, Z
    1ab6:	85 ff       	sbrs	r24, 5
    1ab8:	f2 cf       	rjmp	.-28     	; 0x1a9e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1aba:	a8 89       	ldd	r26, Y+16	; 0x10
    1abc:	b9 89       	ldd	r27, Y+17	; 0x11
    1abe:	8c 91       	ld	r24, X
    1ac0:	85 ff       	sbrs	r24, 5
    1ac2:	ed cf       	rjmp	.-38     	; 0x1a9e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	75 df       	rcall	.-278    	; 0x19b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1ac8:	e8 cf       	rjmp	.-48     	; 0x1a9a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <__udivmodsi4>:
    1ad0:	a1 e2       	ldi	r26, 0x21	; 33
    1ad2:	1a 2e       	mov	r1, r26
    1ad4:	aa 1b       	sub	r26, r26
    1ad6:	bb 1b       	sub	r27, r27
    1ad8:	fd 01       	movw	r30, r26
    1ada:	0d c0       	rjmp	.+26     	; 0x1af6 <__udivmodsi4_ep>

00001adc <__udivmodsi4_loop>:
    1adc:	aa 1f       	adc	r26, r26
    1ade:	bb 1f       	adc	r27, r27
    1ae0:	ee 1f       	adc	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	a2 17       	cp	r26, r18
    1ae6:	b3 07       	cpc	r27, r19
    1ae8:	e4 07       	cpc	r30, r20
    1aea:	f5 07       	cpc	r31, r21
    1aec:	20 f0       	brcs	.+8      	; 0x1af6 <__udivmodsi4_ep>
    1aee:	a2 1b       	sub	r26, r18
    1af0:	b3 0b       	sbc	r27, r19
    1af2:	e4 0b       	sbc	r30, r20
    1af4:	f5 0b       	sbc	r31, r21

00001af6 <__udivmodsi4_ep>:
    1af6:	66 1f       	adc	r22, r22
    1af8:	77 1f       	adc	r23, r23
    1afa:	88 1f       	adc	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	1a 94       	dec	r1
    1b00:	69 f7       	brne	.-38     	; 0x1adc <__udivmodsi4_loop>
    1b02:	60 95       	com	r22
    1b04:	70 95       	com	r23
    1b06:	80 95       	com	r24
    1b08:	90 95       	com	r25
    1b0a:	9b 01       	movw	r18, r22
    1b0c:	ac 01       	movw	r20, r24
    1b0e:	bd 01       	movw	r22, r26
    1b10:	cf 01       	movw	r24, r30
    1b12:	08 95       	ret

00001b14 <__tablejump2__>:
    1b14:	ee 0f       	add	r30, r30
    1b16:	ff 1f       	adc	r31, r31
    1b18:	88 1f       	adc	r24, r24
    1b1a:	8b bf       	out	0x3b, r24	; 59
    1b1c:	07 90       	elpm	r0, Z+
    1b1e:	f6 91       	elpm	r31, Z
    1b20:	e0 2d       	mov	r30, r0
    1b22:	19 94       	eijmp

00001b24 <_exit>:
    1b24:	f8 94       	cli

00001b26 <__stop_program>:
    1b26:	ff cf       	rjmp	.-2      	; 0x1b26 <__stop_program>
