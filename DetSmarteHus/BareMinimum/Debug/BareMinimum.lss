
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800200  00003f74  00004008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d8  008003b0  008003b0  000041b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000041b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000041e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000680  00000000  00000000  00004228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cddc  00000000  00000000  000048a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003060  00000000  00000000  00011684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000042ad  00000000  00000000  000146e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000173c  00000000  00000000  00018994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003623  00000000  00000000  0001a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004dbb  00000000  00000000  0001d6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a0  00000000  00000000  000224ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c1       	rjmp	.+670    	; 0x2a0 <__ctors_end>
       2:	00 00       	nop
       4:	7e c1       	rjmp	.+764    	; 0x302 <__bad_interrupt>
       6:	00 00       	nop
       8:	7c c1       	rjmp	.+760    	; 0x302 <__bad_interrupt>
       a:	00 00       	nop
       c:	7a c1       	rjmp	.+756    	; 0x302 <__bad_interrupt>
       e:	00 00       	nop
      10:	78 c1       	rjmp	.+752    	; 0x302 <__bad_interrupt>
      12:	00 00       	nop
      14:	76 c1       	rjmp	.+748    	; 0x302 <__bad_interrupt>
      16:	00 00       	nop
      18:	74 c1       	rjmp	.+744    	; 0x302 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	72 c1       	rjmp	.+740    	; 0x302 <__bad_interrupt>
      1e:	00 00       	nop
      20:	70 c1       	rjmp	.+736    	; 0x302 <__bad_interrupt>
      22:	00 00       	nop
      24:	6e c1       	rjmp	.+732    	; 0x302 <__bad_interrupt>
      26:	00 00       	nop
      28:	6c c1       	rjmp	.+728    	; 0x302 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6a c1       	rjmp	.+724    	; 0x302 <__bad_interrupt>
      2e:	00 00       	nop
      30:	68 c1       	rjmp	.+720    	; 0x302 <__bad_interrupt>
      32:	00 00       	nop
      34:	66 c1       	rjmp	.+716    	; 0x302 <__bad_interrupt>
      36:	00 00       	nop
      38:	64 c1       	rjmp	.+712    	; 0x302 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	62 c1       	rjmp	.+708    	; 0x302 <__bad_interrupt>
      3e:	00 00       	nop
      40:	60 c1       	rjmp	.+704    	; 0x302 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__vector_17>
      48:	5c c1       	rjmp	.+696    	; 0x302 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5a c1       	rjmp	.+692    	; 0x302 <__bad_interrupt>
      4e:	00 00       	nop
      50:	58 c1       	rjmp	.+688    	; 0x302 <__bad_interrupt>
      52:	00 00       	nop
      54:	56 c1       	rjmp	.+684    	; 0x302 <__bad_interrupt>
      56:	00 00       	nop
      58:	54 c1       	rjmp	.+680    	; 0x302 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__vector_23>
      60:	50 c1       	rjmp	.+672    	; 0x302 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <__vector_25>
      68:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <__vector_26>
      6c:	4a c1       	rjmp	.+660    	; 0x302 <__bad_interrupt>
      6e:	00 00       	nop
      70:	48 c1       	rjmp	.+656    	; 0x302 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c1       	rjmp	.+652    	; 0x302 <__bad_interrupt>
      76:	00 00       	nop
      78:	44 c1       	rjmp	.+648    	; 0x302 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	42 c1       	rjmp	.+644    	; 0x302 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__vector_32>
      84:	3e c1       	rjmp	.+636    	; 0x302 <__bad_interrupt>
      86:	00 00       	nop
      88:	3c c1       	rjmp	.+632    	; 0x302 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3a c1       	rjmp	.+628    	; 0x302 <__bad_interrupt>
      8e:	00 00       	nop
      90:	38 c1       	rjmp	.+624    	; 0x302 <__bad_interrupt>
      92:	00 00       	nop
      94:	36 c1       	rjmp	.+620    	; 0x302 <__bad_interrupt>
      96:	00 00       	nop
      98:	34 c1       	rjmp	.+616    	; 0x302 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	32 c1       	rjmp	.+612    	; 0x302 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	30 c1       	rjmp	.+608    	; 0x302 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2e c1       	rjmp	.+604    	; 0x302 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__vector_42>
      ac:	2a c1       	rjmp	.+596    	; 0x302 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	28 c1       	rjmp	.+592    	; 0x302 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	26 c1       	rjmp	.+588    	; 0x302 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	24 c1       	rjmp	.+584    	; 0x302 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__vector_47>
      c0:	20 c1       	rjmp	.+576    	; 0x302 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1e c1       	rjmp	.+572    	; 0x302 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	1c c1       	rjmp	.+568    	; 0x302 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	1a c1       	rjmp	.+564    	; 0x302 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	18 c1       	rjmp	.+560    	; 0x302 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	16 c1       	rjmp	.+556    	; 0x302 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	14 c1       	rjmp	.+552    	; 0x302 <__bad_interrupt>
      da:	00 00       	nop
      dc:	12 c1       	rjmp	.+548    	; 0x302 <__bad_interrupt>
      de:	00 00       	nop
      e0:	10 c1       	rjmp	.+544    	; 0x302 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d4 01       	movw	r26, r8
      e6:	f6 01       	movw	r30, r12
      e8:	18 02       	muls	r17, r24
      ea:	2f 02       	muls	r18, r31
      ec:	51 02       	muls	r21, r17
      ee:	83 02       	muls	r24, r19
      f0:	a5 02       	muls	r26, r21
      f2:	c7 02       	muls	r28, r23
      f4:	13 03       	mulsu	r17, r19
      f6:	4a 03       	fmul	r20, r18
      f8:	61 03       	mulsu	r22, r17
      fa:	93 03       	fmuls	r17, r19
      fc:	ba 03       	fmulsu	r19, r18
      fe:	08 00       	.word	0x0008	; ????
     100:	00 00       	nop
     102:	be 92       	st	-X, r11
     104:	24 49       	sbci	r18, 0x94	; 148
     106:	12 3e       	cpi	r17, 0xE2	; 226
     108:	ab aa       	std	Y+51, r10	; 0x33
     10a:	aa 2a       	or	r10, r26
     10c:	be cd       	rjmp	.-1156   	; 0xfffffc8a <__eeprom_end+0xff7efc8a>
     10e:	cc cc       	rjmp	.-1640   	; 0xfffffaa8 <__eeprom_end+0xff7efaa8>
     110:	4c 3e       	cpi	r20, 0xEC	; 236
     112:	00 00       	nop
     114:	00 80       	ld	r0, Z
     116:	be ab       	std	Y+54, r27	; 0x36
     118:	aa aa       	std	Y+50, r10	; 0x32
     11a:	aa 3e       	cpi	r26, 0xEA	; 234
     11c:	00 00       	nop
     11e:	00 00       	nop
     120:	bf 00       	.word	0x00bf	; ????
     122:	00 00       	nop
     124:	80 3f       	cpi	r24, 0xF0	; 240
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	00 08       	sbc	r0, r0
     12c:	41 78       	andi	r20, 0x81	; 129
     12e:	d3 bb       	out	0x13, r29	; 19
     130:	43 87       	std	Z+11, r20	; 0x0b
     132:	d1 13       	cpse	r29, r17
     134:	3d 19       	sub	r19, r13
     136:	0e 3c       	cpi	r16, 0xCE	; 206
     138:	c3 bd       	out	0x23, r28	; 35
     13a:	42 82       	std	Z+2, r4	; 0x02
     13c:	ad 2b       	or	r26, r29
     13e:	3e 68       	ori	r19, 0x8E	; 142
     140:	ec 82       	std	Y+4, r14	; 0x04
     142:	76 be       	out	0x36, r7	; 54
     144:	d9 8f       	std	Y+25, r29	; 0x19
     146:	e1 a9       	ldd	r30, Z+49	; 0x31
     148:	3e 4c       	sbci	r19, 0xCE	; 206
     14a:	80 ef       	ldi	r24, 0xF0	; 240
     14c:	ff be       	out	0x3f, r15	; 63
     14e:	01 c4       	rjmp	.+2050   	; 0x952 <_Z14menuControllerc+0x13c>
     150:	ff 7f       	andi	r31, 0xFF	; 255
     152:	3f 00       	.word	0x003f	; ????
     154:	00 00       	nop
     156:	00 00       	nop
     158:	ab 1d       	adc	r26, r11
     15a:	ae 1d       	adc	r26, r14
     15c:	9d 1d       	adc	r25, r13
     15e:	a1 1d       	adc	r26, r1
     160:	a7 1d       	adc	r26, r7
     162:	e5 1d       	adc	r30, r5
     164:	b2 1d       	adc	r27, r2
     166:	b6 1d       	adc	r27, r6
     168:	bc 1d       	adc	r27, r12
     16a:	c0 1d       	adc	r28, r0
     16c:	c4 1d       	adc	r28, r4
     16e:	ca 1d       	adc	r28, r10
     170:	ce 1d       	adc	r28, r14
     172:	d2 1d       	adc	r29, r2
     174:	e5 1d       	adc	r30, r5
     176:	d8 1d       	adc	r29, r8
     178:	dc 1d       	adc	r29, r12
     17a:	e0 1d       	adc	r30, r0

0000017c <__trampolines_end>:
     17c:	00 00       	nop
     17e:	0a 0b       	sbc	r16, r26
     180:	02 09       	sbc	r16, r2
     182:	0c 0d       	add	r16, r12
     184:	0e 08       	sbc	r0, r14
     186:	07 03       	mulsu	r16, r23
     188:	04 01       	movw	r0, r8
	...
     1a6:	00 00       	nop
     1a8:	12 11       	cpse	r17, r2
     1aa:	10 00       	.word	0x0010	; ????
	...

000001c2 <digital_pin_to_bit_mask_PGM>:
     1c2:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1d2:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1e2:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1f2:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     202:	04 08 10 20 40 80                                   ... @.

00000208 <digital_pin_to_port_PGM>:
     208:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     218:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     228:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     238:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     248:	0b 0b 0b 0b 0b 0b                                   ......

0000024e <port_to_input_PGM>:
     24e:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     25e:	00 01 00 00 03 01 06 01 09 01                       ..........

00000268 <port_to_output_PGM>:
     268:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     278:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000282 <port_to_mode_PGM>:
     282:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     292:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000029c <__ctors_start>:
     29c:	b3 05       	cpc	r27, r3
     29e:	4d 1b       	sub	r20, r29

000002a0 <__ctors_end>:
     2a0:	11 24       	eor	r1, r1
     2a2:	1f be       	out	0x3f, r1	; 63
     2a4:	cf ef       	ldi	r28, 0xFF	; 255
     2a6:	d1 e2       	ldi	r29, 0x21	; 33
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0c bf       	out	0x3c, r16	; 60

000002b0 <__do_copy_data>:
     2b0:	13 e0       	ldi	r17, 0x03	; 3
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b2 e0       	ldi	r27, 0x02	; 2
     2b6:	e4 e7       	ldi	r30, 0x74	; 116
     2b8:	ff e3       	ldi	r31, 0x3F	; 63
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	0b bf       	out	0x3b, r16	; 59
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x14>
     2c0:	07 90       	elpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	a0 3b       	cpi	r26, 0xB0	; 176
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0x10>

000002ca <__do_clear_bss>:
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	a0 eb       	ldi	r26, 0xB0	; 176
     2ce:	b3 e0       	ldi	r27, 0x03	; 3
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	a8 38       	cpi	r26, 0x88	; 136
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>

000002da <__do_global_ctors>:
     2da:	11 e0       	ldi	r17, 0x01	; 1
     2dc:	c0 e5       	ldi	r28, 0x50	; 80
     2de:	d1 e0       	ldi	r29, 0x01	; 1
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <__do_global_ctors+0x16>
     2e4:	21 97       	sbiw	r28, 0x01	; 1
     2e6:	01 09       	sbc	r16, r1
     2e8:	80 2f       	mov	r24, r16
     2ea:	fe 01       	movw	r30, r28
     2ec:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <__tablejump2__>
     2f0:	ce 34       	cpi	r28, 0x4E	; 78
     2f2:	d1 07       	cpc	r29, r17
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	08 07       	cpc	r16, r24
     2f8:	a9 f7       	brne	.-22     	; 0x2e4 <__do_global_ctors+0xa>
     2fa:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <main>
     2fe:	0c 94 b8 1f 	jmp	0x3f70	; 0x3f70 <_exit>

00000302 <__bad_interrupt>:
     302:	7e ce       	rjmp	.-772    	; 0x0 <__vectors>

00000304 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	00 d0       	rcall	.+0      	; 0x30e <_ZN5Print5writeEPKc+0xa>
     30e:	1f 92       	push	r1
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	9a 83       	std	Y+2, r25	; 0x02
     316:	89 83       	std	Y+1, r24	; 0x01
     318:	7c 83       	std	Y+4, r23	; 0x04
     31a:	6b 83       	std	Y+3, r22	; 0x03
      if (str == NULL) return 0;
     31c:	8b 81       	ldd	r24, Y+3	; 0x03
     31e:	9c 81       	ldd	r25, Y+4	; 0x04
     320:	89 2b       	or	r24, r25
     322:	19 f4       	brne	.+6      	; 0x32a <_ZN5Print5writeEPKc+0x26>
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	15 c0       	rjmp	.+42     	; 0x354 <_ZN5Print5writeEPKc+0x50>
      return write((const uint8_t *)str, strlen(str));
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	fc 01       	movw	r30, r24
     330:	80 81       	ld	r24, Z
     332:	91 81       	ldd	r25, Z+1	; 0x01
     334:	02 96       	adiw	r24, 0x02	; 2
     336:	fc 01       	movw	r30, r24
     338:	00 81       	ld	r16, Z
     33a:	11 81       	ldd	r17, Z+1	; 0x01
     33c:	8b 81       	ldd	r24, Y+3	; 0x03
     33e:	9c 81       	ldd	r25, Y+4	; 0x04
     340:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <strlen>
     344:	ac 01       	movw	r20, r24
     346:	2b 81       	ldd	r18, Y+3	; 0x03
     348:	3c 81       	ldd	r19, Y+4	; 0x04
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	9a 81       	ldd	r25, Y+2	; 0x02
     34e:	b9 01       	movw	r22, r18
     350:	f8 01       	movw	r30, r16
     352:	19 95       	eicall
    }
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	08 95       	ret

00000366 <_Z13lcdMenuLoaderii>:
#include "MenuControl.h"

int ns = NULL;

void lcdMenuLoader(int menuStage = 0, int nsv = 0)
{
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	00 d0       	rcall	.+0      	; 0x36c <_Z13lcdMenuLoaderii+0x6>
     36c:	1f 92       	push	r1
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	9a 83       	std	Y+2, r25	; 0x02
     374:	89 83       	std	Y+1, r24	; 0x01
     376:	7c 83       	std	Y+4, r23	; 0x04
     378:	6b 83       	std	Y+3, r22	; 0x03
	switch (menuStage)
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	9a 81       	ldd	r25, Y+2	; 0x02
     37e:	09 2e       	mov	r0, r25
     380:	00 0c       	add	r0, r0
     382:	aa 0b       	sbc	r26, r26
     384:	bb 0b       	sbc	r27, r27
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	2c e0       	ldi	r18, 0x0C	; 12
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	84 1b       	sub	r24, r20
     390:	95 0b       	sbc	r25, r21
     392:	28 17       	cp	r18, r24
     394:	39 07       	cpc	r19, r25
     396:	08 f4       	brcc	.+2      	; 0x39a <_Z13lcdMenuLoaderii+0x34>
     398:	1f c2       	rjmp	.+1086   	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
     39a:	fc 01       	movw	r30, r24
     39c:	88 27       	eor	r24, r24
     39e:	ee 58       	subi	r30, 0x8E	; 142
     3a0:	ff 4f       	sbci	r31, 0xFF	; 255
     3a2:	8f 4f       	sbci	r24, 0xFF	; 255
     3a4:	0c 94 a3 1f 	jmp	0x3f46	; 0x3f46 <__tablejump2__>
	{
		//Main menu
		case 0:
			lcd.setCursor(0, 0);
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	8e eb       	ldi	r24, 0xBE	; 190
     3ae:	93 e0       	ldi	r25, 0x03	; 3
     3b0:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("<>Chose Option<>");
     3b4:	62 e2       	ldi	r22, 0x22	; 34
     3b6:	72 e0       	ldi	r23, 0x02	; 2
     3b8:	8e eb       	ldi	r24, 0xBE	; 190
     3ba:	93 e0       	ldi	r25, 0x03	; 3
     3bc:	a3 df       	rcall	.-186    	; 0x304 <_ZN5Print5writeEPKc>
			lcd.setCursor(0, 1);
     3be:	41 e0       	ldi	r20, 0x01	; 1
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	8e eb       	ldi	r24, 0xBE	; 190
     3c4:	93 e0       	ldi	r25, 0x03	; 3
     3c6:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("A<Heat");
     3ca:	63 e3       	ldi	r22, 0x33	; 51
     3cc:	72 e0       	ldi	r23, 0x02	; 2
     3ce:	8e eb       	ldi	r24, 0xBE	; 190
     3d0:	93 e0       	ldi	r25, 0x03	; 3
     3d2:	98 df       	rcall	.-208    	; 0x304 <_ZN5Print5writeEPKc>
			lcd.setCursor(8, 1);
     3d4:	41 e0       	ldi	r20, 0x01	; 1
     3d6:	68 e0       	ldi	r22, 0x08	; 8
     3d8:	8e eb       	ldi	r24, 0xBE	; 190
     3da:	93 e0       	ldi	r25, 0x03	; 3
     3dc:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Lights>B");
     3e0:	6a e3       	ldi	r22, 0x3A	; 58
     3e2:	72 e0       	ldi	r23, 0x02	; 2
     3e4:	8e eb       	ldi	r24, 0xBE	; 190
     3e6:	93 e0       	ldi	r25, 0x03	; 3
     3e8:	8d df       	rcall	.-230    	; 0x304 <_ZN5Print5writeEPKc>
		break;
     3ea:	0d c2       	rjmp	.+1050   	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
		
		//Heat main menu
		case 1:
			lcd.setCursor(0, 0);
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	8e eb       	ldi	r24, 0xBE	; 190
     3f2:	93 e0       	ldi	r25, 0x03	; 3
     3f4:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("A<Fan");
     3f8:	63 e4       	ldi	r22, 0x43	; 67
     3fa:	72 e0       	ldi	r23, 0x02	; 2
     3fc:	8e eb       	ldi	r24, 0xBE	; 190
     3fe:	93 e0       	ldi	r25, 0x03	; 3
     400:	81 df       	rcall	.-254    	; 0x304 <_ZN5Print5writeEPKc>
			lcd.setCursor(9 ,0);
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	69 e0       	ldi	r22, 0x09	; 9
     406:	8e eb       	ldi	r24, 0xBE	; 190
     408:	93 e0       	ldi	r25, 0x03	; 3
     40a:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Temps>B");
     40e:	69 e4       	ldi	r22, 0x49	; 73
     410:	72 e0       	ldi	r23, 0x02	; 2
     412:	8e eb       	ldi	r24, 0xBE	; 190
     414:	93 e0       	ldi	r25, 0x03	; 3
     416:	76 df       	rcall	.-276    	; 0x304 <_ZN5Print5writeEPKc>
			lcd.setCursor(0, 1);
     418:	41 e0       	ldi	r20, 0x01	; 1
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	8e eb       	ldi	r24, 0xBE	; 190
     41e:	93 e0       	ldi	r25, 0x03	; 3
     420:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("C<Window");
     424:	61 e5       	ldi	r22, 0x51	; 81
     426:	72 e0       	ldi	r23, 0x02	; 2
     428:	8e eb       	ldi	r24, 0xBE	; 190
     42a:	93 e0       	ldi	r25, 0x03	; 3
     42c:	6b df       	rcall	.-298    	; 0x304 <_ZN5Print5writeEPKc>
		break;
     42e:	eb c1       	rjmp	.+982    	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
		
#pragma region Fan Controls Menus
		//Fan Control menu if Auto Mode is on
		case 2:
			lcd.setCursor(0, 0);
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	8e eb       	ldi	r24, 0xBE	; 190
     436:	93 e0       	ldi	r25, 0x03	; 3
     438:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Auto Mode is on!");
     43c:	6a e5       	ldi	r22, 0x5A	; 90
     43e:	72 e0       	ldi	r23, 0x02	; 2
     440:	8e eb       	ldi	r24, 0xBE	; 190
     442:	93 e0       	ldi	r25, 0x03	; 3
     444:	5f df       	rcall	.-322    	; 0x304 <_ZN5Print5writeEPKc>
			lcd.setCursor(0, 1);
     446:	41 e0       	ldi	r20, 0x01	; 1
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	8e eb       	ldi	r24, 0xBE	; 190
     44c:	93 e0       	ldi	r25, 0x03	; 3
     44e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("A<T.Off");
     452:	6b e6       	ldi	r22, 0x6B	; 107
     454:	72 e0       	ldi	r23, 0x02	; 2
     456:	8e eb       	ldi	r24, 0xBE	; 190
     458:	93 e0       	ldi	r25, 0x03	; 3
     45a:	54 df       	rcall	.-344    	; 0x304 <_ZN5Print5writeEPKc>
		break;
     45c:	d4 c1       	rjmp	.+936    	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
		
		//Fan Control menu if Auto Mode is off
		case 3:
			lcd.setCursor(0, 0);
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	8e eb       	ldi	r24, 0xBE	; 190
     464:	93 e0       	ldi	r25, 0x03	; 3
     466:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("<>Fan Controls<>");
     46a:	63 e7       	ldi	r22, 0x73	; 115
     46c:	72 e0       	ldi	r23, 0x02	; 2
     46e:	8e eb       	ldi	r24, 0xBE	; 190
     470:	93 e0       	ldi	r25, 0x03	; 3
     472:	48 df       	rcall	.-368    	; 0x304 <_ZN5Print5writeEPKc>
			lcd.setCursor(0, 1);
     474:	41 e0       	ldi	r20, 0x01	; 1
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	8e eb       	ldi	r24, 0xBE	; 190
     47a:	93 e0       	ldi	r25, 0x03	; 3
     47c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("A<T.Auto");
     480:	64 e8       	ldi	r22, 0x84	; 132
     482:	72 e0       	ldi	r23, 0x02	; 2
     484:	8e eb       	ldi	r24, 0xBE	; 190
     486:	93 e0       	ldi	r25, 0x03	; 3
     488:	3d df       	rcall	.-390    	; 0x304 <_ZN5Print5writeEPKc>
			lcd.setCursor(9, 1);
     48a:	41 e0       	ldi	r20, 0x01	; 1
     48c:	69 e0       	ldi	r22, 0x09	; 9
     48e:	8e eb       	ldi	r24, 0xBE	; 190
     490:	93 e0       	ldi	r25, 0x03	; 3
     492:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Speed>B");
     496:	6d e8       	ldi	r22, 0x8D	; 141
     498:	72 e0       	ldi	r23, 0x02	; 2
     49a:	8e eb       	ldi	r24, 0xBE	; 190
     49c:	93 e0       	ldi	r25, 0x03	; 3
     49e:	32 df       	rcall	.-412    	; 0x304 <_ZN5Print5writeEPKc>
		break;
		
		//Fan Speed Control menu
		case 4:
			lcd.setCursor(0, 0);
     4a0:	b2 c1       	rjmp	.+868    	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	8e eb       	ldi	r24, 0xBE	; 190
     4a8:	93 e0       	ldi	r25, 0x03	; 3
     4aa:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Speed:"); lcd.print(currentFanSpeed); lcd.write("%");
     4ae:	65 e9       	ldi	r22, 0x95	; 149
     4b0:	72 e0       	ldi	r23, 0x02	; 2
     4b2:	8e eb       	ldi	r24, 0xBE	; 190
     4b4:	93 e0       	ldi	r25, 0x03	; 3
     4b6:	26 df       	rcall	.-436    	; 0x304 <_ZN5Print5writeEPKc>
     4b8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     4bc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     4c0:	4a e0       	ldi	r20, 0x0A	; 10
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	bc 01       	movw	r22, r24
     4c6:	8e eb       	ldi	r24, 0xBE	; 190
     4c8:	93 e0       	ldi	r25, 0x03	; 3
     4ca:	0e 94 45 1c 	call	0x388a	; 0x388a <_ZN5Print5printEii>
     4ce:	6c e9       	ldi	r22, 0x9C	; 156
     4d0:	72 e0       	ldi	r23, 0x02	; 2
     4d2:	8e eb       	ldi	r24, 0xBE	; 190
     4d4:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(0, 1);
     4d6:	16 df       	rcall	.-468    	; 0x304 <_ZN5Print5writeEPKc>
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	8e eb       	ldi	r24, 0xBE	; 190
     4de:	93 e0       	ldi	r25, 0x03	; 3
     4e0:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("A<Dec.");
     4e4:	6e e9       	ldi	r22, 0x9E	; 158
     4e6:	72 e0       	ldi	r23, 0x02	; 2
     4e8:	8e eb       	ldi	r24, 0xBE	; 190
     4ea:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(10, 1);
     4ec:	0b df       	rcall	.-490    	; 0x304 <_ZN5Print5writeEPKc>
     4ee:	41 e0       	ldi	r20, 0x01	; 1
     4f0:	6a e0       	ldi	r22, 0x0A	; 10
     4f2:	8e eb       	ldi	r24, 0xBE	; 190
     4f4:	93 e0       	ldi	r25, 0x03	; 3
     4f6:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Inc.>B");
     4fa:	65 ea       	ldi	r22, 0xA5	; 165
     4fc:	72 e0       	ldi	r23, 0x02	; 2
     4fe:	8e eb       	ldi	r24, 0xBE	; 190
     500:	93 e0       	ldi	r25, 0x03	; 3
		break;
     502:	00 df       	rcall	.-512    	; 0x304 <_ZN5Print5writeEPKc>
#pragma endregion
		
#pragma region Temperature Menus
		//Temperature Menu
		case 5:
			lcd.setCursor(0, 0);
     504:	80 c1       	rjmp	.+768    	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	8e eb       	ldi	r24, 0xBE	; 190
     50c:	93 e0       	ldi	r25, 0x03	; 3
     50e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("<>Temperatures<>");
     512:	6c ea       	ldi	r22, 0xAC	; 172
     514:	72 e0       	ldi	r23, 0x02	; 2
     516:	8e eb       	ldi	r24, 0xBE	; 190
     518:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(0, 1);
     51a:	f4 de       	rcall	.-536    	; 0x304 <_ZN5Print5writeEPKc>
     51c:	41 e0       	ldi	r20, 0x01	; 1
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	8e eb       	ldi	r24, 0xBE	; 190
     522:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("A<Set");
     524:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     528:	6d eb       	ldi	r22, 0xBD	; 189
     52a:	72 e0       	ldi	r23, 0x02	; 2
     52c:	8e eb       	ldi	r24, 0xBE	; 190
     52e:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(9, 1);
     530:	e9 de       	rcall	.-558    	; 0x304 <_ZN5Print5writeEPKc>
     532:	41 e0       	ldi	r20, 0x01	; 1
     534:	69 e0       	ldi	r22, 0x09	; 9
     536:	8e eb       	ldi	r24, 0xBE	; 190
     538:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("Check>B");
     53a:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     53e:	63 ec       	ldi	r22, 0xC3	; 195
     540:	72 e0       	ldi	r23, 0x02	; 2
     542:	8e eb       	ldi	r24, 0xBE	; 190
     544:	93 e0       	ldi	r25, 0x03	; 3
		break;
     546:	de de       	rcall	.-580    	; 0x304 <_ZN5Print5writeEPKc>
		
		//Set temperature chose room Menu
		case 6:
			lcd.setCursor(0, 0);
     548:	5e c1       	rjmp	.+700    	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	8e eb       	ldi	r24, 0xBE	; 190
     550:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("<->Chose Room<->");
     552:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     556:	6b ec       	ldi	r22, 0xCB	; 203
     558:	72 e0       	ldi	r23, 0x02	; 2
     55a:	8e eb       	ldi	r24, 0xBE	; 190
     55c:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(0, 1);
     55e:	d2 de       	rcall	.-604    	; 0x304 <_ZN5Print5writeEPKc>
     560:	41 e0       	ldi	r20, 0x01	; 1
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	8e eb       	ldi	r24, 0xBE	; 190
     566:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("A<Dining");
     568:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     56c:	6c ed       	ldi	r22, 0xDC	; 220
     56e:	72 e0       	ldi	r23, 0x02	; 2
     570:	8e eb       	ldi	r24, 0xBE	; 190
     572:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(10, 1);
     574:	c7 de       	rcall	.-626    	; 0x304 <_ZN5Print5writeEPKc>
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	6a e0       	ldi	r22, 0x0A	; 10
     57a:	8e eb       	ldi	r24, 0xBE	; 190
     57c:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("Kids>B");
     57e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     582:	65 ee       	ldi	r22, 0xE5	; 229
     584:	72 e0       	ldi	r23, 0x02	; 2
     586:	8e eb       	ldi	r24, 0xBE	; 190
     588:	93 e0       	ldi	r25, 0x03	; 3
		break;
     58a:	bc de       	rcall	.-648    	; 0x304 <_ZN5Print5writeEPKc>
		
		//Set temperatures for room Menu
		//ns1 = Dining Room, ns2 = Kids Room
		case 7:
			lcd.setCursor(0, 0);
     58c:	3c c1       	rjmp	.+632    	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	8e eb       	ldi	r24, 0xBE	; 190
     594:	93 e0       	ldi	r25, 0x03	; 3
     596:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Set temp:"); 
     59a:	6c ee       	ldi	r22, 0xEC	; 236
     59c:	72 e0       	ldi	r23, 0x02	; 2
     59e:	8e eb       	ldi	r24, 0xBE	; 190
     5a0:	93 e0       	ldi	r25, 0x03	; 3
     5a2:	b0 de       	rcall	.-672    	; 0x304 <_ZN5Print5writeEPKc>
			if (nsv == 1)
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	9c 81       	ldd	r25, Y+4	; 0x04
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	61 f4       	brne	.+24     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
			{
				lcd.print(currentSetTemperatureDining); 
     5ac:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <currentSetTemperatureDining>
     5b0:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <currentSetTemperatureDining+0x1>
     5b4:	4a e0       	ldi	r20, 0x0A	; 10
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	bc 01       	movw	r22, r24
     5ba:	8e eb       	ldi	r24, 0xBE	; 190
     5bc:	93 e0       	ldi	r25, 0x03	; 3
     5be:	0e 94 45 1c 	call	0x388a	; 0x388a <_ZN5Print5printEii>
			}
			else if (nsv == 2)
     5c2:	15 c0       	rjmp	.+42     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
     5c4:	8b 81       	ldd	r24, Y+3	; 0x03
     5c6:	9c 81       	ldd	r25, Y+4	; 0x04
     5c8:	02 97       	sbiw	r24, 0x02	; 2
			{
				lcd.print(currentSetTemperatureKids);
     5ca:	61 f4       	brne	.+24     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
     5cc:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <currentSetTemperatureKids>
     5d0:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <currentSetTemperatureKids+0x1>
     5d4:	4a e0       	ldi	r20, 0x0A	; 10
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	bc 01       	movw	r22, r24
     5da:	8e eb       	ldi	r24, 0xBE	; 190
     5dc:	93 e0       	ldi	r25, 0x03	; 3
     5de:	0e 94 45 1c 	call	0x388a	; 0x388a <_ZN5Print5printEii>
			}
			else
			{
				lcd.write("??");
     5e2:	05 c0       	rjmp	.+10     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
     5e4:	66 ef       	ldi	r22, 0xF6	; 246
     5e6:	72 e0       	ldi	r23, 0x02	; 2
     5e8:	8e eb       	ldi	r24, 0xBE	; 190
     5ea:	93 e0       	ldi	r25, 0x03	; 3
			}
			lcd.write(223);
     5ec:	8b de       	rcall	.-746    	; 0x304 <_ZN5Print5writeEPKc>
     5ee:	6f ed       	ldi	r22, 0xDF	; 223
     5f0:	8e eb       	ldi	r24, 0xBE	; 190
     5f2:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(0, 1);
     5f4:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_ZN13LiquidCrystal5writeEh>
     5f8:	41 e0       	ldi	r20, 0x01	; 1
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	8e eb       	ldi	r24, 0xBE	; 190
     5fe:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("A<Dec.");
     600:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     604:	6e e9       	ldi	r22, 0x9E	; 158
     606:	72 e0       	ldi	r23, 0x02	; 2
     608:	8e eb       	ldi	r24, 0xBE	; 190
			lcd.setCursor(10, 1);
     60a:	93 e0       	ldi	r25, 0x03	; 3
     60c:	7b de       	rcall	.-778    	; 0x304 <_ZN5Print5writeEPKc>
     60e:	41 e0       	ldi	r20, 0x01	; 1
     610:	6a e0       	ldi	r22, 0x0A	; 10
     612:	8e eb       	ldi	r24, 0xBE	; 190
     614:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("Inc.>B");
     616:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     61a:	65 ea       	ldi	r22, 0xA5	; 165
     61c:	72 e0       	ldi	r23, 0x02	; 2
     61e:	8e eb       	ldi	r24, 0xBE	; 190
     620:	93 e0       	ldi	r25, 0x03	; 3
		break;
     622:	70 de       	rcall	.-800    	; 0x304 <_ZN5Print5writeEPKc>
		
		//Current temperatures menu
		case 8:
			lcd.setCursor(0, 0);
     624:	f0 c0       	rjmp	.+480    	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	8e eb       	ldi	r24, 0xBE	; 190
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Dining: "); lcd.print(currentTemperaturesDining); lcd.write(223);;
     632:	69 ef       	ldi	r22, 0xF9	; 249
     634:	72 e0       	ldi	r23, 0x02	; 2
     636:	8e eb       	ldi	r24, 0xBE	; 190
     638:	93 e0       	ldi	r25, 0x03	; 3
     63a:	64 de       	rcall	.-824    	; 0x304 <_ZN5Print5writeEPKc>
     63c:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <currentTemperaturesDining>
     640:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <currentTemperaturesDining+0x1>
     644:	4a e0       	ldi	r20, 0x0A	; 10
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	bc 01       	movw	r22, r24
     64a:	8e eb       	ldi	r24, 0xBE	; 190
     64c:	93 e0       	ldi	r25, 0x03	; 3
     64e:	0e 94 45 1c 	call	0x388a	; 0x388a <_ZN5Print5printEii>
     652:	6f ed       	ldi	r22, 0xDF	; 223
     654:	8e eb       	ldi	r24, 0xBE	; 190
     656:	93 e0       	ldi	r25, 0x03	; 3
     658:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_ZN13LiquidCrystal5writeEh>
			lcd.setCursor(0, 1);
     65c:	41 e0       	ldi	r20, 0x01	; 1
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	8e eb       	ldi	r24, 0xBE	; 190
     662:	93 e0       	ldi	r25, 0x03	; 3
     664:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Kids:   "); lcd.print(currentTemperaturesKids); lcd.write(223);
     668:	62 e0       	ldi	r22, 0x02	; 2
     66a:	73 e0       	ldi	r23, 0x03	; 3
     66c:	8e eb       	ldi	r24, 0xBE	; 190
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	49 de       	rcall	.-878    	; 0x304 <_ZN5Print5writeEPKc>
     672:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <currentTemperaturesKids>
     676:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <currentTemperaturesKids+0x1>
     67a:	4a e0       	ldi	r20, 0x0A	; 10
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	bc 01       	movw	r22, r24
     680:	8e eb       	ldi	r24, 0xBE	; 190
     682:	93 e0       	ldi	r25, 0x03	; 3
     684:	0e 94 45 1c 	call	0x388a	; 0x388a <_ZN5Print5printEii>
     688:	6f ed       	ldi	r22, 0xDF	; 223
     68a:	8e eb       	ldi	r24, 0xBE	; 190
     68c:	93 e0       	ldi	r25, 0x03	; 3
		break;
     68e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_ZN13LiquidCrystal5writeEh>
#pragma endregion

#pragma region Windows Menus
		//Window control menu if Auto Mode is on
		case 9:
			lcd.setCursor(0, 0);
     692:	b9 c0       	rjmp	.+370    	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	8e eb       	ldi	r24, 0xBE	; 190
     69a:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("Auto Mode is on!");
     69c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     6a0:	6a e5       	ldi	r22, 0x5A	; 90
     6a2:	72 e0       	ldi	r23, 0x02	; 2
     6a4:	8e eb       	ldi	r24, 0xBE	; 190
			lcd.setCursor(0, 1);
     6a6:	93 e0       	ldi	r25, 0x03	; 3
     6a8:	2d de       	rcall	.-934    	; 0x304 <_ZN5Print5writeEPKc>
     6aa:	41 e0       	ldi	r20, 0x01	; 1
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	8e eb       	ldi	r24, 0xBE	; 190
     6b0:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("A<T.Off");
     6b2:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     6b6:	6b e6       	ldi	r22, 0x6B	; 107
     6b8:	72 e0       	ldi	r23, 0x02	; 2
     6ba:	8e eb       	ldi	r24, 0xBE	; 190
		break;
     6bc:	93 e0       	ldi	r25, 0x03	; 3
		
		//Window control menu if Auto Mode is Off
		case 10:
			lcd.setCursor(0, 0);
     6be:	22 de       	rcall	.-956    	; 0x304 <_ZN5Print5writeEPKc>
     6c0:	a2 c0       	rjmp	.+324    	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	8e eb       	ldi	r24, 0xBE	; 190
     6c8:	93 e0       	ldi	r25, 0x03	; 3
			if (WindowIsOpen)
     6ca:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     6ce:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <WindowIsOpen>
			{
				lcd.write("A<Close window");
     6d2:	88 23       	and	r24, r24
     6d4:	31 f0       	breq	.+12     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
     6d6:	6b e0       	ldi	r22, 0x0B	; 11
     6d8:	73 e0       	ldi	r23, 0x03	; 3
     6da:	8e eb       	ldi	r24, 0xBE	; 190
     6dc:	93 e0       	ldi	r25, 0x03	; 3
			}
			else if (!WindowIsOpen)
     6de:	12 de       	rcall	.-988    	; 0x304 <_ZN5Print5writeEPKc>
     6e0:	0b c0       	rjmp	.+22     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6e2:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <WindowIsOpen>
     6e6:	81 e0       	ldi	r24, 0x01	; 1
			{
				lcd.write("A<Open window");
     6e8:	89 27       	eor	r24, r25
     6ea:	88 23       	and	r24, r24
     6ec:	29 f0       	breq	.+10     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6ee:	6a e1       	ldi	r22, 0x1A	; 26
     6f0:	73 e0       	ldi	r23, 0x03	; 3
     6f2:	8e eb       	ldi	r24, 0xBE	; 190
			}
			lcd.setCursor(0, 1);
     6f4:	93 e0       	ldi	r25, 0x03	; 3
     6f6:	06 de       	rcall	.-1012   	; 0x304 <_ZN5Print5writeEPKc>
     6f8:	41 e0       	ldi	r20, 0x01	; 1
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	8e eb       	ldi	r24, 0xBE	; 190
			lcd.write("B<T.Auto");
     6fe:	93 e0       	ldi	r25, 0x03	; 3
     700:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     704:	68 e2       	ldi	r22, 0x28	; 40
     706:	73 e0       	ldi	r23, 0x03	; 3
     708:	8e eb       	ldi	r24, 0xBE	; 190
			lcd.setCursor(10, 1);
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	fb dd       	rcall	.-1034   	; 0x304 <_ZN5Print5writeEPKc>
     70e:	41 e0       	ldi	r20, 0x01	; 1
     710:	6a e0       	ldi	r22, 0x0A	; 10
     712:	8e eb       	ldi	r24, 0xBE	; 190
     714:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("Humi>C");
     716:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     71a:	61 e3       	ldi	r22, 0x31	; 49
     71c:	73 e0       	ldi	r23, 0x03	; 3
     71e:	8e eb       	ldi	r24, 0xBE	; 190
		break;
     720:	93 e0       	ldi	r25, 0x03	; 3
		
		//Current humidity windows control menu
		case 11:
			lcd.setCursor(0, 0);
     722:	f0 dd       	rcall	.-1056   	; 0x304 <_ZN5Print5writeEPKc>
     724:	70 c0       	rjmp	.+224    	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	8e eb       	ldi	r24, 0xBE	; 190
			lcd.write("Humidity:"); lcd.print(currentHumidity); lcd.write("%");
     72c:	93 e0       	ldi	r25, 0x03	; 3
     72e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     732:	68 e3       	ldi	r22, 0x38	; 56
     734:	73 e0       	ldi	r23, 0x03	; 3
     736:	8e eb       	ldi	r24, 0xBE	; 190
     738:	93 e0       	ldi	r25, 0x03	; 3
     73a:	e4 dd       	rcall	.-1080   	; 0x304 <_ZN5Print5writeEPKc>
     73c:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <currentHumidity>
     740:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <currentHumidity+0x1>
     744:	4a e0       	ldi	r20, 0x0A	; 10
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	bc 01       	movw	r22, r24
     74a:	8e eb       	ldi	r24, 0xBE	; 190
     74c:	93 e0       	ldi	r25, 0x03	; 3
     74e:	0e 94 45 1c 	call	0x388a	; 0x388a <_ZN5Print5printEii>
     752:	6c e9       	ldi	r22, 0x9C	; 156
     754:	72 e0       	ldi	r23, 0x02	; 2
     756:	8e eb       	ldi	r24, 0xBE	; 190
			lcd.setCursor(0, 1);
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	d4 dd       	rcall	.-1112   	; 0x304 <_ZN5Print5writeEPKc>
     75c:	41 e0       	ldi	r20, 0x01	; 1
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	8e eb       	ldi	r24, 0xBE	; 190
			lcd.write("A<Set Allowed");
     762:	93 e0       	ldi	r25, 0x03	; 3
     764:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     768:	62 e4       	ldi	r22, 0x42	; 66
     76a:	73 e0       	ldi	r23, 0x03	; 3
     76c:	8e eb       	ldi	r24, 0xBE	; 190
		break;
     76e:	93 e0       	ldi	r25, 0x03	; 3
		
		//Set allowed humidity
		case 12:
			lcd.setCursor(0, 0);
     770:	c9 dd       	rcall	.-1134   	; 0x304 <_ZN5Print5writeEPKc>
     772:	49 c0       	rjmp	.+146    	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	8e eb       	ldi	r24, 0xBE	; 190
			lcd.write("Al.Humidity:"); lcd.print(currentSetHumidity); lcd.write("%");
     77a:	93 e0       	ldi	r25, 0x03	; 3
     77c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     780:	60 e5       	ldi	r22, 0x50	; 80
     782:	73 e0       	ldi	r23, 0x03	; 3
     784:	8e eb       	ldi	r24, 0xBE	; 190
     786:	93 e0       	ldi	r25, 0x03	; 3
     788:	bd dd       	rcall	.-1158   	; 0x304 <_ZN5Print5writeEPKc>
     78a:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <currentSetHumidity>
     78e:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <currentSetHumidity+0x1>
     792:	4a e0       	ldi	r20, 0x0A	; 10
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	bc 01       	movw	r22, r24
     798:	8e eb       	ldi	r24, 0xBE	; 190
     79a:	93 e0       	ldi	r25, 0x03	; 3
     79c:	0e 94 45 1c 	call	0x388a	; 0x388a <_ZN5Print5printEii>
     7a0:	6c e9       	ldi	r22, 0x9C	; 156
     7a2:	72 e0       	ldi	r23, 0x02	; 2
			lcd.setCursor(0, 1);
     7a4:	8e eb       	ldi	r24, 0xBE	; 190
     7a6:	93 e0       	ldi	r25, 0x03	; 3
     7a8:	ad dd       	rcall	.-1190   	; 0x304 <_ZN5Print5writeEPKc>
     7aa:	41 e0       	ldi	r20, 0x01	; 1
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	8e eb       	ldi	r24, 0xBE	; 190
			lcd.write("A<Dec.");
     7b0:	93 e0       	ldi	r25, 0x03	; 3
     7b2:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     7b6:	6e e9       	ldi	r22, 0x9E	; 158
     7b8:	72 e0       	ldi	r23, 0x02	; 2
			lcd.setCursor(10, 1);
     7ba:	8e eb       	ldi	r24, 0xBE	; 190
     7bc:	93 e0       	ldi	r25, 0x03	; 3
     7be:	a2 dd       	rcall	.-1212   	; 0x304 <_ZN5Print5writeEPKc>
     7c0:	41 e0       	ldi	r20, 0x01	; 1
     7c2:	6a e0       	ldi	r22, 0x0A	; 10
     7c4:	8e eb       	ldi	r24, 0xBE	; 190
			lcd.write("Inc.>B");
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     7cc:	65 ea       	ldi	r22, 0xA5	; 165
     7ce:	72 e0       	ldi	r23, 0x02	; 2
     7d0:	8e eb       	ldi	r24, 0xBE	; 190
		break;
     7d2:	93 e0       	ldi	r25, 0x03	; 3
#pragma endregion

		//Error menu
		default:
			lcd.setCursor(0, 0);
     7d4:	97 dd       	rcall	.-1234   	; 0x304 <_ZN5Print5writeEPKc>
     7d6:	17 c0       	rjmp	.+46     	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	8e eb       	ldi	r24, 0xBE	; 190
     7de:	93 e0       	ldi	r25, 0x03	; 3
			lcd.write("Unknown Stage!");
     7e0:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
     7e4:	6d e5       	ldi	r22, 0x5D	; 93
     7e6:	73 e0       	ldi	r23, 0x03	; 3
     7e8:	8e eb       	ldi	r24, 0xBE	; 190
     7ea:	93 e0       	ldi	r25, 0x03	; 3
			lcd.setCursor(0, 1);
     7ec:	8b dd       	rcall	.-1258   	; 0x304 <_ZN5Print5writeEPKc>
     7ee:	41 e0       	ldi	r20, 0x01	; 1
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	8e eb       	ldi	r24, 0xBE	; 190
     7f4:	93 e0       	ldi	r25, 0x03	; 3
     7f6:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write("Try \"Reset\"!!!");
     7fa:	6c e6       	ldi	r22, 0x6C	; 108
     7fc:	73 e0       	ldi	r23, 0x03	; 3
     7fe:	8e eb       	ldi	r24, 0xBE	; 190
     800:	93 e0       	ldi	r25, 0x03	; 3
     802:	80 dd       	rcall	.-1280   	; 0x304 <_ZN5Print5writeEPKc>
		break;
     804:	00 00       	nop
	}
}
     806:	00 00       	nop
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <_Z14menuControllerc>:

void menuController(char keyPress)
{
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	1f 92       	push	r1
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	89 83       	std	Y+1, r24	; 0x01
	if (keyPress)
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	88 23       	and	r24, r24
     826:	09 f4       	brne	.+2      	; 0x82a <_Z14menuControllerc+0x14>
     828:	25 c1       	rjmp	.+586    	; 0xa74 <_Z14menuControllerc+0x25e>
	{
		//If the back to main menu button is pressed
		if (keyPress == '#')
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	83 32       	cpi	r24, 0x23	; 35
     82e:	69 f4       	brne	.+26     	; 0x84a <_Z14menuControllerc+0x34>
		{
			lcd.clear();
     830:	8e eb       	ldi	r24, 0xBE	; 190
     832:	93 e0       	ldi	r25, 0x03	; 3
     834:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN13LiquidCrystal5clearEv>
			previousMenuStage = 0;
     838:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <previousMenuStage+0x1>
     83c:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <previousMenuStage>
			currentMenuStage = 0;
     840:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <currentMenuStage+0x1>
     844:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <currentMenuStage>
     848:	15 c1       	rjmp	.+554    	; 0xa74 <_Z14menuControllerc+0x25e>
		}
		//If the back to last menu button is pressed
		else if (keyPress == '*')
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	8a 32       	cpi	r24, 0x2A	; 42
     84e:	69 f4       	brne	.+26     	; 0x86a <_Z14menuControllerc+0x54>
		{
			lcd.clear();
     850:	8e eb       	ldi	r24, 0xBE	; 190
     852:	93 e0       	ldi	r25, 0x03	; 3
     854:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN13LiquidCrystal5clearEv>
			currentMenuStage = previousMenuStage;
     858:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <previousMenuStage>
     85c:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <previousMenuStage+0x1>
     860:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <currentMenuStage+0x1>
     864:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <currentMenuStage>
     868:	05 c1       	rjmp	.+522    	; 0xa74 <_Z14menuControllerc+0x25e>
		}
		//If anything else is pressed
		else if (keyPress == 'A' || keyPress == 'B' || keyPress == 'C' || keyPress == 'D')
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	81 34       	cpi	r24, 0x41	; 65
     86e:	51 f0       	breq	.+20     	; 0x884 <_Z14menuControllerc+0x6e>
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	82 34       	cpi	r24, 0x42	; 66
     874:	39 f0       	breq	.+14     	; 0x884 <_Z14menuControllerc+0x6e>
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	83 34       	cpi	r24, 0x43	; 67
     87a:	21 f0       	breq	.+8      	; 0x884 <_Z14menuControllerc+0x6e>
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	84 34       	cpi	r24, 0x44	; 68
     880:	09 f0       	breq	.+2      	; 0x884 <_Z14menuControllerc+0x6e>
     882:	f8 c0       	rjmp	.+496    	; 0xa74 <_Z14menuControllerc+0x25e>
		{
			lcd.clear();
     884:	8e eb       	ldi	r24, 0xBE	; 190
     886:	93 e0       	ldi	r25, 0x03	; 3
     888:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN13LiquidCrystal5clearEv>
			switch (currentMenuStage)
     88c:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <currentMenuStage>
     890:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <currentMenuStage+0x1>
     894:	82 30       	cpi	r24, 0x02	; 2
     896:	91 05       	cpc	r25, r1
     898:	09 f4       	brne	.+2      	; 0x89c <_Z14menuControllerc+0x86>
     89a:	56 c0       	rjmp	.+172    	; 0x948 <_Z14menuControllerc+0x132>
     89c:	83 30       	cpi	r24, 0x03	; 3
     89e:	91 05       	cpc	r25, r1
     8a0:	2c f4       	brge	.+10     	; 0x8ac <_Z14menuControllerc+0x96>
     8a2:	00 97       	sbiw	r24, 0x00	; 0
     8a4:	79 f0       	breq	.+30     	; 0x8c4 <_Z14menuControllerc+0xae>
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	01 f1       	breq	.+64     	; 0x8ea <_Z14menuControllerc+0xd4>
     8aa:	d9 c0       	rjmp	.+434    	; 0xa5e <_Z14menuControllerc+0x248>
     8ac:	84 30       	cpi	r24, 0x04	; 4
     8ae:	91 05       	cpc	r25, r1
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <_Z14menuControllerc+0x9e>
     8b2:	84 c0       	rjmp	.+264    	; 0x9bc <_Z14menuControllerc+0x1a6>
     8b4:	84 30       	cpi	r24, 0x04	; 4
     8b6:	91 05       	cpc	r25, r1
     8b8:	0c f4       	brge	.+2      	; 0x8bc <_Z14menuControllerc+0xa6>
     8ba:	5c c0       	rjmp	.+184    	; 0x974 <_Z14menuControllerc+0x15e>
     8bc:	05 97       	sbiw	r24, 0x05	; 5
     8be:	09 f4       	brne	.+2      	; 0x8c2 <_Z14menuControllerc+0xac>
     8c0:	b4 c0       	rjmp	.+360    	; 0xa2a <_Z14menuControllerc+0x214>
     8c2:	cd c0       	rjmp	.+410    	; 0xa5e <_Z14menuControllerc+0x248>
			{
#pragma region Main Menu
				//Menu controls for the main menu
				case 0:
					if (keyPress == 'A')
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	81 34       	cpi	r24, 0x41	; 65
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <_Z14menuControllerc+0xc2>
					{
						currentMenuStage = 1;
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <currentMenuStage+0x1>
     8d2:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <currentMenuStage>
					}
					else if (keyPress == 'B')
					{
						currentMenuStage = 0;
					}
				break;
     8d6:	cb c0       	rjmp	.+406    	; 0xa6e <_Z14menuControllerc+0x258>
				case 0:
					if (keyPress == 'A')
					{
						currentMenuStage = 1;
					}
					else if (keyPress == 'B')
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	82 34       	cpi	r24, 0x42	; 66
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <_Z14menuControllerc+0xca>
     8de:	c7 c0       	rjmp	.+398    	; 0xa6e <_Z14menuControllerc+0x258>
					{
						currentMenuStage = 0;
     8e0:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <currentMenuStage+0x1>
     8e4:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <currentMenuStage>
					}
				break;
     8e8:	c2 c0       	rjmp	.+388    	; 0xa6e <_Z14menuControllerc+0x258>
#pragma endregion
#pragma region Heat Menu
				//Menu controls for the heat settings
				case 1:
					if (keyPress == 'A')
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	81 34       	cpi	r24, 0x41	; 65
     8ee:	91 f4       	brne	.+36     	; 0x914 <_Z14menuControllerc+0xfe>
					{
						if (fanAutoMode)
     8f0:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <fanAutoMode>
     8f4:	88 23       	and	r24, r24
     8f6:	39 f0       	breq	.+14     	; 0x906 <_Z14menuControllerc+0xf0>
						{
							currentMenuStage = 2;
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <currentMenuStage+0x1>
     900:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <currentMenuStage>
     904:	1a c0       	rjmp	.+52     	; 0x93a <_Z14menuControllerc+0x124>
						}
						else
						{
							currentMenuStage = 3;
     906:	83 e0       	ldi	r24, 0x03	; 3
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <currentMenuStage+0x1>
     90e:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <currentMenuStage>
     912:	13 c0       	rjmp	.+38     	; 0x93a <_Z14menuControllerc+0x124>
						}
					}
					else if (keyPress == 'B')
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	82 34       	cpi	r24, 0x42	; 66
     918:	39 f4       	brne	.+14     	; 0x928 <_Z14menuControllerc+0x112>
					{
						currentMenuStage = 5;
     91a:	85 e0       	ldi	r24, 0x05	; 5
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <currentMenuStage+0x1>
     922:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <currentMenuStage>
     926:	09 c0       	rjmp	.+18     	; 0x93a <_Z14menuControllerc+0x124>
					}
					else if (keyPress == 'C')
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	83 34       	cpi	r24, 0x43	; 67
     92c:	31 f4       	brne	.+12     	; 0x93a <_Z14menuControllerc+0x124>
					{
						currentMenuStage = 9;
     92e:	89 e0       	ldi	r24, 0x09	; 9
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <currentMenuStage+0x1>
     936:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <currentMenuStage>
					}
					
					previousMenuStage = 1;
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <previousMenuStage+0x1>
     942:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <previousMenuStage>
				break;
     946:	96 c0       	rjmp	.+300    	; 0xa74 <_Z14menuControllerc+0x25e>
#pragma endregion
#pragma region Fan Menu(Auto Mode On)
				//Menu controls for fan if Auto Mode is on
				case 2:
					if (keyPress == 'A') 
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	81 34       	cpi	r24, 0x41	; 65
     94c:	61 f4       	brne	.+24     	; 0x966 <_Z14menuControllerc+0x150>
					{
						fanAutoMode = false;
     94e:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <fanAutoMode>
						currentMenuStage = 3;
     952:	83 e0       	ldi	r24, 0x03	; 3
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <currentMenuStage+0x1>
     95a:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <currentMenuStage>
						currentFanSpeed = 0;	
     95e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     962:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
					}
					previousMenuStage = 1;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <previousMenuStage+0x1>
     96e:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <previousMenuStage>
				break;
     972:	80 c0       	rjmp	.+256    	; 0xa74 <_Z14menuControllerc+0x25e>
#pragma endregion
#pragma region Fan Menu(Auto Mode Off)
				//Menu controls for fan if Auto Mode is off
				case 3:
					if (keyPress == 'A')
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	81 34       	cpi	r24, 0x41	; 65
     978:	81 f4       	brne	.+32     	; 0x99a <_Z14menuControllerc+0x184>
					{
						fanAutoMode = true;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <fanAutoMode>
						currentMenuStage = 2;
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <currentMenuStage+0x1>
     988:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <currentMenuStage>
						previousMenuStage = 1;
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <previousMenuStage+0x1>
     994:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <previousMenuStage>
					else if (keyPress == 'B')
					{
						currentMenuStage = 4;
						previousMenuStage = 3;
					}
				break;
     998:	6c c0       	rjmp	.+216    	; 0xa72 <_Z14menuControllerc+0x25c>
					{
						fanAutoMode = true;
						currentMenuStage = 2;
						previousMenuStage = 1;
					}
					else if (keyPress == 'B')
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	82 34       	cpi	r24, 0x42	; 66
     99e:	09 f0       	breq	.+2      	; 0x9a2 <_Z14menuControllerc+0x18c>
     9a0:	68 c0       	rjmp	.+208    	; 0xa72 <_Z14menuControllerc+0x25c>
					{
						currentMenuStage = 4;
     9a2:	84 e0       	ldi	r24, 0x04	; 4
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <currentMenuStage+0x1>
     9aa:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <currentMenuStage>
						previousMenuStage = 3;
     9ae:	83 e0       	ldi	r24, 0x03	; 3
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <previousMenuStage+0x1>
     9b6:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <previousMenuStage>
					}
				break;
     9ba:	5b c0       	rjmp	.+182    	; 0xa72 <_Z14menuControllerc+0x25c>
#pragma endregion
#pragma region Fan Speed Menu
				//Menu Controls for the fan speed
				case 4:
				
				if (keyPress == 'A')
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	81 34       	cpi	r24, 0x41	; 65
     9c0:	a1 f4       	brne	.+40     	; 0x9ea <_Z14menuControllerc+0x1d4>
				{
					currentFanSpeed -= 5;
     9c2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     9c6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     9ca:	05 97       	sbiw	r24, 0x05	; 5
     9cc:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     9d0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
					if (currentFanSpeed < 0)
     9d4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     9d8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     9dc:	99 23       	and	r25, r25
     9de:	f4 f4       	brge	.+60     	; 0xa1c <_Z14menuControllerc+0x206>
					{
						currentFanSpeed = 0;
     9e0:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     9e4:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
     9e8:	19 c0       	rjmp	.+50     	; 0xa1c <_Z14menuControllerc+0x206>
					}
				}
				else if (keyPress == 'B')
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	82 34       	cpi	r24, 0x42	; 66
     9ee:	b1 f4       	brne	.+44     	; 0xa1c <_Z14menuControllerc+0x206>
				{
					currentFanSpeed += 5;
     9f0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     9f4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     9f8:	05 96       	adiw	r24, 0x05	; 5
     9fa:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     9fe:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
					if (currentFanSpeed > 100)
     a02:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     a06:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     a0a:	85 36       	cpi	r24, 0x65	; 101
     a0c:	91 05       	cpc	r25, r1
     a0e:	34 f0       	brlt	.+12     	; 0xa1c <_Z14menuControllerc+0x206>
					{
						currentFanSpeed = 100;
     a10:	84 e6       	ldi	r24, 0x64	; 100
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     a18:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
					}
				}
				previousMenuStage = 3;
     a1c:	83 e0       	ldi	r24, 0x03	; 3
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <previousMenuStage+0x1>
     a24:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <previousMenuStage>
				break;
     a28:	25 c0       	rjmp	.+74     	; 0xa74 <_Z14menuControllerc+0x25e>
#pragma endregion
#pragma region Temperatures Main Menu
				//Main menu controls for temperatures settings
				case 5:
					if (keyPress == 'A')
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	81 34       	cpi	r24, 0x41	; 65
     a2e:	39 f4       	brne	.+14     	; 0xa3e <_Z14menuControllerc+0x228>
					{
						currentMenuStage = 6;
     a30:	86 e0       	ldi	r24, 0x06	; 6
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <currentMenuStage+0x1>
     a38:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <currentMenuStage>
     a3c:	09 c0       	rjmp	.+18     	; 0xa50 <_Z14menuControllerc+0x23a>
					}
					else if (keyPress == 'B')
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	82 34       	cpi	r24, 0x42	; 66
     a42:	31 f4       	brne	.+12     	; 0xa50 <_Z14menuControllerc+0x23a>
					{
						currentMenuStage = 8;
     a44:	88 e0       	ldi	r24, 0x08	; 8
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <currentMenuStage+0x1>
     a4c:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <currentMenuStage>
					}
					
					previousMenuStage = 5;
     a50:	85 e0       	ldi	r24, 0x05	; 5
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <previousMenuStage+0x1>
     a58:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <previousMenuStage>
				break;
     a5c:	0b c0       	rjmp	.+22     	; 0xa74 <_Z14menuControllerc+0x25e>
#pragma endregion
				default:
					currentMenuStage = 404;
     a5e:	84 e9       	ldi	r24, 0x94	; 148
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <currentMenuStage+0x1>
     a66:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <currentMenuStage>
				break;
     a6a:	00 00       	nop
     a6c:	03 c0       	rjmp	.+6      	; 0xa74 <_Z14menuControllerc+0x25e>
					}
					else if (keyPress == 'B')
					{
						currentMenuStage = 0;
					}
				break;
     a6e:	00 00       	nop
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <_Z14menuControllerc+0x25e>
					else if (keyPress == 'B')
					{
						currentMenuStage = 4;
						previousMenuStage = 3;
					}
				break;
     a72:	00 00       	nop
				break;
			}
		}
	}
	
	lcdMenuLoader(currentMenuStage, ns);	
     a74:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <__data_end>
     a78:	30 91 b1 03 	lds	r19, 0x03B1	; 0x8003b1 <__data_end+0x1>
     a7c:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <currentMenuStage>
     a80:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <currentMenuStage+0x1>
     a84:	b9 01       	movw	r22, r18
     a86:	6f dc       	rcall	.-1826   	; 0x366 <_Z13lcdMenuLoaderii>
     a88:	00 00       	nop
     a8a:	0f 90       	pop	r0
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <setup>:

DHT dht(DHTPIN, DHTTYPE);
#pragma endregion

void setup() 
{
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
	lcd.begin(16, 2);
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	42 e0       	ldi	r20, 0x02	; 2
     a9e:	60 e1       	ldi	r22, 0x10	; 16
     aa0:	8e eb       	ldi	r24, 0xBE	; 190
     aa2:	93 e0       	ldi	r25, 0x03	; 3
     aa4:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN13LiquidCrystal5beginEhhh>
	dht.begin();
     aa8:	67 e3       	ldi	r22, 0x37	; 55
     aaa:	8a e3       	ldi	r24, 0x3A	; 58
     aac:	94 e0       	ldi	r25, 0x04	; 4
     aae:	d5 d0       	rcall	.+426    	; 0xc5a <_ZN3DHT5beginEh>
}
     ab0:	00 00       	nop
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <loop>:

void loop() 
{
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
	GetCurrentTemperatureAndHumidity();
     ac0:	0e 94 46 18 	call	0x308c	; 0x308c <_Z32GetCurrentTemperatureAndHumidityv>
	pressedKey = kpd.getKey();
     ac4:	86 ed       	ldi	r24, 0xD6	; 214
     ac6:	93 e0       	ldi	r25, 0x03	; 3
     ac8:	57 d7       	rcall	.+3758   	; 0x1978 <_ZN6Keypad6getKeyEv>
     aca:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <pressedKey>
	menuController(pressedKey);
     ace:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <pressedKey>
     ad2:	a1 de       	rcall	.-702    	; 0x816 <_Z14menuControllerc>
	pressedKey = NULL;
     ad4:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <pressedKey>
}
     ad8:	00 00       	nop
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <_Z41__static_initialization_and_destruction_0ii>:
     ae0:	cf 92       	push	r12
     ae2:	ef 92       	push	r14
     ae4:	0f 93       	push	r16
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	00 d0       	rcall	.+0      	; 0xaec <_Z41__static_initialization_and_destruction_0ii+0xc>
     aec:	1f 92       	push	r1
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	7c 83       	std	Y+4, r23	; 0x04
     af8:	6b 83       	std	Y+3, r22	; 0x03
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	9a 81       	ldd	r25, Y+2	; 0x02
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	39 f5       	brne	.+78     	; 0xb50 <_Z41__static_initialization_and_destruction_0ii+0x70>
     b02:	8b 81       	ldd	r24, Y+3	; 0x03
     b04:	9c 81       	ldd	r25, Y+4	; 0x04
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	19 f5       	brne	.+70     	; 0xb50 <_Z41__static_initialization_and_destruction_0ii+0x70>

#pragma region LCD setup
//LCD is connected to these pins
const int rs = 8, en = 9, d4 = 10, d5 = 11, d6 = 12, d7 = 13;

LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
     b0a:	0f 2e       	mov	r0, r31
     b0c:	fd e0       	ldi	r31, 0x0D	; 13
     b0e:	cf 2e       	mov	r12, r31
     b10:	f0 2d       	mov	r31, r0
     b12:	0f 2e       	mov	r0, r31
     b14:	fc e0       	ldi	r31, 0x0C	; 12
     b16:	ef 2e       	mov	r14, r31
     b18:	f0 2d       	mov	r31, r0
     b1a:	0b e0       	ldi	r16, 0x0B	; 11
     b1c:	2a e0       	ldi	r18, 0x0A	; 10
     b1e:	49 e0       	ldi	r20, 0x09	; 9
     b20:	68 e0       	ldi	r22, 0x08	; 8
     b22:	8e eb       	ldi	r24, 0xBE	; 190
     b24:	93 e0       	ldi	r25, 0x03	; 3
     b26:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN13LiquidCrystalC1Ehhhhhh>
// Connected keypad ROW0, ROW1, ROW2 and ROW3 to these pins.
byte rowPins[Rows] = {29, 28, 27, 26};
// Connected keypad COL0, COL1 and COL2 to these pins.
byte colPins[Cols] = {25, 24, 23, 22};
	
Keypad kpd = Keypad(makeKeymap(Keys), rowPins, colPins, Rows, Cols);
     b2a:	68 94       	set
     b2c:	ee 24       	eor	r14, r14
     b2e:	e2 f8       	bld	r14, 2
     b30:	04 e0       	ldi	r16, 0x04	; 4
     b32:	2d e1       	ldi	r18, 0x1D	; 29
     b34:	32 e0       	ldi	r19, 0x02	; 2
     b36:	49 e1       	ldi	r20, 0x19	; 25
     b38:	52 e0       	ldi	r21, 0x02	; 2
     b3a:	69 e0       	ldi	r22, 0x09	; 9
     b3c:	72 e0       	ldi	r23, 0x02	; 2
     b3e:	86 ed       	ldi	r24, 0xD6	; 214
     b40:	93 e0       	ldi	r25, 0x03	; 3
     b42:	76 d6       	rcall	.+3308   	; 0x1830 <_ZN6KeypadC1EPcPhS1_hh>

#pragma region DHT11 sensor setup
#define DHTTYPE DHT11
#define DHTPIN 2

DHT dht(DHTPIN, DHTTYPE);
     b44:	26 e0       	ldi	r18, 0x06	; 6
     b46:	4b e0       	ldi	r20, 0x0B	; 11
     b48:	62 e0       	ldi	r22, 0x02	; 2
     b4a:	8a e3       	ldi	r24, 0x3A	; 58
     b4c:	94 e0       	ldi	r25, 0x04	; 4
     b4e:	35 d0       	rcall	.+106    	; 0xbba <_ZN3DHTC1Ehhh>
{
	GetCurrentTemperatureAndHumidity();
	pressedKey = kpd.getKey();
	menuController(pressedKey);
	pressedKey = NULL;
}
     b50:	00 00       	nop
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	0f 91       	pop	r16
     b60:	ef 90       	pop	r14
     b62:	cf 90       	pop	r12
     b64:	08 95       	ret

00000b66 <_GLOBAL__sub_I_motorPin>:
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	6f ef       	ldi	r22, 0xFF	; 255
     b70:	7f ef       	ldi	r23, 0xFF	; 255
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	b4 df       	rcall	.-152    	; 0xae0 <_Z41__static_initialization_and_destruction_0ii>
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <_ZN13InterruptLockC1Ev>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	1f 92       	push	r1
     b84:	1f 92       	push	r1
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	9a 83       	std	Y+2, r25	; 0x02
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	f8 94       	cli
     b90:	00 00       	nop
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <_ZN13InterruptLockD1Ev>:
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	1f 92       	push	r1
     ba2:	1f 92       	push	r1
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	9a 83       	std	Y+2, r25	; 0x02
     baa:	89 83       	std	Y+1, r24	; 0x01
     bac:	78 94       	sei
     bae:	00 00       	nop
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <_ZN3DHTC1Ehhh>:
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	2b 97       	sbiw	r28, 0x0b	; 11
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	f8 94       	cli
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	cd bf       	out	0x3d, r28	; 61
     bce:	98 87       	std	Y+8, r25	; 0x08
     bd0:	8f 83       	std	Y+7, r24	; 0x07
     bd2:	69 87       	std	Y+9, r22	; 0x09
     bd4:	4a 87       	std	Y+10, r20	; 0x0a
     bd6:	2b 87       	std	Y+11, r18	; 0x0b
     bd8:	8f 81       	ldd	r24, Y+7	; 0x07
     bda:	98 85       	ldd	r25, Y+8	; 0x08
     bdc:	29 85       	ldd	r18, Y+9	; 0x09
     bde:	fc 01       	movw	r30, r24
     be0:	25 83       	std	Z+5, r18	; 0x05
     be2:	8f 81       	ldd	r24, Y+7	; 0x07
     be4:	98 85       	ldd	r25, Y+8	; 0x08
     be6:	2a 85       	ldd	r18, Y+10	; 0x0a
     be8:	fc 01       	movw	r30, r24
     bea:	26 83       	std	Z+6, r18	; 0x06
     bec:	89 85       	ldd	r24, Y+9	; 0x09
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	8e 53       	subi	r24, 0x3E	; 62
     bf4:	9e 4f       	sbci	r25, 0xFE	; 254
     bf6:	9a 83       	std	Y+2, r25	; 0x02
     bf8:	89 83       	std	Y+1, r24	; 0x01
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
     bfe:	fc 01       	movw	r30, r24
     c00:	84 91       	lpm	r24, Z
     c02:	8b 83       	std	Y+3, r24	; 0x03
     c04:	8f 81       	ldd	r24, Y+7	; 0x07
     c06:	98 85       	ldd	r25, Y+8	; 0x08
     c08:	2b 81       	ldd	r18, Y+3	; 0x03
     c0a:	fc 01       	movw	r30, r24
     c0c:	27 83       	std	Z+7, r18	; 0x07
     c0e:	89 85       	ldd	r24, Y+9	; 0x09
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	88 5f       	subi	r24, 0xF8	; 248
     c16:	9d 4f       	sbci	r25, 0xFD	; 253
     c18:	9d 83       	std	Y+5, r25	; 0x05
     c1a:	8c 83       	std	Y+4, r24	; 0x04
     c1c:	8c 81       	ldd	r24, Y+4	; 0x04
     c1e:	9d 81       	ldd	r25, Y+5	; 0x05
     c20:	fc 01       	movw	r30, r24
     c22:	84 91       	lpm	r24, Z
     c24:	8e 83       	std	Y+6, r24	; 0x06
     c26:	8f 81       	ldd	r24, Y+7	; 0x07
     c28:	98 85       	ldd	r25, Y+8	; 0x08
     c2a:	2e 81       	ldd	r18, Y+6	; 0x06
     c2c:	fc 01       	movw	r30, r24
     c2e:	20 87       	std	Z+8, r18	; 0x08
     c30:	2f 81       	ldd	r18, Y+7	; 0x07
     c32:	38 85       	ldd	r19, Y+8	; 0x08
     c34:	80 e8       	ldi	r24, 0x80	; 128
     c36:	9e e3       	ldi	r25, 0x3E	; 62
     c38:	a0 e0       	ldi	r26, 0x00	; 0
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	f9 01       	movw	r30, r18
     c3e:	85 87       	std	Z+13, r24	; 0x0d
     c40:	96 87       	std	Z+14, r25	; 0x0e
     c42:	a7 87       	std	Z+15, r26	; 0x0f
     c44:	b0 8b       	std	Z+16, r27	; 0x10
     c46:	00 00       	nop
     c48:	2b 96       	adiw	r28, 0x0b	; 11
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <_ZN3DHT5beginEh>:
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <_ZN3DHT5beginEh+0x6>
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	6b 83       	std	Y+3, r22	; 0x03
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	9a 81       	ldd	r25, Y+2	; 0x02
     c6e:	fc 01       	movw	r30, r24
     c70:	85 81       	ldd	r24, Z+5	; 0x05
     c72:	62 e0       	ldi	r22, 0x02	; 2
     c74:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <pinMode>
     c78:	0e 94 95 1c 	call	0x392a	; 0x392a <millis>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	80 5d       	subi	r24, 0xD0	; 208
     c82:	97 40       	sbci	r25, 0x07	; 7
     c84:	a1 09       	sbc	r26, r1
     c86:	b1 09       	sbc	r27, r1
     c88:	29 81       	ldd	r18, Y+1	; 0x01
     c8a:	3a 81       	ldd	r19, Y+2	; 0x02
     c8c:	f9 01       	movw	r30, r18
     c8e:	81 87       	std	Z+9, r24	; 0x09
     c90:	92 87       	std	Z+10, r25	; 0x0a
     c92:	a3 87       	std	Z+11, r26	; 0x0b
     c94:	b4 87       	std	Z+12, r27	; 0x0c
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	2b 81       	ldd	r18, Y+3	; 0x03
     c9c:	fc 01       	movw	r30, r24
     c9e:	22 8b       	std	Z+18, r18	; 0x12
     ca0:	00 00       	nop
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	08 95       	ret

00000cae <_ZN3DHT15readTemperatureEbb>:
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	28 97       	sbiw	r28, 0x08	; 8
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
     cc2:	9e 83       	std	Y+6, r25	; 0x06
     cc4:	8d 83       	std	Y+5, r24	; 0x05
     cc6:	6f 83       	std	Y+7, r22	; 0x07
     cc8:	48 87       	std	Y+8, r20	; 0x08
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a0 ec       	ldi	r26, 0xC0	; 192
     cd0:	bf e7       	ldi	r27, 0x7F	; 127
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	9a 83       	std	Y+2, r25	; 0x02
     cd6:	ab 83       	std	Y+3, r26	; 0x03
     cd8:	bc 83       	std	Y+4, r27	; 0x04
     cda:	8d 81       	ldd	r24, Y+5	; 0x05
     cdc:	9e 81       	ldd	r25, Y+6	; 0x06
     cde:	68 85       	ldd	r22, Y+8	; 0x08
     ce0:	1d d2       	rcall	.+1082   	; 0x111c <_ZN3DHT4readEb>
     ce2:	88 23       	and	r24, r24
     ce4:	09 f4       	brne	.+2      	; 0xce8 <_ZN3DHT15readTemperatureEbb+0x3a>
     ce6:	34 c1       	rjmp	.+616    	; 0xf50 <_ZN3DHT15readTemperatureEbb+0x2a2>
     ce8:	8d 81       	ldd	r24, Y+5	; 0x05
     cea:	9e 81       	ldd	r25, Y+6	; 0x06
     cec:	fc 01       	movw	r30, r24
     cee:	86 81       	ldd	r24, Z+6	; 0x06
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	8c 30       	cpi	r24, 0x0C	; 12
     cf6:	91 05       	cpc	r25, r1
     cf8:	09 f4       	brne	.+2      	; 0xcfc <_ZN3DHT15readTemperatureEbb+0x4e>
     cfa:	72 c0       	rjmp	.+228    	; 0xde0 <_ZN3DHT15readTemperatureEbb+0x132>
     cfc:	8d 30       	cpi	r24, 0x0D	; 13
     cfe:	91 05       	cpc	r25, r1
     d00:	1c f4       	brge	.+6      	; 0xd08 <_ZN3DHT15readTemperatureEbb+0x5a>
     d02:	0b 97       	sbiw	r24, 0x0b	; 11
     d04:	31 f0       	breq	.+12     	; 0xd12 <_ZN3DHT15readTemperatureEbb+0x64>
     d06:	24 c1       	rjmp	.+584    	; 0xf50 <_ZN3DHT15readTemperatureEbb+0x2a2>
     d08:	45 97       	sbiw	r24, 0x15	; 21
     d0a:	02 97       	sbiw	r24, 0x02	; 2
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <_ZN3DHT15readTemperatureEbb+0x62>
     d0e:	20 c1       	rjmp	.+576    	; 0xf50 <_ZN3DHT15readTemperatureEbb+0x2a2>
     d10:	c7 c0       	rjmp	.+398    	; 0xea0 <_ZN3DHT15readTemperatureEbb+0x1f2>
     d12:	8d 81       	ldd	r24, Y+5	; 0x05
     d14:	9e 81       	ldd	r25, Y+6	; 0x06
     d16:	fc 01       	movw	r30, r24
     d18:	82 81       	ldd	r24, Z+2	; 0x02
     d1a:	88 2f       	mov	r24, r24
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	a0 e0       	ldi	r26, 0x00	; 0
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	bc 01       	movw	r22, r24
     d24:	cd 01       	movw	r24, r26
     d26:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__floatunsisf>
     d2a:	dc 01       	movw	r26, r24
     d2c:	cb 01       	movw	r24, r22
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	9a 83       	std	Y+2, r25	; 0x02
     d32:	ab 83       	std	Y+3, r26	; 0x03
     d34:	bc 83       	std	Y+4, r27	; 0x04
     d36:	8d 81       	ldd	r24, Y+5	; 0x05
     d38:	9e 81       	ldd	r25, Y+6	; 0x06
     d3a:	fc 01       	movw	r30, r24
     d3c:	83 81       	ldd	r24, Z+3	; 0x03
     d3e:	88 23       	and	r24, r24
     d40:	84 f4       	brge	.+32     	; 0xd62 <_ZN3DHT15readTemperatureEbb+0xb4>
     d42:	29 81       	ldd	r18, Y+1	; 0x01
     d44:	3a 81       	ldd	r19, Y+2	; 0x02
     d46:	4b 81       	ldd	r20, Y+3	; 0x03
     d48:	5c 81       	ldd	r21, Y+4	; 0x04
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	80 e8       	ldi	r24, 0x80	; 128
     d50:	9f eb       	ldi	r25, 0xBF	; 191
     d52:	0e 94 7d 18 	call	0x30fa	; 0x30fa <__subsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	9a 83       	std	Y+2, r25	; 0x02
     d5e:	ab 83       	std	Y+3, r26	; 0x03
     d60:	bc 83       	std	Y+4, r27	; 0x04
     d62:	8d 81       	ldd	r24, Y+5	; 0x05
     d64:	9e 81       	ldd	r25, Y+6	; 0x06
     d66:	fc 01       	movw	r30, r24
     d68:	83 81       	ldd	r24, Z+3	; 0x03
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	8f 70       	andi	r24, 0x0F	; 15
     d70:	99 27       	eor	r25, r25
     d72:	09 2e       	mov	r0, r25
     d74:	00 0c       	add	r0, r0
     d76:	aa 0b       	sbc	r26, r26
     d78:	bb 0b       	sbc	r27, r27
     d7a:	bc 01       	movw	r22, r24
     d7c:	cd 01       	movw	r24, r26
     d7e:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__floatsisf>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	2d ec       	ldi	r18, 0xCD	; 205
     d88:	3c ec       	ldi	r19, 0xCC	; 204
     d8a:	4c ec       	ldi	r20, 0xCC	; 204
     d8c:	5d e3       	ldi	r21, 0x3D	; 61
     d8e:	bc 01       	movw	r22, r24
     d90:	cd 01       	movw	r24, r26
     d92:	0e 94 4e 1a 	call	0x349c	; 0x349c <__mulsf3>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	9c 01       	movw	r18, r24
     d9c:	ad 01       	movw	r20, r26
     d9e:	69 81       	ldd	r22, Y+1	; 0x01
     da0:	7a 81       	ldd	r23, Y+2	; 0x02
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	9c 81       	ldd	r25, Y+4	; 0x04
     da6:	0e 94 7e 18 	call	0x30fc	; 0x30fc <__addsf3>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	ab 83       	std	Y+3, r26	; 0x03
     db4:	bc 83       	std	Y+4, r27	; 0x04
     db6:	8f 81       	ldd	r24, Y+7	; 0x07
     db8:	88 23       	and	r24, r24
     dba:	09 f4       	brne	.+2      	; 0xdbe <_ZN3DHT15readTemperatureEbb+0x110>
     dbc:	c4 c0       	rjmp	.+392    	; 0xf46 <_ZN3DHT15readTemperatureEbb+0x298>
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	ab 81       	ldd	r26, Y+3	; 0x03
     dc4:	bc 81       	ldd	r27, Y+4	; 0x04
     dc6:	2d 81       	ldd	r18, Y+5	; 0x05
     dc8:	3e 81       	ldd	r19, Y+6	; 0x06
     dca:	ac 01       	movw	r20, r24
     dcc:	bd 01       	movw	r22, r26
     dce:	c9 01       	movw	r24, r18
     dd0:	ce d0       	rcall	.+412    	; 0xf6e <_ZN3DHT11convertCtoFEf>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	89 83       	std	Y+1, r24	; 0x01
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	ab 83       	std	Y+3, r26	; 0x03
     ddc:	bc 83       	std	Y+4, r27	; 0x04
     dde:	b3 c0       	rjmp	.+358    	; 0xf46 <_ZN3DHT15readTemperatureEbb+0x298>
     de0:	8d 81       	ldd	r24, Y+5	; 0x05
     de2:	9e 81       	ldd	r25, Y+6	; 0x06
     de4:	fc 01       	movw	r30, r24
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	a0 e0       	ldi	r26, 0x00	; 0
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	bc 01       	movw	r22, r24
     df2:	cd 01       	movw	r24, r26
     df4:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__floatunsisf>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	9a 83       	std	Y+2, r25	; 0x02
     e00:	ab 83       	std	Y+3, r26	; 0x03
     e02:	bc 83       	std	Y+4, r27	; 0x04
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
     e06:	9e 81       	ldd	r25, Y+6	; 0x06
     e08:	fc 01       	movw	r30, r24
     e0a:	83 81       	ldd	r24, Z+3	; 0x03
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	8f 70       	andi	r24, 0x0F	; 15
     e12:	99 27       	eor	r25, r25
     e14:	09 2e       	mov	r0, r25
     e16:	00 0c       	add	r0, r0
     e18:	aa 0b       	sbc	r26, r26
     e1a:	bb 0b       	sbc	r27, r27
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__floatsisf>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	2d ec       	ldi	r18, 0xCD	; 205
     e2a:	3c ec       	ldi	r19, 0xCC	; 204
     e2c:	4c ec       	ldi	r20, 0xCC	; 204
     e2e:	5d e3       	ldi	r21, 0x3D	; 61
     e30:	bc 01       	movw	r22, r24
     e32:	cd 01       	movw	r24, r26
     e34:	0e 94 4e 1a 	call	0x349c	; 0x349c <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	9c 01       	movw	r18, r24
     e3e:	ad 01       	movw	r20, r26
     e40:	69 81       	ldd	r22, Y+1	; 0x01
     e42:	7a 81       	ldd	r23, Y+2	; 0x02
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	9c 81       	ldd	r25, Y+4	; 0x04
     e48:	0e 94 7e 18 	call	0x30fc	; 0x30fc <__addsf3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	89 83       	std	Y+1, r24	; 0x01
     e52:	9a 83       	std	Y+2, r25	; 0x02
     e54:	ab 83       	std	Y+3, r26	; 0x03
     e56:	bc 83       	std	Y+4, r27	; 0x04
     e58:	8d 81       	ldd	r24, Y+5	; 0x05
     e5a:	9e 81       	ldd	r25, Y+6	; 0x06
     e5c:	fc 01       	movw	r30, r24
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	88 23       	and	r24, r24
     e62:	4c f4       	brge	.+18     	; 0xe76 <_ZN3DHT15readTemperatureEbb+0x1c8>
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	ab 81       	ldd	r26, Y+3	; 0x03
     e6a:	bc 81       	ldd	r27, Y+4	; 0x04
     e6c:	b0 58       	subi	r27, 0x80	; 128
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	9a 83       	std	Y+2, r25	; 0x02
     e72:	ab 83       	std	Y+3, r26	; 0x03
     e74:	bc 83       	std	Y+4, r27	; 0x04
     e76:	8f 81       	ldd	r24, Y+7	; 0x07
     e78:	88 23       	and	r24, r24
     e7a:	09 f4       	brne	.+2      	; 0xe7e <_ZN3DHT15readTemperatureEbb+0x1d0>
     e7c:	66 c0       	rjmp	.+204    	; 0xf4a <_ZN3DHT15readTemperatureEbb+0x29c>
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	ab 81       	ldd	r26, Y+3	; 0x03
     e84:	bc 81       	ldd	r27, Y+4	; 0x04
     e86:	2d 81       	ldd	r18, Y+5	; 0x05
     e88:	3e 81       	ldd	r19, Y+6	; 0x06
     e8a:	ac 01       	movw	r20, r24
     e8c:	bd 01       	movw	r22, r26
     e8e:	c9 01       	movw	r24, r18
     e90:	6e d0       	rcall	.+220    	; 0xf6e <_ZN3DHT11convertCtoFEf>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	89 83       	std	Y+1, r24	; 0x01
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	ab 83       	std	Y+3, r26	; 0x03
     e9c:	bc 83       	std	Y+4, r27	; 0x04
     e9e:	55 c0       	rjmp	.+170    	; 0xf4a <_ZN3DHT15readTemperatureEbb+0x29c>
     ea0:	8d 81       	ldd	r24, Y+5	; 0x05
     ea2:	9e 81       	ldd	r25, Y+6	; 0x06
     ea4:	fc 01       	movw	r30, r24
     ea6:	82 81       	ldd	r24, Z+2	; 0x02
     ea8:	88 2f       	mov	r24, r24
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	8f 77       	andi	r24, 0x7F	; 127
     eae:	99 27       	eor	r25, r25
     eb0:	38 2f       	mov	r19, r24
     eb2:	22 27       	eor	r18, r18
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	9e 81       	ldd	r25, Y+6	; 0x06
     eb8:	fc 01       	movw	r30, r24
     eba:	83 81       	ldd	r24, Z+3	; 0x03
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	82 2b       	or	r24, r18
     ec2:	93 2b       	or	r25, r19
     ec4:	cc 01       	movw	r24, r24
     ec6:	a0 e0       	ldi	r26, 0x00	; 0
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	bc 01       	movw	r22, r24
     ecc:	cd 01       	movw	r24, r26
     ece:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__floatunsisf>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	ab 83       	std	Y+3, r26	; 0x03
     edc:	bc 83       	std	Y+4, r27	; 0x04
     ede:	2d ec       	ldi	r18, 0xCD	; 205
     ee0:	3c ec       	ldi	r19, 0xCC	; 204
     ee2:	4c ec       	ldi	r20, 0xCC	; 204
     ee4:	5d e3       	ldi	r21, 0x3D	; 61
     ee6:	69 81       	ldd	r22, Y+1	; 0x01
     ee8:	7a 81       	ldd	r23, Y+2	; 0x02
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	9c 81       	ldd	r25, Y+4	; 0x04
     eee:	0e 94 4e 1a 	call	0x349c	; 0x349c <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	ab 83       	std	Y+3, r26	; 0x03
     efc:	bc 83       	std	Y+4, r27	; 0x04
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	fc 01       	movw	r30, r24
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	88 23       	and	r24, r24
     f08:	4c f4       	brge	.+18     	; 0xf1c <_ZN3DHT15readTemperatureEbb+0x26e>
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	ab 81       	ldd	r26, Y+3	; 0x03
     f10:	bc 81       	ldd	r27, Y+4	; 0x04
     f12:	b0 58       	subi	r27, 0x80	; 128
     f14:	89 83       	std	Y+1, r24	; 0x01
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	ab 83       	std	Y+3, r26	; 0x03
     f1a:	bc 83       	std	Y+4, r27	; 0x04
     f1c:	8f 81       	ldd	r24, Y+7	; 0x07
     f1e:	88 23       	and	r24, r24
     f20:	b1 f0       	breq	.+44     	; 0xf4e <_ZN3DHT15readTemperatureEbb+0x2a0>
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	ab 81       	ldd	r26, Y+3	; 0x03
     f28:	bc 81       	ldd	r27, Y+4	; 0x04
     f2a:	2d 81       	ldd	r18, Y+5	; 0x05
     f2c:	3e 81       	ldd	r19, Y+6	; 0x06
     f2e:	ac 01       	movw	r20, r24
     f30:	bd 01       	movw	r22, r26
     f32:	c9 01       	movw	r24, r18
     f34:	1c d0       	rcall	.+56     	; 0xf6e <_ZN3DHT11convertCtoFEf>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	89 83       	std	Y+1, r24	; 0x01
     f3c:	9a 83       	std	Y+2, r25	; 0x02
     f3e:	ab 83       	std	Y+3, r26	; 0x03
     f40:	bc 83       	std	Y+4, r27	; 0x04
     f42:	00 00       	nop
     f44:	04 c0       	rjmp	.+8      	; 0xf4e <_ZN3DHT15readTemperatureEbb+0x2a0>
     f46:	00 00       	nop
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <_ZN3DHT15readTemperatureEbb+0x2a2>
     f4a:	00 00       	nop
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <_ZN3DHT15readTemperatureEbb+0x2a2>
     f4e:	00 00       	nop
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	9a 81       	ldd	r25, Y+2	; 0x02
     f54:	ab 81       	ldd	r26, Y+3	; 0x03
     f56:	bc 81       	ldd	r27, Y+4	; 0x04
     f58:	bc 01       	movw	r22, r24
     f5a:	cd 01       	movw	r24, r26
     f5c:	28 96       	adiw	r28, 0x08	; 8
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <_ZN3DHT11convertCtoFEf>:
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	00 d0       	rcall	.+0      	; 0xf74 <_ZN3DHT11convertCtoFEf+0x6>
     f74:	00 d0       	rcall	.+0      	; 0xf76 <_ZN3DHT11convertCtoFEf+0x8>
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	4b 83       	std	Y+3, r20	; 0x03
     f80:	5c 83       	std	Y+4, r21	; 0x04
     f82:	6d 83       	std	Y+5, r22	; 0x05
     f84:	7e 83       	std	Y+6, r23	; 0x06
     f86:	26 e6       	ldi	r18, 0x66	; 102
     f88:	36 e6       	ldi	r19, 0x66	; 102
     f8a:	46 ee       	ldi	r20, 0xE6	; 230
     f8c:	5f e3       	ldi	r21, 0x3F	; 63
     f8e:	6b 81       	ldd	r22, Y+3	; 0x03
     f90:	7c 81       	ldd	r23, Y+4	; 0x04
     f92:	8d 81       	ldd	r24, Y+5	; 0x05
     f94:	9e 81       	ldd	r25, Y+6	; 0x06
     f96:	0e 94 4e 1a 	call	0x349c	; 0x349c <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	52 e4       	ldi	r21, 0x42	; 66
     fa6:	bc 01       	movw	r22, r24
     fa8:	cd 01       	movw	r24, r26
     faa:	0e 94 7e 18 	call	0x30fc	; 0x30fc <__addsf3>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	bc 01       	movw	r22, r24
     fb4:	cd 01       	movw	r24, r26
     fb6:	26 96       	adiw	r28, 0x06	; 6
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	08 95       	ret

00000fc8 <_ZN3DHT12readHumidityEb>:
     fc8:	cf 92       	push	r12
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	27 97       	sbiw	r28, 0x07	; 7
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	9e 83       	std	Y+6, r25	; 0x06
     fe6:	8d 83       	std	Y+5, r24	; 0x05
     fe8:	6f 83       	std	Y+7, r22	; 0x07
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	a0 ec       	ldi	r26, 0xC0	; 192
     ff0:	bf e7       	ldi	r27, 0x7F	; 127
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	ab 83       	std	Y+3, r26	; 0x03
     ff8:	bc 83       	std	Y+4, r27	; 0x04
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    1000:	8d d0       	rcall	.+282    	; 0x111c <_ZN3DHT4readEb>
    1002:	88 23       	and	r24, r24
    1004:	09 f4       	brne	.+2      	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
    1006:	77 c0       	rjmp	.+238    	; 0x10f6 <__EEPROM_REGION_LENGTH__+0xf6>
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	fc 01       	movw	r30, r24
    100e:	86 81       	ldd	r24, Z+6	; 0x06
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	8b 30       	cpi	r24, 0x0B	; 11
    1016:	91 05       	cpc	r25, r1
    1018:	0c f4       	brge	.+2      	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
    101a:	6d c0       	rjmp	.+218    	; 0x10f6 <__EEPROM_REGION_LENGTH__+0xf6>
    101c:	8d 30       	cpi	r24, 0x0D	; 13
    101e:	91 05       	cpc	r25, r1
    1020:	2c f0       	brlt	.+10     	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    1022:	45 97       	sbiw	r24, 0x15	; 21
    1024:	02 97       	sbiw	r24, 0x02	; 2
    1026:	08 f0       	brcs	.+2      	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1028:	66 c0       	rjmp	.+204    	; 0x10f6 <__EEPROM_REGION_LENGTH__+0xf6>
    102a:	37 c0       	rjmp	.+110    	; 0x109a <__EEPROM_REGION_LENGTH__+0x9a>
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	fc 01       	movw	r30, r24
    1032:	80 81       	ld	r24, Z
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	09 2e       	mov	r0, r25
    103a:	00 0c       	add	r0, r0
    103c:	aa 0b       	sbc	r26, r26
    103e:	bb 0b       	sbc	r27, r27
    1040:	bc 01       	movw	r22, r24
    1042:	cd 01       	movw	r24, r26
    1044:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__floatsisf>
    1048:	6b 01       	movw	r12, r22
    104a:	7c 01       	movw	r14, r24
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	fc 01       	movw	r30, r24
    1052:	81 81       	ldd	r24, Z+1	; 0x01
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	09 2e       	mov	r0, r25
    105a:	00 0c       	add	r0, r0
    105c:	aa 0b       	sbc	r26, r26
    105e:	bb 0b       	sbc	r27, r27
    1060:	bc 01       	movw	r22, r24
    1062:	cd 01       	movw	r24, r26
    1064:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__floatsisf>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	2d ec       	ldi	r18, 0xCD	; 205
    106e:	3c ec       	ldi	r19, 0xCC	; 204
    1070:	4c ec       	ldi	r20, 0xCC	; 204
    1072:	5d e3       	ldi	r21, 0x3D	; 61
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	0e 94 4e 1a 	call	0x349c	; 0x349c <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	9c 01       	movw	r18, r24
    1082:	ad 01       	movw	r20, r26
    1084:	c7 01       	movw	r24, r14
    1086:	b6 01       	movw	r22, r12
    1088:	0e 94 7e 18 	call	0x30fc	; 0x30fc <__addsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	ab 83       	std	Y+3, r26	; 0x03
    1096:	bc 83       	std	Y+4, r27	; 0x04
    1098:	2e c0       	rjmp	.+92     	; 0x10f6 <__EEPROM_REGION_LENGTH__+0xf6>
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	fc 01       	movw	r30, r24
    10a0:	80 81       	ld	r24, Z
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	38 2f       	mov	r19, r24
    10a8:	22 27       	eor	r18, r18
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9e 81       	ldd	r25, Y+6	; 0x06
    10ae:	fc 01       	movw	r30, r24
    10b0:	81 81       	ldd	r24, Z+1	; 0x01
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	82 2b       	or	r24, r18
    10b8:	93 2b       	or	r25, r19
    10ba:	cc 01       	movw	r24, r24
    10bc:	a0 e0       	ldi	r26, 0x00	; 0
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__floatunsisf>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	9a 83       	std	Y+2, r25	; 0x02
    10d0:	ab 83       	std	Y+3, r26	; 0x03
    10d2:	bc 83       	std	Y+4, r27	; 0x04
    10d4:	2d ec       	ldi	r18, 0xCD	; 205
    10d6:	3c ec       	ldi	r19, 0xCC	; 204
    10d8:	4c ec       	ldi	r20, 0xCC	; 204
    10da:	5d e3       	ldi	r21, 0x3D	; 61
    10dc:	69 81       	ldd	r22, Y+1	; 0x01
    10de:	7a 81       	ldd	r23, Y+2	; 0x02
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	0e 94 4e 1a 	call	0x349c	; 0x349c <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	9a 83       	std	Y+2, r25	; 0x02
    10f0:	ab 83       	std	Y+3, r26	; 0x03
    10f2:	bc 83       	std	Y+4, r27	; 0x04
    10f4:	00 00       	nop
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	9a 81       	ldd	r25, Y+2	; 0x02
    10fa:	ab 81       	ldd	r26, Y+3	; 0x03
    10fc:	bc 81       	ldd	r27, Y+4	; 0x04
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	27 96       	adiw	r28, 0x07	; 7
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	08 95       	ret

0000111c <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    111c:	af 92       	push	r10
    111e:	bf 92       	push	r11
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	c4 55       	subi	r28, 0x54	; 84
    1134:	d1 40       	sbci	r29, 0x01	; 1
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	9e 01       	movw	r18, r28
    1142:	2e 5a       	subi	r18, 0xAE	; 174
    1144:	3e 4f       	sbci	r19, 0xFE	; 254
    1146:	f9 01       	movw	r30, r18
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	80 83       	st	Z, r24
    114c:	ce 01       	movw	r24, r28
    114e:	8c 5a       	subi	r24, 0xAC	; 172
    1150:	9e 4f       	sbci	r25, 0xFE	; 254
    1152:	fc 01       	movw	r30, r24
    1154:	60 83       	st	Z, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    1156:	0e 94 95 1c 	call	0x392a	; 0x392a <millis>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	8d 83       	std	Y+5, r24	; 0x05
    1160:	9e 83       	std	Y+6, r25	; 0x06
    1162:	af 83       	std	Y+7, r26	; 0x07
    1164:	b8 87       	std	Y+8, r27	; 0x08
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    1166:	ce 01       	movw	r24, r28
    1168:	8c 5a       	subi	r24, 0xAC	; 172
    116a:	9e 4f       	sbci	r25, 0xFE	; 254
    116c:	fc 01       	movw	r30, r24
    116e:	90 81       	ld	r25, Z
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	89 27       	eor	r24, r25
    1174:	88 23       	and	r24, r24
    1176:	29 f1       	breq	.+74     	; 0x11c2 <_ZN3DHT4readEb+0xa6>
    1178:	ce 01       	movw	r24, r28
    117a:	8e 5a       	subi	r24, 0xAE	; 174
    117c:	9e 4f       	sbci	r25, 0xFE	; 254
    117e:	fc 01       	movw	r30, r24
    1180:	80 81       	ld	r24, Z
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	fc 01       	movw	r30, r24
    1186:	81 85       	ldd	r24, Z+9	; 0x09
    1188:	92 85       	ldd	r25, Z+10	; 0x0a
    118a:	a3 85       	ldd	r26, Z+11	; 0x0b
    118c:	b4 85       	ldd	r27, Z+12	; 0x0c
    118e:	2d 81       	ldd	r18, Y+5	; 0x05
    1190:	3e 81       	ldd	r19, Y+6	; 0x06
    1192:	4f 81       	ldd	r20, Y+7	; 0x07
    1194:	58 85       	ldd	r21, Y+8	; 0x08
    1196:	59 01       	movw	r10, r18
    1198:	6a 01       	movw	r12, r20
    119a:	a8 1a       	sub	r10, r24
    119c:	b9 0a       	sbc	r11, r25
    119e:	ca 0a       	sbc	r12, r26
    11a0:	db 0a       	sbc	r13, r27
    11a2:	d6 01       	movw	r26, r12
    11a4:	c5 01       	movw	r24, r10
    11a6:	80 3d       	cpi	r24, 0xD0	; 208
    11a8:	97 40       	sbci	r25, 0x07	; 7
    11aa:	a1 05       	cpc	r26, r1
    11ac:	b1 05       	cpc	r27, r1
    11ae:	48 f4       	brcc	.+18     	; 0x11c2 <_ZN3DHT4readEb+0xa6>
    return _lastresult; // return last correct measurement
    11b0:	ce 01       	movw	r24, r28
    11b2:	8e 5a       	subi	r24, 0xAE	; 174
    11b4:	9e 4f       	sbci	r25, 0xFE	; 254
    11b6:	fc 01       	movw	r30, r24
    11b8:	80 81       	ld	r24, Z
    11ba:	91 81       	ldd	r25, Z+1	; 0x01
    11bc:	fc 01       	movw	r30, r24
    11be:	f1 88       	ldd	r15, Z+17	; 0x11
    11c0:	5f c2       	rjmp	.+1214   	; 0x1680 <_ZN3DHT4readEb+0x564>
  }
  _lastreadtime = currenttime;
    11c2:	ce 01       	movw	r24, r28
    11c4:	8e 5a       	subi	r24, 0xAE	; 174
    11c6:	9e 4f       	sbci	r25, 0xFE	; 254
    11c8:	fc 01       	movw	r30, r24
    11ca:	20 81       	ld	r18, Z
    11cc:	31 81       	ldd	r19, Z+1	; 0x01
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	af 81       	ldd	r26, Y+7	; 0x07
    11d4:	b8 85       	ldd	r27, Y+8	; 0x08
    11d6:	f9 01       	movw	r30, r18
    11d8:	81 87       	std	Z+9, r24	; 0x09
    11da:	92 87       	std	Z+10, r25	; 0x0a
    11dc:	a3 87       	std	Z+11, r26	; 0x0b
    11de:	b4 87       	std	Z+12, r27	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    11e0:	ce 01       	movw	r24, r28
    11e2:	8e 5a       	subi	r24, 0xAE	; 174
    11e4:	9e 4f       	sbci	r25, 0xFE	; 254
    11e6:	fc 01       	movw	r30, r24
    11e8:	80 81       	ld	r24, Z
    11ea:	91 81       	ldd	r25, Z+1	; 0x01
    11ec:	fc 01       	movw	r30, r24
    11ee:	14 82       	std	Z+4, r1	; 0x04
    11f0:	ce 01       	movw	r24, r28
    11f2:	8e 5a       	subi	r24, 0xAE	; 174
    11f4:	9e 4f       	sbci	r25, 0xFE	; 254
    11f6:	fc 01       	movw	r30, r24
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	fc 01       	movw	r30, r24
    11fe:	24 81       	ldd	r18, Z+4	; 0x04
    1200:	ce 01       	movw	r24, r28
    1202:	8e 5a       	subi	r24, 0xAE	; 174
    1204:	9e 4f       	sbci	r25, 0xFE	; 254
    1206:	fc 01       	movw	r30, r24
    1208:	80 81       	ld	r24, Z
    120a:	91 81       	ldd	r25, Z+1	; 0x01
    120c:	fc 01       	movw	r30, r24
    120e:	23 83       	std	Z+3, r18	; 0x03
    1210:	ce 01       	movw	r24, r28
    1212:	8e 5a       	subi	r24, 0xAE	; 174
    1214:	9e 4f       	sbci	r25, 0xFE	; 254
    1216:	fc 01       	movw	r30, r24
    1218:	80 81       	ld	r24, Z
    121a:	91 81       	ldd	r25, Z+1	; 0x01
    121c:	fc 01       	movw	r30, r24
    121e:	23 81       	ldd	r18, Z+3	; 0x03
    1220:	ce 01       	movw	r24, r28
    1222:	8e 5a       	subi	r24, 0xAE	; 174
    1224:	9e 4f       	sbci	r25, 0xFE	; 254
    1226:	fc 01       	movw	r30, r24
    1228:	80 81       	ld	r24, Z
    122a:	91 81       	ldd	r25, Z+1	; 0x01
    122c:	fc 01       	movw	r30, r24
    122e:	22 83       	std	Z+2, r18	; 0x02
    1230:	ce 01       	movw	r24, r28
    1232:	8e 5a       	subi	r24, 0xAE	; 174
    1234:	9e 4f       	sbci	r25, 0xFE	; 254
    1236:	fc 01       	movw	r30, r24
    1238:	80 81       	ld	r24, Z
    123a:	91 81       	ldd	r25, Z+1	; 0x01
    123c:	fc 01       	movw	r30, r24
    123e:	22 81       	ldd	r18, Z+2	; 0x02
    1240:	ce 01       	movw	r24, r28
    1242:	8e 5a       	subi	r24, 0xAE	; 174
    1244:	9e 4f       	sbci	r25, 0xFE	; 254
    1246:	fc 01       	movw	r30, r24
    1248:	80 81       	ld	r24, Z
    124a:	91 81       	ldd	r25, Z+1	; 0x01
    124c:	fc 01       	movw	r30, r24
    124e:	21 83       	std	Z+1, r18	; 0x01
    1250:	ce 01       	movw	r24, r28
    1252:	8e 5a       	subi	r24, 0xAE	; 174
    1254:	9e 4f       	sbci	r25, 0xFE	; 254
    1256:	fc 01       	movw	r30, r24
    1258:	80 81       	ld	r24, Z
    125a:	91 81       	ldd	r25, Z+1	; 0x01
    125c:	fc 01       	movw	r30, r24
    125e:	21 81       	ldd	r18, Z+1	; 0x01
    1260:	ce 01       	movw	r24, r28
    1262:	8e 5a       	subi	r24, 0xAE	; 174
    1264:	9e 4f       	sbci	r25, 0xFE	; 254
    1266:	fc 01       	movw	r30, r24
    1268:	80 81       	ld	r24, Z
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	fc 01       	movw	r30, r24
    126e:	20 83       	st	Z, r18
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    1270:	ce 01       	movw	r24, r28
    1272:	8e 5a       	subi	r24, 0xAE	; 174
    1274:	9e 4f       	sbci	r25, 0xFE	; 254
    1276:	fc 01       	movw	r30, r24
    1278:	80 81       	ld	r24, Z
    127a:	91 81       	ldd	r25, Z+1	; 0x01
    127c:	fc 01       	movw	r30, r24
    127e:	85 81       	ldd	r24, Z+5	; 0x05
    1280:	62 e0       	ldi	r22, 0x02	; 2
    1282:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <pinMode>
  delay(1);
    1286:	61 e0       	ldi	r22, 0x01	; 1
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 c6 1c 	call	0x398c	; 0x398c <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    1292:	ce 01       	movw	r24, r28
    1294:	8e 5a       	subi	r24, 0xAE	; 174
    1296:	9e 4f       	sbci	r25, 0xFE	; 254
    1298:	fc 01       	movw	r30, r24
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	fc 01       	movw	r30, r24
    12a0:	85 81       	ldd	r24, Z+5	; 0x05
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <pinMode>
  digitalWrite(_pin, LOW);
    12a8:	ce 01       	movw	r24, r28
    12aa:	8e 5a       	subi	r24, 0xAE	; 174
    12ac:	9e 4f       	sbci	r25, 0xFE	; 254
    12ae:	fc 01       	movw	r30, r24
    12b0:	80 81       	ld	r24, Z
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	fc 01       	movw	r30, r24
    12b6:	85 81       	ldd	r24, Z+5	; 0x05
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <digitalWrite>
  switch (_type) {
    12be:	ce 01       	movw	r24, r28
    12c0:	8e 5a       	subi	r24, 0xAE	; 174
    12c2:	9e 4f       	sbci	r25, 0xFE	; 254
    12c4:	fc 01       	movw	r30, r24
    12c6:	80 81       	ld	r24, Z
    12c8:	91 81       	ldd	r25, Z+1	; 0x01
    12ca:	fc 01       	movw	r30, r24
    12cc:	86 81       	ldd	r24, Z+6	; 0x06
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	45 97       	sbiw	r24, 0x15	; 21
    12d4:	02 97       	sbiw	r24, 0x02	; 2
    12d6:	28 f4       	brcc	.+10     	; 0x12e2 <_ZN3DHT4readEb+0x1c6>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    12d8:	8c e4       	ldi	r24, 0x4C	; 76
    12da:	94 e0       	ldi	r25, 0x04	; 4
    12dc:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delayMicroseconds>
    break;
    12e0:	07 c0       	rjmp	.+14     	; 0x12f0 <_ZN3DHT4readEb+0x1d4>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    12e2:	64 e1       	ldi	r22, 0x14	; 20
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 c6 1c 	call	0x398c	; 0x398c <delay>
    break;
    12ee:	00 00       	nop
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    12f0:	ce 01       	movw	r24, r28
    12f2:	8e 5a       	subi	r24, 0xAE	; 174
    12f4:	9e 4f       	sbci	r25, 0xFE	; 254
    12f6:	fc 01       	movw	r30, r24
    12f8:	80 81       	ld	r24, Z
    12fa:	91 81       	ldd	r25, Z+1	; 0x01
    12fc:	fc 01       	movw	r30, r24
    12fe:	85 81       	ldd	r24, Z+5	; 0x05
    1300:	62 e0       	ldi	r22, 0x02	; 2
    1302:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    1306:	ce 01       	movw	r24, r28
    1308:	8e 5a       	subi	r24, 0xAE	; 174
    130a:	9e 4f       	sbci	r25, 0xFE	; 254
    130c:	fc 01       	movw	r30, r24
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	fc 01       	movw	r30, r24
    1314:	82 89       	ldd	r24, Z+18	; 0x12
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delayMicroseconds>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    131e:	ce 01       	movw	r24, r28
    1320:	8f 5a       	subi	r24, 0xAF	; 175
    1322:	9e 4f       	sbci	r25, 0xFE	; 254
    1324:	2c dc       	rcall	.-1960   	; 0xb7e <_ZN13InterruptLockC1Ev>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    1326:	ce 01       	movw	r24, r28
    1328:	8e 5a       	subi	r24, 0xAE	; 174
    132a:	9e 4f       	sbci	r25, 0xFE	; 254
    132c:	fc 01       	movw	r30, r24
    132e:	80 81       	ld	r24, Z
    1330:	91 81       	ldd	r25, Z+1	; 0x01
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	b7 d1       	rcall	.+878    	; 0x16a4 <_ZN3DHT11expectPulseEb>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	21 e0       	ldi	r18, 0x01	; 1
    133c:	8f 3f       	cpi	r24, 0xFF	; 255
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	af 4f       	sbci	r26, 0xFF	; 255
    1342:	bf 4f       	sbci	r27, 0xFF	; 255
    1344:	09 f0       	breq	.+2      	; 0x1348 <_ZN3DHT4readEb+0x22c>
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	22 23       	and	r18, r18
    134a:	99 f0       	breq	.+38     	; 0x1372 <_ZN3DHT4readEb+0x256>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    134c:	ce 01       	movw	r24, r28
    134e:	8e 5a       	subi	r24, 0xAE	; 174
    1350:	9e 4f       	sbci	r25, 0xFE	; 254
    1352:	fc 01       	movw	r30, r24
    1354:	80 81       	ld	r24, Z
    1356:	91 81       	ldd	r25, Z+1	; 0x01
    1358:	fc 01       	movw	r30, r24
    135a:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    135c:	ce 01       	movw	r24, r28
    135e:	8e 5a       	subi	r24, 0xAE	; 174
    1360:	9e 4f       	sbci	r25, 0xFE	; 254
    1362:	fc 01       	movw	r30, r24
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	fc 01       	movw	r30, r24
    136a:	f1 88       	ldd	r15, Z+17	; 0x11
    136c:	00 e0       	ldi	r16, 0x00	; 0
    136e:	10 e0       	ldi	r17, 0x00	; 0
    1370:	72 c0       	rjmp	.+228    	; 0x1456 <_ZN3DHT4readEb+0x33a>
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    1372:	ce 01       	movw	r24, r28
    1374:	8e 5a       	subi	r24, 0xAE	; 174
    1376:	9e 4f       	sbci	r25, 0xFE	; 254
    1378:	fc 01       	movw	r30, r24
    137a:	80 81       	ld	r24, Z
    137c:	91 81       	ldd	r25, Z+1	; 0x01
    137e:	61 e0       	ldi	r22, 0x01	; 1
    1380:	91 d1       	rcall	.+802    	; 0x16a4 <_ZN3DHT11expectPulseEb>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	21 e0       	ldi	r18, 0x01	; 1
    1388:	8f 3f       	cpi	r24, 0xFF	; 255
    138a:	9f 4f       	sbci	r25, 0xFF	; 255
    138c:	af 4f       	sbci	r26, 0xFF	; 255
    138e:	bf 4f       	sbci	r27, 0xFF	; 255
    1390:	09 f0       	breq	.+2      	; 0x1394 <_ZN3DHT4readEb+0x278>
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	22 23       	and	r18, r18
    1396:	99 f0       	breq	.+38     	; 0x13be <_ZN3DHT4readEb+0x2a2>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal high pulse."));
      _lastresult = false;
    1398:	ce 01       	movw	r24, r28
    139a:	8e 5a       	subi	r24, 0xAE	; 174
    139c:	9e 4f       	sbci	r25, 0xFE	; 254
    139e:	fc 01       	movw	r30, r24
    13a0:	80 81       	ld	r24, Z
    13a2:	91 81       	ldd	r25, Z+1	; 0x01
    13a4:	fc 01       	movw	r30, r24
    13a6:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    13a8:	ce 01       	movw	r24, r28
    13aa:	8e 5a       	subi	r24, 0xAE	; 174
    13ac:	9e 4f       	sbci	r25, 0xFE	; 254
    13ae:	fc 01       	movw	r30, r24
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	fc 01       	movw	r30, r24
    13b6:	f1 88       	ldd	r15, Z+17	; 0x11
    13b8:	00 e0       	ldi	r16, 0x00	; 0
    13ba:	10 e0       	ldi	r17, 0x00	; 0
    13bc:	4c c0       	rjmp	.+152    	; 0x1456 <_ZN3DHT4readEb+0x33a>
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    13be:	1a 82       	std	Y+2, r1	; 0x02
    13c0:	19 82       	std	Y+1, r1	; 0x01
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	80 35       	cpi	r24, 0x50	; 80
    13c8:	91 05       	cpc	r25, r1
    13ca:	0c f0       	brlt	.+2      	; 0x13ce <_ZN3DHT4readEb+0x2b2>
    13cc:	42 c0       	rjmp	.+132    	; 0x1452 <_ZN3DHT4readEb+0x336>
      cycles[i] = expectPulse(LOW);
    13ce:	ce 01       	movw	r24, r28
    13d0:	8e 5a       	subi	r24, 0xAE	; 174
    13d2:	9e 4f       	sbci	r25, 0xFE	; 254
    13d4:	fc 01       	movw	r30, r24
    13d6:	80 81       	ld	r24, Z
    13d8:	91 81       	ldd	r25, Z+1	; 0x01
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	63 d1       	rcall	.+710    	; 0x16a4 <_ZN3DHT11expectPulseEb>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	29 81       	ldd	r18, Y+1	; 0x01
    13e4:	3a 81       	ldd	r19, Y+2	; 0x02
    13e6:	22 0f       	add	r18, r18
    13e8:	33 1f       	adc	r19, r19
    13ea:	22 0f       	add	r18, r18
    13ec:	33 1f       	adc	r19, r19
    13ee:	ae 01       	movw	r20, r28
    13f0:	4f 5f       	subi	r20, 0xFF	; 255
    13f2:	5f 4f       	sbci	r21, 0xFF	; 255
    13f4:	24 0f       	add	r18, r20
    13f6:	35 1f       	adc	r19, r21
    13f8:	20 5f       	subi	r18, 0xF0	; 240
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	f9 01       	movw	r30, r18
    13fe:	80 83       	st	Z, r24
    1400:	91 83       	std	Z+1, r25	; 0x01
    1402:	a2 83       	std	Z+2, r26	; 0x02
    1404:	b3 83       	std	Z+3, r27	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	8c 01       	movw	r16, r24
    140c:	0f 5f       	subi	r16, 0xFF	; 255
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	ce 01       	movw	r24, r28
    1412:	8e 5a       	subi	r24, 0xAE	; 174
    1414:	9e 4f       	sbci	r25, 0xFE	; 254
    1416:	fc 01       	movw	r30, r24
    1418:	80 81       	ld	r24, Z
    141a:	91 81       	ldd	r25, Z+1	; 0x01
    141c:	61 e0       	ldi	r22, 0x01	; 1
    141e:	42 d1       	rcall	.+644    	; 0x16a4 <_ZN3DHT11expectPulseEb>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	98 01       	movw	r18, r16
    1426:	22 0f       	add	r18, r18
    1428:	33 1f       	adc	r19, r19
    142a:	22 0f       	add	r18, r18
    142c:	33 1f       	adc	r19, r19
    142e:	ae 01       	movw	r20, r28
    1430:	4f 5f       	subi	r20, 0xFF	; 255
    1432:	5f 4f       	sbci	r21, 0xFF	; 255
    1434:	24 0f       	add	r18, r20
    1436:	35 1f       	adc	r19, r21
    1438:	20 5f       	subi	r18, 0xF0	; 240
    143a:	3f 4f       	sbci	r19, 0xFF	; 255
    143c:	f9 01       	movw	r30, r18
    143e:	80 83       	st	Z, r24
    1440:	91 83       	std	Z+1, r25	; 0x01
    1442:	a2 83       	std	Z+2, r26	; 0x02
    1444:	b3 83       	std	Z+3, r27	; 0x03
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	02 96       	adiw	r24, 0x02	; 2
    144c:	9a 83       	std	Y+2, r25	; 0x02
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	b8 cf       	rjmp	.-144    	; 0x13c2 <_ZN3DHT4readEb+0x2a6>
    1452:	01 e0       	ldi	r16, 0x01	; 1
    1454:	10 e0       	ldi	r17, 0x00	; 0
    1456:	ce 01       	movw	r24, r28
    1458:	8f 5a       	subi	r24, 0xAF	; 175
    145a:	9e 4f       	sbci	r25, 0xFE	; 254
    145c:	9f db       	rcall	.-2242   	; 0xb9c <_ZN13InterruptLockD1Ev>
    145e:	01 30       	cpi	r16, 0x01	; 1
    1460:	11 05       	cpc	r17, r1
    1462:	09 f0       	breq	.+2      	; 0x1466 <_ZN3DHT4readEb+0x34a>
    1464:	0d c1       	rjmp	.+538    	; 0x1680 <_ZN3DHT4readEb+0x564>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    1466:	00 00       	nop
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    1468:	1c 82       	std	Y+4, r1	; 0x04
    146a:	1b 82       	std	Y+3, r1	; 0x03
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	88 97       	sbiw	r24, 0x28	; 40
    1472:	0c f0       	brlt	.+2      	; 0x1476 <_ZN3DHT4readEb+0x35a>
    1474:	a7 c0       	rjmp	.+334    	; 0x15c4 <_ZN3DHT4readEb+0x4a8>
    uint32_t lowCycles = cycles[2 * i];
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	9e 01       	movw	r18, r28
    1488:	2f 5f       	subi	r18, 0xFF	; 255
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	82 0f       	add	r24, r18
    148e:	93 1f       	adc	r25, r19
    1490:	40 96       	adiw	r24, 0x10	; 16
    1492:	fc 01       	movw	r30, r24
    1494:	80 81       	ld	r24, Z
    1496:	91 81       	ldd	r25, Z+1	; 0x01
    1498:	a2 81       	ldd	r26, Z+2	; 0x02
    149a:	b3 81       	ldd	r27, Z+3	; 0x03
    149c:	89 87       	std	Y+9, r24	; 0x09
    149e:	9a 87       	std	Y+10, r25	; 0x0a
    14a0:	ab 87       	std	Y+11, r26	; 0x0b
    14a2:	bc 87       	std	Y+12, r27	; 0x0c
    uint32_t highCycles = cycles[2 * i + 1];
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	9e 01       	movw	r18, r28
    14b8:	2f 5f       	subi	r18, 0xFF	; 255
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	82 0f       	add	r24, r18
    14be:	93 1f       	adc	r25, r19
    14c0:	40 96       	adiw	r24, 0x10	; 16
    14c2:	fc 01       	movw	r30, r24
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	a2 81       	ldd	r26, Z+2	; 0x02
    14ca:	b3 81       	ldd	r27, Z+3	; 0x03
    14cc:	8d 87       	std	Y+13, r24	; 0x0d
    14ce:	9e 87       	std	Y+14, r25	; 0x0e
    14d0:	af 87       	std	Y+15, r26	; 0x0f
    14d2:	b8 8b       	std	Y+16, r27	; 0x10
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    14d4:	89 85       	ldd	r24, Y+9	; 0x09
    14d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d8:	ab 85       	ldd	r26, Y+11	; 0x0b
    14da:	bc 85       	ldd	r27, Y+12	; 0x0c
    14dc:	8f 3f       	cpi	r24, 0xFF	; 255
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	af 4f       	sbci	r26, 0xFF	; 255
    14e2:	bf 4f       	sbci	r27, 0xFF	; 255
    14e4:	49 f0       	breq	.+18     	; 0x14f8 <_ZN3DHT4readEb+0x3dc>
    14e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ea:	af 85       	ldd	r26, Y+15	; 0x0f
    14ec:	b8 89       	ldd	r27, Y+16	; 0x10
    14ee:	8f 3f       	cpi	r24, 0xFF	; 255
    14f0:	9f 4f       	sbci	r25, 0xFF	; 255
    14f2:	af 4f       	sbci	r26, 0xFF	; 255
    14f4:	bf 4f       	sbci	r27, 0xFF	; 255
    14f6:	89 f4       	brne	.+34     	; 0x151a <_ZN3DHT4readEb+0x3fe>
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    14f8:	ce 01       	movw	r24, r28
    14fa:	8e 5a       	subi	r24, 0xAE	; 174
    14fc:	9e 4f       	sbci	r25, 0xFE	; 254
    14fe:	fc 01       	movw	r30, r24
    1500:	80 81       	ld	r24, Z
    1502:	91 81       	ldd	r25, Z+1	; 0x01
    1504:	fc 01       	movw	r30, r24
    1506:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    1508:	ce 01       	movw	r24, r28
    150a:	8e 5a       	subi	r24, 0xAE	; 174
    150c:	9e 4f       	sbci	r25, 0xFE	; 254
    150e:	fc 01       	movw	r30, r24
    1510:	80 81       	ld	r24, Z
    1512:	91 81       	ldd	r25, Z+1	; 0x01
    1514:	fc 01       	movw	r30, r24
    1516:	f1 88       	ldd	r15, Z+17	; 0x11
    1518:	b3 c0       	rjmp	.+358    	; 0x1680 <_ZN3DHT4readEb+0x564>
    }
    data[i / 8] <<= 1;
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	99 23       	and	r25, r25
    1520:	0c f4       	brge	.+2      	; 0x1524 <_ZN3DHT4readEb+0x408>
    1522:	07 96       	adiw	r24, 0x07	; 7
    1524:	95 95       	asr	r25
    1526:	87 95       	ror	r24
    1528:	95 95       	asr	r25
    152a:	87 95       	ror	r24
    152c:	95 95       	asr	r25
    152e:	87 95       	ror	r24
    1530:	9e 01       	movw	r18, r28
    1532:	2e 5a       	subi	r18, 0xAE	; 174
    1534:	3e 4f       	sbci	r19, 0xFE	; 254
    1536:	f9 01       	movw	r30, r18
    1538:	20 81       	ld	r18, Z
    153a:	31 81       	ldd	r19, Z+1	; 0x01
    153c:	28 0f       	add	r18, r24
    153e:	39 1f       	adc	r19, r25
    1540:	f9 01       	movw	r30, r18
    1542:	20 81       	ld	r18, Z
    1544:	42 2f       	mov	r20, r18
    1546:	44 0f       	add	r20, r20
    1548:	9e 01       	movw	r18, r28
    154a:	2e 5a       	subi	r18, 0xAE	; 174
    154c:	3e 4f       	sbci	r19, 0xFE	; 254
    154e:	f9 01       	movw	r30, r18
    1550:	20 81       	ld	r18, Z
    1552:	31 81       	ldd	r19, Z+1	; 0x01
    1554:	82 0f       	add	r24, r18
    1556:	93 1f       	adc	r25, r19
    1558:	fc 01       	movw	r30, r24
    155a:	40 83       	st	Z, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    155c:	2d 85       	ldd	r18, Y+13	; 0x0d
    155e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1560:	4f 85       	ldd	r20, Y+15	; 0x0f
    1562:	58 89       	ldd	r21, Y+16	; 0x10
    1564:	89 85       	ldd	r24, Y+9	; 0x09
    1566:	9a 85       	ldd	r25, Y+10	; 0x0a
    1568:	ab 85       	ldd	r26, Y+11	; 0x0b
    156a:	bc 85       	ldd	r27, Y+12	; 0x0c
    156c:	82 17       	cp	r24, r18
    156e:	93 07       	cpc	r25, r19
    1570:	a4 07       	cpc	r26, r20
    1572:	b5 07       	cpc	r27, r21
    1574:	08 f5       	brcc	.+66     	; 0x15b8 <_ZN3DHT4readEb+0x49c>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	99 23       	and	r25, r25
    157c:	0c f4       	brge	.+2      	; 0x1580 <_ZN3DHT4readEb+0x464>
    157e:	07 96       	adiw	r24, 0x07	; 7
    1580:	95 95       	asr	r25
    1582:	87 95       	ror	r24
    1584:	95 95       	asr	r25
    1586:	87 95       	ror	r24
    1588:	95 95       	asr	r25
    158a:	87 95       	ror	r24
    158c:	9e 01       	movw	r18, r28
    158e:	2e 5a       	subi	r18, 0xAE	; 174
    1590:	3e 4f       	sbci	r19, 0xFE	; 254
    1592:	f9 01       	movw	r30, r18
    1594:	20 81       	ld	r18, Z
    1596:	31 81       	ldd	r19, Z+1	; 0x01
    1598:	28 0f       	add	r18, r24
    159a:	39 1f       	adc	r19, r25
    159c:	f9 01       	movw	r30, r18
    159e:	20 81       	ld	r18, Z
    15a0:	42 2f       	mov	r20, r18
    15a2:	41 60       	ori	r20, 0x01	; 1
    15a4:	9e 01       	movw	r18, r28
    15a6:	2e 5a       	subi	r18, 0xAE	; 174
    15a8:	3e 4f       	sbci	r19, 0xFE	; 254
    15aa:	f9 01       	movw	r30, r18
    15ac:	20 81       	ld	r18, Z
    15ae:	31 81       	ldd	r19, Z+1	; 0x01
    15b0:	82 0f       	add	r24, r18
    15b2:	93 1f       	adc	r25, r19
    15b4:	fc 01       	movw	r30, r24
    15b6:	40 83       	st	Z, r20
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	9c 83       	std	Y+4, r25	; 0x04
    15c0:	8b 83       	std	Y+3, r24	; 0x03
    15c2:	54 cf       	rjmp	.-344    	; 0x146c <_ZN3DHT4readEb+0x350>
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    15c4:	ce 01       	movw	r24, r28
    15c6:	8e 5a       	subi	r24, 0xAE	; 174
    15c8:	9e 4f       	sbci	r25, 0xFE	; 254
    15ca:	fc 01       	movw	r30, r24
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	fc 01       	movw	r30, r24
    15d2:	84 81       	ldd	r24, Z+4	; 0x04
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	ce 01       	movw	r24, r28
    15da:	8e 5a       	subi	r24, 0xAE	; 174
    15dc:	9e 4f       	sbci	r25, 0xFE	; 254
    15de:	fc 01       	movw	r30, r24
    15e0:	80 81       	ld	r24, Z
    15e2:	91 81       	ldd	r25, Z+1	; 0x01
    15e4:	fc 01       	movw	r30, r24
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	ce 01       	movw	r24, r28
    15ee:	8e 5a       	subi	r24, 0xAE	; 174
    15f0:	9e 4f       	sbci	r25, 0xFE	; 254
    15f2:	fc 01       	movw	r30, r24
    15f4:	80 81       	ld	r24, Z
    15f6:	91 81       	ldd	r25, Z+1	; 0x01
    15f8:	fc 01       	movw	r30, r24
    15fa:	81 81       	ldd	r24, Z+1	; 0x01
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	48 0f       	add	r20, r24
    1602:	59 1f       	adc	r21, r25
    1604:	ce 01       	movw	r24, r28
    1606:	8e 5a       	subi	r24, 0xAE	; 174
    1608:	9e 4f       	sbci	r25, 0xFE	; 254
    160a:	fc 01       	movw	r30, r24
    160c:	80 81       	ld	r24, Z
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	fc 01       	movw	r30, r24
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	88 2f       	mov	r24, r24
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	48 0f       	add	r20, r24
    161a:	59 1f       	adc	r21, r25
    161c:	ce 01       	movw	r24, r28
    161e:	8e 5a       	subi	r24, 0xAE	; 174
    1620:	9e 4f       	sbci	r25, 0xFE	; 254
    1622:	fc 01       	movw	r30, r24
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	fc 01       	movw	r30, r24
    162a:	83 81       	ldd	r24, Z+3	; 0x03
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	84 0f       	add	r24, r20
    1632:	95 1f       	adc	r25, r21
    1634:	99 27       	eor	r25, r25
    1636:	28 17       	cp	r18, r24
    1638:	39 07       	cpc	r19, r25
    163a:	91 f4       	brne	.+36     	; 0x1660 <_ZN3DHT4readEb+0x544>
    _lastresult = true;
    163c:	ce 01       	movw	r24, r28
    163e:	8e 5a       	subi	r24, 0xAE	; 174
    1640:	9e 4f       	sbci	r25, 0xFE	; 254
    1642:	fc 01       	movw	r30, r24
    1644:	80 81       	ld	r24, Z
    1646:	91 81       	ldd	r25, Z+1	; 0x01
    1648:	21 e0       	ldi	r18, 0x01	; 1
    164a:	fc 01       	movw	r30, r24
    164c:	21 8b       	std	Z+17, r18	; 0x11
    return _lastresult;
    164e:	ce 01       	movw	r24, r28
    1650:	8e 5a       	subi	r24, 0xAE	; 174
    1652:	9e 4f       	sbci	r25, 0xFE	; 254
    1654:	fc 01       	movw	r30, r24
    1656:	80 81       	ld	r24, Z
    1658:	91 81       	ldd	r25, Z+1	; 0x01
    165a:	fc 01       	movw	r30, r24
    165c:	f1 88       	ldd	r15, Z+17	; 0x11
    165e:	10 c0       	rjmp	.+32     	; 0x1680 <_ZN3DHT4readEb+0x564>
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    1660:	ce 01       	movw	r24, r28
    1662:	8e 5a       	subi	r24, 0xAE	; 174
    1664:	9e 4f       	sbci	r25, 0xFE	; 254
    1666:	fc 01       	movw	r30, r24
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
    166c:	fc 01       	movw	r30, r24
    166e:	11 8a       	std	Z+17, r1	; 0x11
    return _lastresult;
    1670:	ce 01       	movw	r24, r28
    1672:	8e 5a       	subi	r24, 0xAE	; 174
    1674:	9e 4f       	sbci	r25, 0xFE	; 254
    1676:	fc 01       	movw	r30, r24
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	fc 01       	movw	r30, r24
    167e:	f1 88       	ldd	r15, Z+17	; 0x11
    1680:	8f 2d       	mov	r24, r15
  }
}
    1682:	cc 5a       	subi	r28, 0xAC	; 172
    1684:	de 4f       	sbci	r29, 0xFE	; 254
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	ff 90       	pop	r15
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	bf 90       	pop	r11
    16a0:	af 90       	pop	r10
    16a2:	08 95       	ret

000016a4 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	2a 97       	sbiw	r28, 0x0a	; 10
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	99 87       	std	Y+9, r25	; 0x09
    16ba:	88 87       	std	Y+8, r24	; 0x08
    16bc:	6a 87       	std	Y+10, r22	; 0x0a
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    16be:	1a 82       	std	Y+2, r1	; 0x02
    16c0:	19 82       	std	Y+1, r1	; 0x01
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    16c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c4:	88 23       	and	r24, r24
    16c6:	29 f0       	breq	.+10     	; 0x16d2 <_ZN3DHT11expectPulseEb+0x2e>
    16c8:	88 85       	ldd	r24, Y+8	; 0x08
    16ca:	99 85       	ldd	r25, Y+9	; 0x09
    16cc:	fc 01       	movw	r30, r24
    16ce:	87 81       	ldd	r24, Z+7	; 0x07
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <_ZN3DHT11expectPulseEb+0x30>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	8b 83       	std	Y+3, r24	; 0x03
  while ((*portInputRegister(_port) & _bit) == portState) {
    16d6:	88 85       	ldd	r24, Y+8	; 0x08
    16d8:	99 85       	ldd	r25, Y+9	; 0x09
    16da:	fc 01       	movw	r30, r24
    16dc:	80 85       	ldd	r24, Z+8	; 0x08
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	82 5b       	subi	r24, 0xB2	; 178
    16e8:	9d 4f       	sbci	r25, 0xFD	; 253
    16ea:	9d 83       	std	Y+5, r25	; 0x05
    16ec:	8c 83       	std	Y+4, r24	; 0x04
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	9d 81       	ldd	r25, Y+5	; 0x05
    16f2:	fc 01       	movw	r30, r24
    16f4:	25 91       	lpm	r18, Z+
    16f6:	34 91       	lpm	r19, Z
    16f8:	cf 01       	movw	r24, r30
    16fa:	3f 83       	std	Y+7, r19	; 0x07
    16fc:	2e 83       	std	Y+6, r18	; 0x06
    16fe:	9d 83       	std	Y+5, r25	; 0x05
    1700:	8c 83       	std	Y+4, r24	; 0x04
    1702:	8e 81       	ldd	r24, Y+6	; 0x06
    1704:	9f 81       	ldd	r25, Y+7	; 0x07
    1706:	fc 01       	movw	r30, r24
    1708:	20 81       	ld	r18, Z
    170a:	88 85       	ldd	r24, Y+8	; 0x08
    170c:	99 85       	ldd	r25, Y+9	; 0x09
    170e:	fc 01       	movw	r30, r24
    1710:	87 81       	ldd	r24, Z+7	; 0x07
    1712:	28 23       	and	r18, r24
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	9b 81       	ldd	r25, Y+3	; 0x03
    1718:	29 17       	cp	r18, r25
    171a:	09 f0       	breq	.+2      	; 0x171e <_ZN3DHT11expectPulseEb+0x7a>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	88 23       	and	r24, r24
    1720:	f9 f0       	breq	.+62     	; 0x1760 <_ZN3DHT11expectPulseEb+0xbc>
    if (count++ >= _maxcycles) {
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
    1726:	9c 01       	movw	r18, r24
    1728:	2f 5f       	subi	r18, 0xFF	; 255
    172a:	3f 4f       	sbci	r19, 0xFF	; 255
    172c:	3a 83       	std	Y+2, r19	; 0x02
    172e:	29 83       	std	Y+1, r18	; 0x01
    1730:	9c 01       	movw	r18, r24
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	88 85       	ldd	r24, Y+8	; 0x08
    1738:	99 85       	ldd	r25, Y+9	; 0x09
    173a:	fc 01       	movw	r30, r24
    173c:	85 85       	ldd	r24, Z+13	; 0x0d
    173e:	96 85       	ldd	r25, Z+14	; 0x0e
    1740:	a7 85       	ldd	r26, Z+15	; 0x0f
    1742:	b0 89       	ldd	r27, Z+16	; 0x10
    1744:	61 e0       	ldi	r22, 0x01	; 1
    1746:	28 17       	cp	r18, r24
    1748:	39 07       	cpc	r19, r25
    174a:	4a 07       	cpc	r20, r26
    174c:	5b 07       	cpc	r21, r27
    174e:	08 f4       	brcc	.+2      	; 0x1752 <_ZN3DHT11expectPulseEb+0xae>
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	66 23       	and	r22, r22
    1754:	09 f4       	brne	.+2      	; 0x1758 <_ZN3DHT11expectPulseEb+0xb4>
    1756:	bf cf       	rjmp	.-130    	; 0x16d6 <_ZN3DHT11expectPulseEb+0x32>
      return TIMEOUT; // Exceeded timeout, fail.
    1758:	8f ef       	ldi	r24, 0xFF	; 255
    175a:	9f ef       	ldi	r25, 0xFF	; 255
    175c:	dc 01       	movw	r26, r24
    175e:	05 c0       	rjmp	.+10     	; 0x176a <_ZN3DHT11expectPulseEb+0xc6>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	cc 01       	movw	r24, r24
    1766:	a0 e0       	ldi	r26, 0x00	; 0
    1768:	b0 e0       	ldi	r27, 0x00	; 0
}
    176a:	bc 01       	movw	r22, r24
    176c:	cd 01       	movw	r24, r26
    176e:	2a 96       	adiw	r28, 0x0a	; 10
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	08 95       	ret

00001780 <_ZN3KeyC1Ev>:
*/
#include <Key.h>


// default constructor
Key::Key() {
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	1f 92       	push	r1
    1786:	1f 92       	push	r1
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
	kchar = NO_KEY;
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	9a 81       	ldd	r25, Y+2	; 0x02
    1794:	fc 01       	movw	r30, r24
    1796:	10 82       	st	Z, r1
	kstate = IDLE;
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	fc 01       	movw	r30, r24
    179e:	13 82       	std	Z+3, r1	; 0x03
	stateChanged = false;
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	9a 81       	ldd	r25, Y+2	; 0x02
    17a4:	fc 01       	movw	r30, r24
    17a6:	14 82       	std	Z+4, r1	; 0x04
}
    17a8:	00 00       	nop
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	08 95       	ret

000017b4 <_ZN6Keypad8pin_modeEhh>:
    holdTime = hold;
}

void Keypad::addEventListener(void (*listener)(char)){
	keypadEventListener = listener;
}
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <_ZN6Keypad8pin_modeEhh+0x6>
    17ba:	1f 92       	push	r1
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	6b 83       	std	Y+3, r22	; 0x03
    17c6:	4c 83       	std	Y+4, r20	; 0x04
    17c8:	6c 81       	ldd	r22, Y+4	; 0x04
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <pinMode>
    17d0:	00 00       	nop
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	08 95       	ret

000017e0 <_ZN6Keypad9pin_writeEhb>:
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <_ZN6Keypad9pin_writeEhb+0x6>
    17e6:	1f 92       	push	r1
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	6b 83       	std	Y+3, r22	; 0x03
    17f2:	4c 83       	std	Y+4, r20	; 0x04
    17f4:	8c 81       	ldd	r24, Y+4	; 0x04
    17f6:	68 2f       	mov	r22, r24
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <digitalWrite>
    17fe:	00 00       	nop
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	08 95       	ret

0000180e <_ZN6Keypad8pin_readEh>:
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	00 d0       	rcall	.+0      	; 0x1814 <_ZN6Keypad8pin_readEh+0x6>
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	6b 83       	std	Y+3, r22	; 0x03
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <digitalRead>
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	08 95       	ret

00001830 <_ZN6KeypadC1EPcPhS1_hh>:
    1830:	ef 92       	push	r14
    1832:	ff 92       	push	r15
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	2a 97       	sbiw	r28, 0x0a	; 10
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	7c 83       	std	Y+4, r23	; 0x04
    1852:	6b 83       	std	Y+3, r22	; 0x03
    1854:	5e 83       	std	Y+6, r21	; 0x06
    1856:	4d 83       	std	Y+5, r20	; 0x05
    1858:	38 87       	std	Y+8, r19	; 0x08
    185a:	2f 83       	std	Y+7, r18	; 0x07
    185c:	09 87       	std	Y+9, r16	; 0x09
    185e:	ea 86       	std	Y+10, r14	; 0x0a
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	02 96       	adiw	r24, 0x02	; 2
    1866:	8c df       	rcall	.-232    	; 0x1780 <_ZN3KeyC1Ev>
    1868:	2f e7       	ldi	r18, 0x7F	; 127
    186a:	33 e0       	ldi	r19, 0x03	; 3
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	9a 81       	ldd	r25, Y+2	; 0x02
    1870:	fc 01       	movw	r30, r24
    1872:	31 83       	std	Z+1, r19	; 0x01
    1874:	20 83       	st	Z, r18
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	9a 81       	ldd	r25, Y+2	; 0x02
    187a:	4b 96       	adiw	r24, 0x1b	; 27
    187c:	09 e0       	ldi	r16, 0x09	; 9
    187e:	10 e0       	ldi	r17, 0x00	; 0
    1880:	7c 01       	movw	r14, r24
    1882:	0f 3f       	cpi	r16, 0xFF	; 255
    1884:	ff ef       	ldi	r31, 0xFF	; 255
    1886:	1f 07       	cpc	r17, r31
    1888:	41 f0       	breq	.+16     	; 0x189a <_ZN6KeypadC1EPcPhS1_hh+0x6a>
    188a:	c7 01       	movw	r24, r14
    188c:	79 df       	rcall	.-270    	; 0x1780 <_ZN3KeyC1Ev>
    188e:	85 e0       	ldi	r24, 0x05	; 5
    1890:	e8 0e       	add	r14, r24
    1892:	f1 1c       	adc	r15, r1
    1894:	01 50       	subi	r16, 0x01	; 1
    1896:	11 09       	sbc	r17, r1
    1898:	f4 cf       	rjmp	.-24     	; 0x1882 <_ZN6KeypadC1EPcPhS1_hh+0x52>
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	9a 81       	ldd	r25, Y+2	; 0x02
    189e:	89 5a       	subi	r24, 0xA9	; 169
    18a0:	9f 4f       	sbci	r25, 0xFF	; 255
    18a2:	2d 81       	ldd	r18, Y+5	; 0x05
    18a4:	3e 81       	ldd	r19, Y+6	; 0x06
    18a6:	fc 01       	movw	r30, r24
    18a8:	31 83       	std	Z+1, r19	; 0x01
    18aa:	20 83       	st	Z, r18
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	9a 81       	ldd	r25, Y+2	; 0x02
    18b0:	87 5a       	subi	r24, 0xA7	; 167
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	2f 81       	ldd	r18, Y+7	; 0x07
    18b6:	38 85       	ldd	r19, Y+8	; 0x08
    18b8:	fc 01       	movw	r30, r24
    18ba:	31 83       	std	Z+1, r19	; 0x01
    18bc:	20 83       	st	Z, r18
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	9a 81       	ldd	r25, Y+2	; 0x02
    18c2:	85 5a       	subi	r24, 0xA5	; 165
    18c4:	9f 4f       	sbci	r25, 0xFF	; 255
    18c6:	29 85       	ldd	r18, Y+9	; 0x09
    18c8:	fc 01       	movw	r30, r24
    18ca:	20 83       	st	Z, r18
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	9a 81       	ldd	r25, Y+2	; 0x02
    18d0:	84 5a       	subi	r24, 0xA4	; 164
    18d2:	9f 4f       	sbci	r25, 0xFF	; 255
    18d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    18d6:	fc 01       	movw	r30, r24
    18d8:	20 83       	st	Z, r18
    18da:	2b 81       	ldd	r18, Y+3	; 0x03
    18dc:	3c 81       	ldd	r19, Y+4	; 0x04
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	9a 81       	ldd	r25, Y+2	; 0x02
    18e2:	b9 01       	movw	r22, r18
    18e4:	2e d0       	rcall	.+92     	; 0x1942 <_ZN6Keypad5beginEPc>
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ea:	6a e0       	ldi	r22, 0x0A	; 10
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	55 d4       	rcall	.+2218   	; 0x219a <_ZN6Keypad15setDebounceTimeEj>
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	64 ef       	ldi	r22, 0xF4	; 244
    18f6:	71 e0       	ldi	r23, 0x01	; 1
    18f8:	79 d4       	rcall	.+2290   	; 0x21ec <_ZN6Keypad11setHoldTimeEj>
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	8e 59       	subi	r24, 0x9E	; 158
    1900:	9f 4f       	sbci	r25, 0xFF	; 255
    1902:	fc 01       	movw	r30, r24
    1904:	11 82       	std	Z+1, r1	; 0x01
    1906:	10 82       	st	Z, r1
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	8f 5a       	subi	r24, 0xAF	; 175
    190e:	9f 4f       	sbci	r25, 0xFF	; 255
    1910:	fc 01       	movw	r30, r24
    1912:	10 82       	st	Z, r1
    1914:	11 82       	std	Z+1, r1	; 0x01
    1916:	12 82       	std	Z+2, r1	; 0x02
    1918:	13 82       	std	Z+3, r1	; 0x03
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	9a 81       	ldd	r25, Y+2	; 0x02
    191e:	8f 59       	subi	r24, 0x9F	; 159
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	fc 01       	movw	r30, r24
    1924:	10 82       	st	Z, r1
    1926:	00 00       	nop
    1928:	2a 96       	adiw	r28, 0x0a	; 10
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	08 95       	ret

00001942 <_ZN6Keypad5beginEPc>:
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	00 d0       	rcall	.+0      	; 0x1948 <_ZN6Keypad5beginEPc+0x6>
    1948:	1f 92       	push	r1
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	9a 83       	std	Y+2, r25	; 0x02
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	7c 83       	std	Y+4, r23	; 0x04
    1954:	6b 83       	std	Y+3, r22	; 0x03
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	9a 81       	ldd	r25, Y+2	; 0x02
    195a:	8b 5a       	subi	r24, 0xAB	; 171
    195c:	9f 4f       	sbci	r25, 0xFF	; 255
    195e:	2b 81       	ldd	r18, Y+3	; 0x03
    1960:	3c 81       	ldd	r19, Y+4	; 0x04
    1962:	fc 01       	movw	r30, r24
    1964:	31 83       	std	Z+1, r19	; 0x01
    1966:	20 83       	st	Z, r18
    1968:	00 00       	nop
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	08 95       	ret

00001978 <_ZN6Keypad6getKeyEv>:
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	1f 92       	push	r1
    197e:	1f 92       	push	r1
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	9a 83       	std	Y+2, r25	; 0x02
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	9a 81       	ldd	r25, Y+2	; 0x02
    198c:	8f 59       	subi	r24, 0x9F	; 159
    198e:	9f 4f       	sbci	r25, 0xFF	; 255
    1990:	21 e0       	ldi	r18, 0x01	; 1
    1992:	fc 01       	movw	r30, r24
    1994:	20 83       	st	Z, r18
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	24 d0       	rcall	.+72     	; 0x19e4 <_ZN6Keypad7getKeysEv>
    199c:	88 23       	and	r24, r24
    199e:	71 f0       	breq	.+28     	; 0x19bc <_ZN6Keypad6getKeyEv+0x44>
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	9a 81       	ldd	r25, Y+2	; 0x02
    19a4:	fc 01       	movw	r30, r24
    19a6:	87 8d       	ldd	r24, Z+31	; 0x1f
    19a8:	88 23       	and	r24, r24
    19aa:	41 f0       	breq	.+16     	; 0x19bc <_ZN6Keypad6getKeyEv+0x44>
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	9a 81       	ldd	r25, Y+2	; 0x02
    19b0:	fc 01       	movw	r30, r24
    19b2:	86 8d       	ldd	r24, Z+30	; 0x1e
    19b4:	81 30       	cpi	r24, 0x01	; 1
    19b6:	11 f4       	brne	.+4      	; 0x19bc <_ZN6Keypad6getKeyEv+0x44>
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	01 c0       	rjmp	.+2      	; 0x19be <_ZN6Keypad6getKeyEv+0x46>
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	88 23       	and	r24, r24
    19c0:	29 f0       	breq	.+10     	; 0x19cc <_ZN6Keypad6getKeyEv+0x54>
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	fc 01       	movw	r30, r24
    19c8:	83 8d       	ldd	r24, Z+27	; 0x1b
    19ca:	07 c0       	rjmp	.+14     	; 0x19da <_ZN6Keypad6getKeyEv+0x62>
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	8f 59       	subi	r24, 0x9F	; 159
    19d2:	9f 4f       	sbci	r25, 0xFF	; 255
    19d4:	fc 01       	movw	r30, r24
    19d6:	10 82       	st	Z, r1
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	08 95       	ret

000019e4 <_ZN6Keypad7getKeysEv>:
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <_ZN6Keypad7getKeysEv+0x6>
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	9b 83       	std	Y+3, r25	; 0x03
    19f0:	8a 83       	std	Y+2, r24	; 0x02
    19f2:	19 82       	std	Y+1, r1	; 0x01
    19f4:	0e 94 95 1c 	call	0x392a	; 0x392a <millis>
    19f8:	9b 01       	movw	r18, r22
    19fa:	ac 01       	movw	r20, r24
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	8f 5a       	subi	r24, 0xAF	; 175
    1a02:	9f 4f       	sbci	r25, 0xFF	; 255
    1a04:	fc 01       	movw	r30, r24
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	a2 81       	ldd	r26, Z+2	; 0x02
    1a0c:	b3 81       	ldd	r27, Z+3	; 0x03
    1a0e:	28 1b       	sub	r18, r24
    1a10:	39 0b       	sbc	r19, r25
    1a12:	4a 0b       	sbc	r20, r26
    1a14:	5b 0b       	sbc	r21, r27
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1a:	83 5a       	subi	r24, 0xA3	; 163
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	fc 01       	movw	r30, r24
    1a20:	80 81       	ld	r24, Z
    1a22:	91 81       	ldd	r25, Z+1	; 0x01
    1a24:	cc 01       	movw	r24, r24
    1a26:	a0 e0       	ldi	r26, 0x00	; 0
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	61 e0       	ldi	r22, 0x01	; 1
    1a2c:	82 17       	cp	r24, r18
    1a2e:	93 07       	cpc	r25, r19
    1a30:	a4 07       	cpc	r26, r20
    1a32:	b5 07       	cpc	r27, r21
    1a34:	08 f0       	brcs	.+2      	; 0x1a38 <_ZN6Keypad7getKeysEv+0x54>
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	66 23       	and	r22, r22
    1a3a:	a1 f0       	breq	.+40     	; 0x1a64 <_ZN6Keypad7getKeysEv+0x80>
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a40:	18 d0       	rcall	.+48     	; 0x1a72 <_ZN6Keypad8scanKeysEv>
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	9b 81       	ldd	r25, Y+3	; 0x03
    1a46:	58 d1       	rcall	.+688    	; 0x1cf8 <_ZN6Keypad10updateListEv>
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	0e 94 95 1c 	call	0x392a	; 0x392a <millis>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	2a 81       	ldd	r18, Y+2	; 0x02
    1a54:	3b 81       	ldd	r19, Y+3	; 0x03
    1a56:	2f 5a       	subi	r18, 0xAF	; 175
    1a58:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5a:	f9 01       	movw	r30, r18
    1a5c:	80 83       	st	Z, r24
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	a2 83       	std	Z+2, r26	; 0x02
    1a62:	b3 83       	std	Z+3, r27	; 0x03
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	08 95       	ret

00001a72 <_ZN6Keypad8scanKeysEv>:
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <_ZN6Keypad8scanKeysEv+0x6>
    1a78:	1f 92       	push	r1
    1a7a:	1f 92       	push	r1
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	9d 83       	std	Y+5, r25	; 0x05
    1a82:	8c 83       	std	Y+4, r24	; 0x04
    1a84:	19 82       	std	Y+1, r1	; 0x01
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
    1a88:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8a:	85 5a       	subi	r24, 0xA5	; 165
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	fc 01       	movw	r30, r24
    1a90:	90 81       	ld	r25, Z
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	89 17       	cp	r24, r25
    1a96:	00 f5       	brcc	.+64     	; 0x1ad8 <_ZN6Keypad8scanKeysEv+0x66>
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	20 81       	ld	r18, Z
    1aa6:	31 81       	ldd	r19, Z+1	; 0x01
    1aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    1aac:	89 5a       	subi	r24, 0xA9	; 169
    1aae:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	40 81       	ld	r20, Z
    1ab4:	51 81       	ldd	r21, Z+1	; 0x01
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	84 0f       	add	r24, r20
    1abe:	95 1f       	adc	r25, r21
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	50 81       	ld	r21, Z
    1ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac8:	42 e0       	ldi	r20, 0x02	; 2
    1aca:	65 2f       	mov	r22, r21
    1acc:	f9 01       	movw	r30, r18
    1ace:	19 95       	eicall
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	8f 5f       	subi	r24, 0xFF	; 255
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	d7 cf       	rjmp	.-82     	; 0x1a86 <_ZN6Keypad8scanKeysEv+0x14>
    1ad8:	1a 82       	std	Y+2, r1	; 0x02
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ade:	84 5a       	subi	r24, 0xA4	; 164
    1ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	90 81       	ld	r25, Z
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	89 17       	cp	r24, r25
    1aea:	08 f0       	brcs	.+2      	; 0x1aee <_ZN6Keypad8scanKeysEv+0x7c>
    1aec:	fc c0       	rjmp	.+504    	; 0x1ce6 <_ZN6Keypad8scanKeysEv+0x274>
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	9d 81       	ldd	r25, Y+5	; 0x05
    1af2:	fc 01       	movw	r30, r24
    1af4:	80 81       	ld	r24, Z
    1af6:	91 81       	ldd	r25, Z+1	; 0x01
    1af8:	fc 01       	movw	r30, r24
    1afa:	20 81       	ld	r18, Z
    1afc:	31 81       	ldd	r19, Z+1	; 0x01
    1afe:	8c 81       	ldd	r24, Y+4	; 0x04
    1b00:	9d 81       	ldd	r25, Y+5	; 0x05
    1b02:	87 5a       	subi	r24, 0xA7	; 167
    1b04:	9f 4f       	sbci	r25, 0xFF	; 255
    1b06:	fc 01       	movw	r30, r24
    1b08:	40 81       	ld	r20, Z
    1b0a:	51 81       	ldd	r21, Z+1	; 0x01
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	88 2f       	mov	r24, r24
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	84 0f       	add	r24, r20
    1b14:	95 1f       	adc	r25, r21
    1b16:	fc 01       	movw	r30, r24
    1b18:	50 81       	ld	r21, Z
    1b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	65 2f       	mov	r22, r21
    1b22:	f9 01       	movw	r30, r18
    1b24:	19 95       	eicall
    1b26:	8c 81       	ldd	r24, Y+4	; 0x04
    1b28:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	80 81       	ld	r24, Z
    1b2e:	91 81       	ldd	r25, Z+1	; 0x01
    1b30:	02 96       	adiw	r24, 0x02	; 2
    1b32:	fc 01       	movw	r30, r24
    1b34:	20 81       	ld	r18, Z
    1b36:	31 81       	ldd	r19, Z+1	; 0x01
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	87 5a       	subi	r24, 0xA7	; 167
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	fc 01       	movw	r30, r24
    1b42:	40 81       	ld	r20, Z
    1b44:	51 81       	ldd	r21, Z+1	; 0x01
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	88 2f       	mov	r24, r24
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	84 0f       	add	r24, r20
    1b4e:	95 1f       	adc	r25, r21
    1b50:	fc 01       	movw	r30, r24
    1b52:	50 81       	ld	r21, Z
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	9d 81       	ldd	r25, Y+5	; 0x05
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	65 2f       	mov	r22, r21
    1b5c:	f9 01       	movw	r30, r18
    1b5e:	19 95       	eicall
    1b60:	1b 82       	std	Y+3, r1	; 0x03
    1b62:	8c 81       	ldd	r24, Y+4	; 0x04
    1b64:	9d 81       	ldd	r25, Y+5	; 0x05
    1b66:	85 5a       	subi	r24, 0xA5	; 165
    1b68:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	90 81       	ld	r25, Z
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	89 17       	cp	r24, r25
    1b72:	08 f0       	brcs	.+2      	; 0x1b76 <_ZN6Keypad8scanKeysEv+0x104>
    1b74:	7b c0       	rjmp	.+246    	; 0x1c6c <_ZN6Keypad8scanKeysEv+0x1fa>
    1b76:	8c 81       	ldd	r24, Y+4	; 0x04
    1b78:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	80 81       	ld	r24, Z
    1b7e:	91 81       	ldd	r25, Z+1	; 0x01
    1b80:	04 96       	adiw	r24, 0x04	; 4
    1b82:	fc 01       	movw	r30, r24
    1b84:	20 81       	ld	r18, Z
    1b86:	31 81       	ldd	r19, Z+1	; 0x01
    1b88:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8c:	89 5a       	subi	r24, 0xA9	; 169
    1b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b90:	fc 01       	movw	r30, r24
    1b92:	40 81       	ld	r20, Z
    1b94:	51 81       	ldd	r21, Z+1	; 0x01
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	88 2f       	mov	r24, r24
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	84 0f       	add	r24, r20
    1b9e:	95 1f       	adc	r25, r21
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	40 81       	ld	r20, Z
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba8:	64 2f       	mov	r22, r20
    1baa:	f9 01       	movw	r30, r18
    1bac:	19 95       	eicall
    1bae:	89 2b       	or	r24, r25
    1bb0:	61 f5       	brne	.+88     	; 0x1c0a <_ZN6Keypad8scanKeysEv+0x198>
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	68 2f       	mov	r22, r24
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	88 2f       	mov	r24, r24
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	82 0f       	add	r24, r18
    1bc8:	93 1f       	adc	r25, r19
    1bca:	07 96       	adiw	r24, 0x07	; 7
    1bcc:	fc 01       	movw	r30, r24
    1bce:	20 81       	ld	r18, Z
    1bd0:	31 81       	ldd	r19, Z+1	; 0x01
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a0 e0       	ldi	r26, 0x00	; 0
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	04 c0       	rjmp	.+8      	; 0x1bea <_ZN6Keypad8scanKeysEv+0x178>
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	aa 1f       	adc	r26, r26
    1be8:	bb 1f       	adc	r27, r27
    1bea:	4a 95       	dec	r20
    1bec:	d2 f7       	brpl	.-12     	; 0x1be2 <_ZN6Keypad8scanKeysEv+0x170>
    1bee:	28 2b       	or	r18, r24
    1bf0:	39 2b       	or	r19, r25
    1bf2:	4c 81       	ldd	r20, Y+4	; 0x04
    1bf4:	5d 81       	ldd	r21, Y+5	; 0x05
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	84 0f       	add	r24, r20
    1bfe:	95 1f       	adc	r25, r21
    1c00:	07 96       	adiw	r24, 0x07	; 7
    1c02:	fc 01       	movw	r30, r24
    1c04:	31 83       	std	Z+1, r19	; 0x01
    1c06:	20 83       	st	Z, r18
    1c08:	2d c0       	rjmp	.+90     	; 0x1c64 <_ZN6Keypad8scanKeysEv+0x1f2>
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	68 2f       	mov	r22, r24
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	2c 81       	ldd	r18, Y+4	; 0x04
    1c18:	3d 81       	ldd	r19, Y+5	; 0x05
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	82 0f       	add	r24, r18
    1c20:	93 1f       	adc	r25, r19
    1c22:	07 96       	adiw	r24, 0x07	; 7
    1c24:	fc 01       	movw	r30, r24
    1c26:	20 81       	ld	r18, Z
    1c28:	31 81       	ldd	r19, Z+1	; 0x01
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	48 2f       	mov	r20, r24
    1c2e:	50 e0       	ldi	r21, 0x00	; 0
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a0 e0       	ldi	r26, 0x00	; 0
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	04 c0       	rjmp	.+8      	; 0x1c42 <_ZN6Keypad8scanKeysEv+0x1d0>
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	aa 1f       	adc	r26, r26
    1c40:	bb 1f       	adc	r27, r27
    1c42:	4a 95       	dec	r20
    1c44:	d2 f7       	brpl	.-12     	; 0x1c3a <_ZN6Keypad8scanKeysEv+0x1c8>
    1c46:	80 95       	com	r24
    1c48:	90 95       	com	r25
    1c4a:	28 23       	and	r18, r24
    1c4c:	39 23       	and	r19, r25
    1c4e:	4c 81       	ldd	r20, Y+4	; 0x04
    1c50:	5d 81       	ldd	r21, Y+5	; 0x05
    1c52:	cb 01       	movw	r24, r22
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	84 0f       	add	r24, r20
    1c5a:	95 1f       	adc	r25, r21
    1c5c:	07 96       	adiw	r24, 0x07	; 7
    1c5e:	fc 01       	movw	r30, r24
    1c60:	31 83       	std	Z+1, r19	; 0x01
    1c62:	20 83       	st	Z, r18
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	8f 5f       	subi	r24, 0xFF	; 255
    1c68:	8b 83       	std	Y+3, r24	; 0x03
    1c6a:	7b cf       	rjmp	.-266    	; 0x1b62 <_ZN6Keypad8scanKeysEv+0xf0>
    1c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c70:	fc 01       	movw	r30, r24
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	02 96       	adiw	r24, 0x02	; 2
    1c78:	fc 01       	movw	r30, r24
    1c7a:	20 81       	ld	r18, Z
    1c7c:	31 81       	ldd	r19, Z+1	; 0x01
    1c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c80:	9d 81       	ldd	r25, Y+5	; 0x05
    1c82:	87 5a       	subi	r24, 0xA7	; 167
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	fc 01       	movw	r30, r24
    1c88:	40 81       	ld	r20, Z
    1c8a:	51 81       	ldd	r21, Z+1	; 0x01
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	88 2f       	mov	r24, r24
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	84 0f       	add	r24, r20
    1c94:	95 1f       	adc	r25, r21
    1c96:	fc 01       	movw	r30, r24
    1c98:	50 81       	ld	r21, Z
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9e:	41 e0       	ldi	r20, 0x01	; 1
    1ca0:	65 2f       	mov	r22, r21
    1ca2:	f9 01       	movw	r30, r18
    1ca4:	19 95       	eicall
    1ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    1caa:	fc 01       	movw	r30, r24
    1cac:	80 81       	ld	r24, Z
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	20 81       	ld	r18, Z
    1cb4:	31 81       	ldd	r19, Z+1	; 0x01
    1cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cba:	87 5a       	subi	r24, 0xA7	; 167
    1cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	40 81       	ld	r20, Z
    1cc2:	51 81       	ldd	r21, Z+1	; 0x01
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	84 0f       	add	r24, r20
    1ccc:	95 1f       	adc	r25, r21
    1cce:	fc 01       	movw	r30, r24
    1cd0:	50 81       	ld	r21, Z
    1cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd6:	40 e0       	ldi	r20, 0x00	; 0
    1cd8:	65 2f       	mov	r22, r21
    1cda:	f9 01       	movw	r30, r18
    1cdc:	19 95       	eicall
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	8f 5f       	subi	r24, 0xFF	; 255
    1ce2:	8a 83       	std	Y+2, r24	; 0x02
    1ce4:	fa ce       	rjmp	.-524    	; 0x1ada <_ZN6Keypad8scanKeysEv+0x68>
    1ce6:	00 00       	nop
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	08 95       	ret

00001cf8 <_ZN6Keypad10updateListEv>:
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	2e 97       	sbiw	r28, 0x0e	; 14
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	9e 87       	std	Y+14, r25	; 0x0e
    1d0e:	8d 87       	std	Y+13, r24	; 0x0d
    1d10:	19 82       	std	Y+1, r1	; 0x01
    1d12:	1a 82       	std	Y+2, r1	; 0x02
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	8a 30       	cpi	r24, 0x0A	; 10
    1d18:	08 f0       	brcs	.+2      	; 0x1d1c <_ZN6Keypad10updateListEv+0x24>
    1d1a:	4d c0       	rjmp	.+154    	; 0x1db6 <_ZN6Keypad10updateListEv+0xbe>
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	4d 85       	ldd	r20, Y+13	; 0x0d
    1d24:	5e 85       	ldd	r21, Y+14	; 0x0e
    1d26:	c9 01       	movw	r24, r18
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	82 0f       	add	r24, r18
    1d32:	93 1f       	adc	r25, r19
    1d34:	84 0f       	add	r24, r20
    1d36:	95 1f       	adc	r25, r21
    1d38:	4e 96       	adiw	r24, 0x1e	; 30
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	80 81       	ld	r24, Z
    1d3e:	88 23       	and	r24, r24
    1d40:	b1 f5       	brne	.+108    	; 0x1dae <_ZN6Keypad10updateListEv+0xb6>
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4d 85       	ldd	r20, Y+13	; 0x0d
    1d4a:	5e 85       	ldd	r21, Y+14	; 0x0e
    1d4c:	c9 01       	movw	r24, r18
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	82 0f       	add	r24, r18
    1d58:	93 1f       	adc	r25, r19
    1d5a:	84 0f       	add	r24, r20
    1d5c:	95 1f       	adc	r25, r21
    1d5e:	4b 96       	adiw	r24, 0x1b	; 27
    1d60:	fc 01       	movw	r30, r24
    1d62:	10 82       	st	Z, r1
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	4d 85       	ldd	r20, Y+13	; 0x0d
    1d6c:	5e 85       	ldd	r21, Y+14	; 0x0e
    1d6e:	c9 01       	movw	r24, r18
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	82 0f       	add	r24, r18
    1d7a:	93 1f       	adc	r25, r19
    1d7c:	84 0f       	add	r24, r20
    1d7e:	95 1f       	adc	r25, r21
    1d80:	4c 96       	adiw	r24, 0x1c	; 28
    1d82:	2f ef       	ldi	r18, 0xFF	; 255
    1d84:	3f ef       	ldi	r19, 0xFF	; 255
    1d86:	fc 01       	movw	r30, r24
    1d88:	31 83       	std	Z+1, r19	; 0x01
    1d8a:	20 83       	st	Z, r18
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	4d 85       	ldd	r20, Y+13	; 0x0d
    1d94:	5e 85       	ldd	r21, Y+14	; 0x0e
    1d96:	c9 01       	movw	r24, r18
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	82 0f       	add	r24, r18
    1da2:	93 1f       	adc	r25, r19
    1da4:	84 0f       	add	r24, r20
    1da6:	95 1f       	adc	r25, r21
    1da8:	4f 96       	adiw	r24, 0x1f	; 31
    1daa:	fc 01       	movw	r30, r24
    1dac:	10 82       	st	Z, r1
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	8f 5f       	subi	r24, 0xFF	; 255
    1db2:	8a 83       	std	Y+2, r24	; 0x02
    1db4:	af cf       	rjmp	.-162    	; 0x1d14 <_ZN6Keypad10updateListEv+0x1c>
    1db6:	1b 82       	std	Y+3, r1	; 0x03
    1db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dbc:	85 5a       	subi	r24, 0xA5	; 165
    1dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	90 81       	ld	r25, Z
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	89 17       	cp	r24, r25
    1dc8:	08 f0       	brcs	.+2      	; 0x1dcc <_ZN6Keypad10updateListEv+0xd4>
    1dca:	df c0       	rjmp	.+446    	; 0x1f8a <_ZN6Keypad10updateListEv+0x292>
    1dcc:	1c 82       	std	Y+4, r1	; 0x04
    1dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd2:	84 5a       	subi	r24, 0xA4	; 164
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	90 81       	ld	r25, Z
    1dda:	8c 81       	ldd	r24, Y+4	; 0x04
    1ddc:	89 17       	cp	r24, r25
    1dde:	08 f0       	brcs	.+2      	; 0x1de2 <_ZN6Keypad10updateListEv+0xea>
    1de0:	d0 c0       	rjmp	.+416    	; 0x1f82 <_ZN6Keypad10updateListEv+0x28a>
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	88 2f       	mov	r24, r24
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	2d 85       	ldd	r18, Y+13	; 0x0d
    1dea:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	82 0f       	add	r24, r18
    1df2:	93 1f       	adc	r25, r19
    1df4:	07 96       	adiw	r24, 0x07	; 7
    1df6:	fc 01       	movw	r30, r24
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfe:	22 2f       	mov	r18, r18
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <_ZN6Keypad10updateListEv+0x110>
    1e04:	96 95       	lsr	r25
    1e06:	87 95       	ror	r24
    1e08:	2a 95       	dec	r18
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <_ZN6Keypad10updateListEv+0x10c>
    1e0c:	81 70       	andi	r24, 0x01	; 1
    1e0e:	99 27       	eor	r25, r25
    1e10:	21 e0       	ldi	r18, 0x01	; 1
    1e12:	89 2b       	or	r24, r25
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <_ZN6Keypad10updateListEv+0x120>
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	2f 83       	std	Y+7, r18	; 0x07
    1e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1e:	8b 5a       	subi	r24, 0xAB	; 171
    1e20:	9f 4f       	sbci	r25, 0xFF	; 255
    1e22:	fc 01       	movw	r30, r24
    1e24:	80 81       	ld	r24, Z
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2a:	62 2f       	mov	r22, r18
    1e2c:	70 e0       	ldi	r23, 0x00	; 0
    1e2e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e30:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e32:	24 5a       	subi	r18, 0xA4	; 164
    1e34:	3f 4f       	sbci	r19, 0xFF	; 255
    1e36:	f9 01       	movw	r30, r18
    1e38:	20 81       	ld	r18, Z
    1e3a:	22 2f       	mov	r18, r18
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	62 9f       	mul	r22, r18
    1e40:	a0 01       	movw	r20, r0
    1e42:	63 9f       	mul	r22, r19
    1e44:	50 0d       	add	r21, r0
    1e46:	72 9f       	mul	r23, r18
    1e48:	50 0d       	add	r21, r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4e:	22 2f       	mov	r18, r18
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	24 0f       	add	r18, r20
    1e54:	35 1f       	adc	r19, r21
    1e56:	82 0f       	add	r24, r18
    1e58:	93 1f       	adc	r25, r19
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	80 81       	ld	r24, Z
    1e5e:	88 87       	std	Y+8, r24	; 0x08
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	48 2f       	mov	r20, r24
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6a:	84 5a       	subi	r24, 0xA4	; 164
    1e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6e:	fc 01       	movw	r30, r24
    1e70:	80 81       	ld	r24, Z
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	48 9f       	mul	r20, r24
    1e78:	90 01       	movw	r18, r0
    1e7a:	49 9f       	mul	r20, r25
    1e7c:	30 0d       	add	r19, r0
    1e7e:	58 9f       	mul	r21, r24
    1e80:	30 0d       	add	r19, r0
    1e82:	11 24       	eor	r1, r1
    1e84:	8c 81       	ldd	r24, Y+4	; 0x04
    1e86:	88 2f       	mov	r24, r24
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	82 0f       	add	r24, r18
    1e8c:	93 1f       	adc	r25, r19
    1e8e:	9a 87       	std	Y+10, r25	; 0x0a
    1e90:	89 87       	std	Y+9, r24	; 0x09
    1e92:	29 85       	ldd	r18, Y+9	; 0x09
    1e94:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9a:	b9 01       	movw	r22, r18
    1e9c:	46 d1       	rcall	.+652    	; 0x212a <_ZN6Keypad10findInListEi>
    1e9e:	9c 87       	std	Y+12, r25	; 0x0c
    1ea0:	8b 87       	std	Y+11, r24	; 0x0b
    1ea2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ea4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ea6:	99 23       	and	r25, r25
    1ea8:	34 f0       	brlt	.+12     	; 0x1eb6 <_ZN6Keypad10updateListEv+0x1be>
    1eaa:	2b 85       	ldd	r18, Y+11	; 0x0b
    1eac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb0:	4f 81       	ldd	r20, Y+7	; 0x07
    1eb2:	62 2f       	mov	r22, r18
    1eb4:	91 d0       	rcall	.+290    	; 0x1fd8 <_ZN6Keypad12nextKeyStateEhb>
    1eb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1eb8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <_ZN6Keypad10updateListEv+0x1c8>
    1ebe:	5d c0       	rjmp	.+186    	; 0x1f7a <_ZN6Keypad10updateListEv+0x282>
    1ec0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec2:	88 23       	and	r24, r24
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <_ZN6Keypad10updateListEv+0x1d0>
    1ec6:	59 c0       	rjmp	.+178    	; 0x1f7a <_ZN6Keypad10updateListEv+0x282>
    1ec8:	1d 82       	std	Y+5, r1	; 0x05
    1eca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ecc:	8a 30       	cpi	r24, 0x0A	; 10
    1ece:	08 f0       	brcs	.+2      	; 0x1ed2 <_ZN6Keypad10updateListEv+0x1da>
    1ed0:	54 c0       	rjmp	.+168    	; 0x1f7a <_ZN6Keypad10updateListEv+0x282>
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4d 85       	ldd	r20, Y+13	; 0x0d
    1eda:	5e 85       	ldd	r21, Y+14	; 0x0e
    1edc:	c9 01       	movw	r24, r18
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	82 0f       	add	r24, r18
    1ee8:	93 1f       	adc	r25, r19
    1eea:	84 0f       	add	r24, r20
    1eec:	95 1f       	adc	r25, r21
    1eee:	4b 96       	adiw	r24, 0x1b	; 27
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	80 81       	ld	r24, Z
    1ef4:	88 23       	and	r24, r24
    1ef6:	e9 f5       	brne	.+122    	; 0x1f72 <_ZN6Keypad10updateListEv+0x27a>
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	4d 85       	ldd	r20, Y+13	; 0x0d
    1f00:	5e 85       	ldd	r21, Y+14	; 0x0e
    1f02:	c9 01       	movw	r24, r18
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	82 0f       	add	r24, r18
    1f0e:	93 1f       	adc	r25, r19
    1f10:	84 0f       	add	r24, r20
    1f12:	95 1f       	adc	r25, r21
    1f14:	4b 96       	adiw	r24, 0x1b	; 27
    1f16:	28 85       	ldd	r18, Y+8	; 0x08
    1f18:	fc 01       	movw	r30, r24
    1f1a:	20 83       	st	Z, r18
    1f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4d 85       	ldd	r20, Y+13	; 0x0d
    1f24:	5e 85       	ldd	r21, Y+14	; 0x0e
    1f26:	c9 01       	movw	r24, r18
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	82 0f       	add	r24, r18
    1f32:	93 1f       	adc	r25, r19
    1f34:	84 0f       	add	r24, r20
    1f36:	95 1f       	adc	r25, r21
    1f38:	4c 96       	adiw	r24, 0x1c	; 28
    1f3a:	29 85       	ldd	r18, Y+9	; 0x09
    1f3c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f3e:	fc 01       	movw	r30, r24
    1f40:	31 83       	std	Z+1, r19	; 0x01
    1f42:	20 83       	st	Z, r18
    1f44:	8d 81       	ldd	r24, Y+5	; 0x05
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4d 85       	ldd	r20, Y+13	; 0x0d
    1f4c:	5e 85       	ldd	r21, Y+14	; 0x0e
    1f4e:	c9 01       	movw	r24, r18
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	88 0f       	add	r24, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	82 0f       	add	r24, r18
    1f5a:	93 1f       	adc	r25, r19
    1f5c:	84 0f       	add	r24, r20
    1f5e:	95 1f       	adc	r25, r21
    1f60:	4e 96       	adiw	r24, 0x1e	; 30
    1f62:	fc 01       	movw	r30, r24
    1f64:	10 82       	st	Z, r1
    1f66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6a:	4f 81       	ldd	r20, Y+7	; 0x07
    1f6c:	6d 81       	ldd	r22, Y+5	; 0x05
    1f6e:	34 d0       	rcall	.+104    	; 0x1fd8 <_ZN6Keypad12nextKeyStateEhb>
    1f70:	04 c0       	rjmp	.+8      	; 0x1f7a <_ZN6Keypad10updateListEv+0x282>
    1f72:	8d 81       	ldd	r24, Y+5	; 0x05
    1f74:	8f 5f       	subi	r24, 0xFF	; 255
    1f76:	8d 83       	std	Y+5, r24	; 0x05
    1f78:	a8 cf       	rjmp	.-176    	; 0x1eca <_ZN6Keypad10updateListEv+0x1d2>
    1f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7c:	8f 5f       	subi	r24, 0xFF	; 255
    1f7e:	8c 83       	std	Y+4, r24	; 0x04
    1f80:	26 cf       	rjmp	.-436    	; 0x1dce <_ZN6Keypad10updateListEv+0xd6>
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	8f 5f       	subi	r24, 0xFF	; 255
    1f86:	8b 83       	std	Y+3, r24	; 0x03
    1f88:	17 cf       	rjmp	.-466    	; 0x1db8 <_ZN6Keypad10updateListEv+0xc0>
    1f8a:	1e 82       	std	Y+6, r1	; 0x06
    1f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8e:	8a 30       	cpi	r24, 0x0A	; 10
    1f90:	c8 f4       	brcc	.+50     	; 0x1fc4 <_ZN6Keypad10updateListEv+0x2cc>
    1f92:	8e 81       	ldd	r24, Y+6	; 0x06
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	4d 85       	ldd	r20, Y+13	; 0x0d
    1f9a:	5e 85       	ldd	r21, Y+14	; 0x0e
    1f9c:	c9 01       	movw	r24, r18
    1f9e:	88 0f       	add	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	82 0f       	add	r24, r18
    1fa8:	93 1f       	adc	r25, r19
    1faa:	84 0f       	add	r24, r20
    1fac:	95 1f       	adc	r25, r21
    1fae:	4f 96       	adiw	r24, 0x1f	; 31
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	80 81       	ld	r24, Z
    1fb4:	88 23       	and	r24, r24
    1fb6:	11 f0       	breq	.+4      	; 0x1fbc <_ZN6Keypad10updateListEv+0x2c4>
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fbe:	8f 5f       	subi	r24, 0xFF	; 255
    1fc0:	8e 83       	std	Y+6, r24	; 0x06
    1fc2:	e4 cf       	rjmp	.-56     	; 0x1f8c <_ZN6Keypad10updateListEv+0x294>
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	2e 96       	adiw	r28, 0x0e	; 14
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	08 95       	ret

00001fd8 <_ZN6Keypad12nextKeyStateEhb>:
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <_ZN6Keypad12nextKeyStateEhb+0x6>
    1fde:	1f 92       	push	r1
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	6b 83       	std	Y+3, r22	; 0x03
    1fea:	4c 83       	std	Y+4, r20	; 0x04
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	28 2f       	mov	r18, r24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	49 81       	ldd	r20, Y+1	; 0x01
    1ff4:	5a 81       	ldd	r21, Y+2	; 0x02
    1ff6:	c9 01       	movw	r24, r18
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	88 0f       	add	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	82 0f       	add	r24, r18
    2002:	93 1f       	adc	r25, r19
    2004:	84 0f       	add	r24, r20
    2006:	95 1f       	adc	r25, r21
    2008:	4f 96       	adiw	r24, 0x1f	; 31
    200a:	fc 01       	movw	r30, r24
    200c:	10 82       	st	Z, r1
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	49 81       	ldd	r20, Y+1	; 0x01
    2016:	5a 81       	ldd	r21, Y+2	; 0x02
    2018:	c9 01       	movw	r24, r18
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	82 0f       	add	r24, r18
    2024:	93 1f       	adc	r25, r19
    2026:	84 0f       	add	r24, r20
    2028:	95 1f       	adc	r25, r21
    202a:	4e 96       	adiw	r24, 0x1e	; 30
    202c:	fc 01       	movw	r30, r24
    202e:	80 81       	ld	r24, Z
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	81 30       	cpi	r24, 0x01	; 1
    2036:	91 05       	cpc	r25, r1
    2038:	29 f1       	breq	.+74     	; 0x2084 <__DATA_REGION_LENGTH__+0x84>
    203a:	82 30       	cpi	r24, 0x02	; 2
    203c:	91 05       	cpc	r25, r1
    203e:	1c f4       	brge	.+6      	; 0x2046 <__DATA_REGION_LENGTH__+0x46>
    2040:	89 2b       	or	r24, r25
    2042:	49 f0       	breq	.+18     	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    2044:	6a c0       	rjmp	.+212    	; 0x211a <__DATA_REGION_LENGTH__+0x11a>
    2046:	82 30       	cpi	r24, 0x02	; 2
    2048:	91 05       	cpc	r25, r1
    204a:	09 f4       	brne	.+2      	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    204c:	50 c0       	rjmp	.+160    	; 0x20ee <__DATA_REGION_LENGTH__+0xee>
    204e:	03 97       	sbiw	r24, 0x03	; 3
    2050:	09 f4       	brne	.+2      	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    2052:	58 c0       	rjmp	.+176    	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
    2054:	62 c0       	rjmp	.+196    	; 0x211a <__DATA_REGION_LENGTH__+0x11a>
    2056:	8c 81       	ldd	r24, Y+4	; 0x04
    2058:	88 23       	and	r24, r24
    205a:	09 f4       	brne	.+2      	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    205c:	59 c0       	rjmp	.+178    	; 0x2110 <__DATA_REGION_LENGTH__+0x110>
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	9a 81       	ldd	r25, Y+2	; 0x02
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	6b 81       	ldd	r22, Y+3	; 0x03
    2066:	dd d0       	rcall	.+442    	; 0x2222 <_ZN6Keypad12transitionToEh8KeyState>
    2068:	0e 94 95 1c 	call	0x392a	; 0x392a <millis>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	29 81       	ldd	r18, Y+1	; 0x01
    2072:	3a 81       	ldd	r19, Y+2	; 0x02
    2074:	23 5b       	subi	r18, 0xB3	; 179
    2076:	3f 4f       	sbci	r19, 0xFF	; 255
    2078:	f9 01       	movw	r30, r18
    207a:	80 83       	st	Z, r24
    207c:	91 83       	std	Z+1, r25	; 0x01
    207e:	a2 83       	std	Z+2, r26	; 0x02
    2080:	b3 83       	std	Z+3, r27	; 0x03
    2082:	46 c0       	rjmp	.+140    	; 0x2110 <__DATA_REGION_LENGTH__+0x110>
    2084:	0e 94 95 1c 	call	0x392a	; 0x392a <millis>
    2088:	9b 01       	movw	r18, r22
    208a:	ac 01       	movw	r20, r24
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	9a 81       	ldd	r25, Y+2	; 0x02
    2090:	83 5b       	subi	r24, 0xB3	; 179
    2092:	9f 4f       	sbci	r25, 0xFF	; 255
    2094:	fc 01       	movw	r30, r24
    2096:	80 81       	ld	r24, Z
    2098:	91 81       	ldd	r25, Z+1	; 0x01
    209a:	a2 81       	ldd	r26, Z+2	; 0x02
    209c:	b3 81       	ldd	r27, Z+3	; 0x03
    209e:	28 1b       	sub	r18, r24
    20a0:	39 0b       	sbc	r19, r25
    20a2:	4a 0b       	sbc	r20, r26
    20a4:	5b 0b       	sbc	r21, r27
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	81 5a       	subi	r24, 0xA1	; 161
    20ac:	9f 4f       	sbci	r25, 0xFF	; 255
    20ae:	fc 01       	movw	r30, r24
    20b0:	80 81       	ld	r24, Z
    20b2:	91 81       	ldd	r25, Z+1	; 0x01
    20b4:	cc 01       	movw	r24, r24
    20b6:	a0 e0       	ldi	r26, 0x00	; 0
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	61 e0       	ldi	r22, 0x01	; 1
    20bc:	82 17       	cp	r24, r18
    20be:	93 07       	cpc	r25, r19
    20c0:	a4 07       	cpc	r26, r20
    20c2:	b5 07       	cpc	r27, r21
    20c4:	08 f0       	brcs	.+2      	; 0x20c8 <__DATA_REGION_LENGTH__+0xc8>
    20c6:	60 e0       	ldi	r22, 0x00	; 0
    20c8:	66 23       	and	r22, r22
    20ca:	31 f0       	breq	.+12     	; 0x20d8 <__DATA_REGION_LENGTH__+0xd8>
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9a 81       	ldd	r25, Y+2	; 0x02
    20d0:	42 e0       	ldi	r20, 0x02	; 2
    20d2:	6b 81       	ldd	r22, Y+3	; 0x03
    20d4:	a6 d0       	rcall	.+332    	; 0x2222 <_ZN6Keypad12transitionToEh8KeyState>
    20d6:	1e c0       	rjmp	.+60     	; 0x2114 <__DATA_REGION_LENGTH__+0x114>
    20d8:	9c 81       	ldd	r25, Y+4	; 0x04
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	89 27       	eor	r24, r25
    20de:	88 23       	and	r24, r24
    20e0:	c9 f0       	breq	.+50     	; 0x2114 <__DATA_REGION_LENGTH__+0x114>
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	43 e0       	ldi	r20, 0x03	; 3
    20e8:	6b 81       	ldd	r22, Y+3	; 0x03
    20ea:	9b d0       	rcall	.+310    	; 0x2222 <_ZN6Keypad12transitionToEh8KeyState>
    20ec:	13 c0       	rjmp	.+38     	; 0x2114 <__DATA_REGION_LENGTH__+0x114>
    20ee:	9c 81       	ldd	r25, Y+4	; 0x04
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	89 27       	eor	r24, r25
    20f4:	88 23       	and	r24, r24
    20f6:	81 f0       	breq	.+32     	; 0x2118 <__DATA_REGION_LENGTH__+0x118>
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	43 e0       	ldi	r20, 0x03	; 3
    20fe:	6b 81       	ldd	r22, Y+3	; 0x03
    2100:	90 d0       	rcall	.+288    	; 0x2222 <_ZN6Keypad12transitionToEh8KeyState>
    2102:	0a c0       	rjmp	.+20     	; 0x2118 <__DATA_REGION_LENGTH__+0x118>
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	6b 81       	ldd	r22, Y+3	; 0x03
    210c:	8a d0       	rcall	.+276    	; 0x2222 <_ZN6Keypad12transitionToEh8KeyState>
    210e:	05 c0       	rjmp	.+10     	; 0x211a <__DATA_REGION_LENGTH__+0x11a>
    2110:	00 00       	nop
    2112:	03 c0       	rjmp	.+6      	; 0x211a <__DATA_REGION_LENGTH__+0x11a>
    2114:	00 00       	nop
    2116:	01 c0       	rjmp	.+2      	; 0x211a <__DATA_REGION_LENGTH__+0x11a>
    2118:	00 00       	nop
    211a:	00 00       	nop
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	df 91       	pop	r29
    2126:	cf 91       	pop	r28
    2128:	08 95       	ret

0000212a <_ZN6Keypad10findInListEi>:
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	00 d0       	rcall	.+0      	; 0x2130 <_ZN6Keypad10findInListEi+0x6>
    2130:	1f 92       	push	r1
    2132:	1f 92       	push	r1
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	9b 83       	std	Y+3, r25	; 0x03
    213a:	8a 83       	std	Y+2, r24	; 0x02
    213c:	7d 83       	std	Y+5, r23	; 0x05
    213e:	6c 83       	std	Y+4, r22	; 0x04
    2140:	19 82       	std	Y+1, r1	; 0x01
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	8a 30       	cpi	r24, 0x0A	; 10
    2146:	f8 f4       	brcc	.+62     	; 0x2186 <_ZN6Keypad10findInListEi+0x5c>
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a 81       	ldd	r20, Y+2	; 0x02
    2150:	5b 81       	ldd	r21, Y+3	; 0x03
    2152:	c9 01       	movw	r24, r18
    2154:	88 0f       	add	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	82 0f       	add	r24, r18
    215e:	93 1f       	adc	r25, r19
    2160:	84 0f       	add	r24, r20
    2162:	95 1f       	adc	r25, r21
    2164:	4c 96       	adiw	r24, 0x1c	; 28
    2166:	fc 01       	movw	r30, r24
    2168:	20 81       	ld	r18, Z
    216a:	31 81       	ldd	r19, Z+1	; 0x01
    216c:	8c 81       	ldd	r24, Y+4	; 0x04
    216e:	9d 81       	ldd	r25, Y+5	; 0x05
    2170:	28 17       	cp	r18, r24
    2172:	39 07       	cpc	r19, r25
    2174:	21 f4       	brne	.+8      	; 0x217e <_ZN6Keypad10findInListEi+0x54>
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	88 2f       	mov	r24, r24
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	06 c0       	rjmp	.+12     	; 0x218a <_ZN6Keypad10findInListEi+0x60>
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	8f 5f       	subi	r24, 0xFF	; 255
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	de cf       	rjmp	.-68     	; 0x2142 <_ZN6Keypad10findInListEi+0x18>
    2186:	8f ef       	ldi	r24, 0xFF	; 255
    2188:	9f ef       	ldi	r25, 0xFF	; 255
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	08 95       	ret

0000219a <_ZN6Keypad15setDebounceTimeEj>:
    219a:	cf 93       	push	r28
    219c:	df 93       	push	r29
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <_ZN6Keypad15setDebounceTimeEj+0x6>
    21a0:	1f 92       	push	r1
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	9a 83       	std	Y+2, r25	; 0x02
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	7c 83       	std	Y+4, r23	; 0x04
    21ac:	6b 83       	std	Y+3, r22	; 0x03
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	89 2b       	or	r24, r25
    21b4:	51 f4       	brne	.+20     	; 0x21ca <_ZN6Keypad15setDebounceTimeEj+0x30>
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ba:	83 5a       	subi	r24, 0xA3	; 163
    21bc:	9f 4f       	sbci	r25, 0xFF	; 255
    21be:	21 e0       	ldi	r18, 0x01	; 1
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	fc 01       	movw	r30, r24
    21c4:	31 83       	std	Z+1, r19	; 0x01
    21c6:	20 83       	st	Z, r18
    21c8:	09 c0       	rjmp	.+18     	; 0x21dc <_ZN6Keypad15setDebounceTimeEj+0x42>
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	9a 81       	ldd	r25, Y+2	; 0x02
    21ce:	83 5a       	subi	r24, 0xA3	; 163
    21d0:	9f 4f       	sbci	r25, 0xFF	; 255
    21d2:	2b 81       	ldd	r18, Y+3	; 0x03
    21d4:	3c 81       	ldd	r19, Y+4	; 0x04
    21d6:	fc 01       	movw	r30, r24
    21d8:	31 83       	std	Z+1, r19	; 0x01
    21da:	20 83       	st	Z, r18
    21dc:	00 00       	nop
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	08 95       	ret

000021ec <_ZN6Keypad11setHoldTimeEj>:
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <_ZN6Keypad11setHoldTimeEj+0x6>
    21f2:	1f 92       	push	r1
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	9a 83       	std	Y+2, r25	; 0x02
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	7c 83       	std	Y+4, r23	; 0x04
    21fe:	6b 83       	std	Y+3, r22	; 0x03
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	9a 81       	ldd	r25, Y+2	; 0x02
    2204:	81 5a       	subi	r24, 0xA1	; 161
    2206:	9f 4f       	sbci	r25, 0xFF	; 255
    2208:	2b 81       	ldd	r18, Y+3	; 0x03
    220a:	3c 81       	ldd	r19, Y+4	; 0x04
    220c:	fc 01       	movw	r30, r24
    220e:	31 83       	std	Z+1, r19	; 0x01
    2210:	20 83       	st	Z, r18
    2212:	00 00       	nop
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	08 95       	ret

00002222 <_ZN6Keypad12transitionToEh8KeyState>:

void Keypad::transitionTo(byte idx, KeyState nextState) {
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	00 d0       	rcall	.+0      	; 0x2228 <_ZN6Keypad12transitionToEh8KeyState+0x6>
    2228:	1f 92       	push	r1
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	6b 83       	std	Y+3, r22	; 0x03
    2234:	4c 83       	std	Y+4, r20	; 0x04
	key[idx].kstate = nextState;
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	49 81       	ldd	r20, Y+1	; 0x01
    223e:	5a 81       	ldd	r21, Y+2	; 0x02
    2240:	c9 01       	movw	r24, r18
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	82 0f       	add	r24, r18
    224c:	93 1f       	adc	r25, r19
    224e:	84 0f       	add	r24, r20
    2250:	95 1f       	adc	r25, r21
    2252:	4e 96       	adiw	r24, 0x1e	; 30
    2254:	2c 81       	ldd	r18, Y+4	; 0x04
    2256:	fc 01       	movw	r30, r24
    2258:	20 83       	st	Z, r18
	key[idx].stateChanged = true;
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	49 81       	ldd	r20, Y+1	; 0x01
    2262:	5a 81       	ldd	r21, Y+2	; 0x02
    2264:	c9 01       	movw	r24, r18
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	88 0f       	add	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	82 0f       	add	r24, r18
    2270:	93 1f       	adc	r25, r19
    2272:	84 0f       	add	r24, r20
    2274:	95 1f       	adc	r25, r21
    2276:	4f 96       	adiw	r24, 0x1f	; 31
    2278:	21 e0       	ldi	r18, 0x01	; 1
    227a:	fc 01       	movw	r30, r24
    227c:	20 83       	st	Z, r18

	// Sketch used the getKey() function.
	// Calls keypadEventListener only when the first key in slot 0 changes state.
	if (single_key)  {
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	9a 81       	ldd	r25, Y+2	; 0x02
    2282:	8f 59       	subi	r24, 0x9F	; 159
    2284:	9f 4f       	sbci	r25, 0xFF	; 255
    2286:	fc 01       	movw	r30, r24
    2288:	80 81       	ld	r24, Z
    228a:	88 23       	and	r24, r24
    228c:	d1 f0       	breq	.+52     	; 0x22c2 <_ZN6Keypad12transitionToEh8KeyState+0xa0>
	  	if ( (keypadEventListener!=NULL) && (idx==0) )  {
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	9a 81       	ldd	r25, Y+2	; 0x02
    2292:	8e 59       	subi	r24, 0x9E	; 158
    2294:	9f 4f       	sbci	r25, 0xFF	; 255
    2296:	fc 01       	movw	r30, r24
    2298:	80 81       	ld	r24, Z
    229a:	91 81       	ldd	r25, Z+1	; 0x01
    229c:	89 2b       	or	r24, r25
    229e:	a1 f1       	breq	.+104    	; 0x2308 <_ZN6Keypad12transitionToEh8KeyState+0xe6>
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	88 23       	and	r24, r24
    22a4:	89 f5       	brne	.+98     	; 0x2308 <_ZN6Keypad12transitionToEh8KeyState+0xe6>
			keypadEventListener(key[0].kchar);
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	9a 81       	ldd	r25, Y+2	; 0x02
    22aa:	8e 59       	subi	r24, 0x9E	; 158
    22ac:	9f 4f       	sbci	r25, 0xFF	; 255
    22ae:	fc 01       	movw	r30, r24
    22b0:	20 81       	ld	r18, Z
    22b2:	31 81       	ldd	r19, Z+1	; 0x01
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	9a 81       	ldd	r25, Y+2	; 0x02
    22b8:	fc 01       	movw	r30, r24
    22ba:	83 8d       	ldd	r24, Z+27	; 0x1b
    22bc:	f9 01       	movw	r30, r18
    22be:	19 95       	eicall
	else {
	  	if (keypadEventListener!=NULL)  {
			keypadEventListener(key[idx].kchar);
		}
	}
}
    22c0:	23 c0       	rjmp	.+70     	; 0x2308 <_ZN6Keypad12transitionToEh8KeyState+0xe6>
		}
	}
	// Sketch used the getKeys() function.
	// Calls keypadEventListener on any key that changes state.
	else {
	  	if (keypadEventListener!=NULL)  {
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	9a 81       	ldd	r25, Y+2	; 0x02
    22c6:	8e 59       	subi	r24, 0x9E	; 158
    22c8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ca:	fc 01       	movw	r30, r24
    22cc:	80 81       	ld	r24, Z
    22ce:	91 81       	ldd	r25, Z+1	; 0x01
    22d0:	89 2b       	or	r24, r25
    22d2:	d1 f0       	breq	.+52     	; 0x2308 <_ZN6Keypad12transitionToEh8KeyState+0xe6>
			keypadEventListener(key[idx].kchar);
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	9a 81       	ldd	r25, Y+2	; 0x02
    22d8:	8e 59       	subi	r24, 0x9E	; 158
    22da:	9f 4f       	sbci	r25, 0xFF	; 255
    22dc:	fc 01       	movw	r30, r24
    22de:	40 81       	ld	r20, Z
    22e0:	51 81       	ldd	r21, Z+1	; 0x01
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	69 81       	ldd	r22, Y+1	; 0x01
    22ea:	7a 81       	ldd	r23, Y+2	; 0x02
    22ec:	c9 01       	movw	r24, r18
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	82 0f       	add	r24, r18
    22f8:	93 1f       	adc	r25, r19
    22fa:	86 0f       	add	r24, r22
    22fc:	97 1f       	adc	r25, r23
    22fe:	4b 96       	adiw	r24, 0x1b	; 27
    2300:	fc 01       	movw	r30, r24
    2302:	80 81       	ld	r24, Z
    2304:	fa 01       	movw	r30, r20
    2306:	19 95       	eicall
		}
	}
}
    2308:	00 00       	nop
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	08 95       	ret

00002318 <_ZN5PrintC1Ev>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	1f 92       	push	r1
    231e:	1f 92       	push	r1
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	9a 83       	std	Y+2, r25	; 0x02
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	25 e9       	ldi	r18, 0x95	; 149
    232a:	33 e0       	ldi	r19, 0x03	; 3
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	9a 81       	ldd	r25, Y+2	; 0x02
    2330:	fc 01       	movw	r30, r24
    2332:	31 83       	std	Z+1, r19	; 0x01
    2334:	20 83       	st	Z, r18
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
    233a:	fc 01       	movw	r30, r24
    233c:	13 82       	std	Z+3, r1	; 0x03
    233e:	12 82       	std	Z+2, r1	; 0x02
    2340:	00 00       	nop
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	df 91       	pop	r29
    2348:	cf 91       	pop	r28
    234a:	08 95       	ret

0000234c <_ZN5Print17availableForWriteEv>:
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
    2350:	1f 92       	push	r1
    2352:	1f 92       	push	r1
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	9a 83       	std	Y+2, r25	; 0x02
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	08 95       	ret

0000236a <_ZN5Print5flushEv>:
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	1f 92       	push	r1
    2370:	1f 92       	push	r1
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	9a 83       	std	Y+2, r25	; 0x02
    2378:	89 83       	std	Y+1, r24	; 0x01
    237a:	00 00       	nop
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	08 95       	ret

00002386 <_ZN13LiquidCrystalC1Ehhhhhh>:
    2386:	8f 92       	push	r8
    2388:	af 92       	push	r10
    238a:	cf 92       	push	r12
    238c:	ef 92       	push	r14
    238e:	0f 93       	push	r16
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	28 97       	sbiw	r28, 0x08	; 8
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	cd bf       	out	0x3d, r28	; 61
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	6b 83       	std	Y+3, r22	; 0x03
    23aa:	4c 83       	std	Y+4, r20	; 0x04
    23ac:	2d 83       	std	Y+5, r18	; 0x05
    23ae:	0e 83       	std	Y+6, r16	; 0x06
    23b0:	ef 82       	std	Y+7, r14	; 0x07
    23b2:	c8 86       	std	Y+8, r12	; 0x08
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	af df       	rcall	.-162    	; 0x2318 <_ZN5PrintC1Ev>
    23ba:	29 e8       	ldi	r18, 0x89	; 137
    23bc:	33 e0       	ldi	r19, 0x03	; 3
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	9a 81       	ldd	r25, Y+2	; 0x02
    23c2:	fc 01       	movw	r30, r24
    23c4:	31 83       	std	Z+1, r19	; 0x01
    23c6:	20 83       	st	Z, r18
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	1f 92       	push	r1
    23ce:	1f 92       	push	r1
    23d0:	1f 92       	push	r1
    23d2:	1f 92       	push	r1
    23d4:	88 84       	ldd	r8, Y+8	; 0x08
    23d6:	af 80       	ldd	r10, Y+7	; 0x07
    23d8:	ce 80       	ldd	r12, Y+6	; 0x06
    23da:	ed 80       	ldd	r14, Y+5	; 0x05
    23dc:	0c 81       	ldd	r16, Y+4	; 0x04
    23de:	2f ef       	ldi	r18, 0xFF	; 255
    23e0:	4b 81       	ldd	r20, Y+3	; 0x03
    23e2:	61 e0       	ldi	r22, 0x01	; 1
    23e4:	13 d0       	rcall	.+38     	; 0x240c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	00 00       	nop
    23f0:	28 96       	adiw	r28, 0x08	; 8
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	0f 91       	pop	r16
    2402:	ef 90       	pop	r14
    2404:	cf 90       	pop	r12
    2406:	af 90       	pop	r10
    2408:	8f 90       	pop	r8
    240a:	08 95       	ret

0000240c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
    240c:	8f 92       	push	r8
    240e:	af 92       	push	r10
    2410:	cf 92       	push	r12
    2412:	ef 92       	push	r14
    2414:	0f 93       	push	r16
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	2a 97       	sbiw	r28, 0x0a	; 10
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	9a 83       	std	Y+2, r25	; 0x02
    242c:	89 83       	std	Y+1, r24	; 0x01
    242e:	6b 83       	std	Y+3, r22	; 0x03
    2430:	4c 83       	std	Y+4, r20	; 0x04
    2432:	2d 83       	std	Y+5, r18	; 0x05
    2434:	0e 83       	std	Y+6, r16	; 0x06
    2436:	ef 82       	std	Y+7, r14	; 0x07
    2438:	c8 86       	std	Y+8, r12	; 0x08
    243a:	a9 86       	std	Y+9, r10	; 0x09
    243c:	8a 86       	std	Y+10, r8	; 0x0a
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	9a 81       	ldd	r25, Y+2	; 0x02
    2442:	2c 81       	ldd	r18, Y+4	; 0x04
    2444:	fc 01       	movw	r30, r24
    2446:	24 83       	std	Z+4, r18	; 0x04
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	2d 81       	ldd	r18, Y+5	; 0x05
    244e:	fc 01       	movw	r30, r24
    2450:	25 83       	std	Z+5, r18	; 0x05
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	2e 81       	ldd	r18, Y+6	; 0x06
    2458:	fc 01       	movw	r30, r24
    245a:	26 83       	std	Z+6, r18	; 0x06
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	2f 81       	ldd	r18, Y+7	; 0x07
    2462:	fc 01       	movw	r30, r24
    2464:	27 83       	std	Z+7, r18	; 0x07
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	9a 81       	ldd	r25, Y+2	; 0x02
    246a:	28 85       	ldd	r18, Y+8	; 0x08
    246c:	fc 01       	movw	r30, r24
    246e:	20 87       	std	Z+8, r18	; 0x08
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	29 85       	ldd	r18, Y+9	; 0x09
    2476:	fc 01       	movw	r30, r24
    2478:	21 87       	std	Z+9, r18	; 0x09
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2480:	fc 01       	movw	r30, r24
    2482:	22 87       	std	Z+10, r18	; 0x0a
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	9a 81       	ldd	r25, Y+2	; 0x02
    2488:	2d 89       	ldd	r18, Y+21	; 0x15
    248a:	fc 01       	movw	r30, r24
    248c:	23 87       	std	Z+11, r18	; 0x0b
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	9a 81       	ldd	r25, Y+2	; 0x02
    2492:	2e 89       	ldd	r18, Y+22	; 0x16
    2494:	fc 01       	movw	r30, r24
    2496:	24 87       	std	Z+12, r18	; 0x0c
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	9a 81       	ldd	r25, Y+2	; 0x02
    249c:	2f 89       	ldd	r18, Y+23	; 0x17
    249e:	fc 01       	movw	r30, r24
    24a0:	25 87       	std	Z+13, r18	; 0x0d
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	28 8d       	ldd	r18, Y+24	; 0x18
    24a8:	fc 01       	movw	r30, r24
    24aa:	26 87       	std	Z+14, r18	; 0x0e
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	88 23       	and	r24, r24
    24b0:	29 f0       	breq	.+10     	; 0x24bc <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xb0>
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	9a 81       	ldd	r25, Y+2	; 0x02
    24b6:	fc 01       	movw	r30, r24
    24b8:	17 86       	std	Z+15, r1	; 0x0f
    24ba:	05 c0       	rjmp	.+10     	; 0x24c6 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xba>
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	9a 81       	ldd	r25, Y+2	; 0x02
    24c0:	20 e1       	ldi	r18, 0x10	; 16
    24c2:	fc 01       	movw	r30, r24
    24c4:	27 87       	std	Z+15, r18	; 0x0f
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	41 e0       	ldi	r20, 0x01	; 1
    24ce:	60 e1       	ldi	r22, 0x10	; 16
    24d0:	0f d0       	rcall	.+30     	; 0x24f0 <_ZN13LiquidCrystal5beginEhhh>
    24d2:	00 00       	nop
    24d4:	2a 96       	adiw	r28, 0x0a	; 10
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	0f 91       	pop	r16
    24e6:	ef 90       	pop	r14
    24e8:	cf 90       	pop	r12
    24ea:	af 90       	pop	r10
    24ec:	8f 90       	pop	r8
    24ee:	08 95       	ret

000024f0 <_ZN13LiquidCrystal5beginEhhh>:
    24f0:	0f 93       	push	r16
    24f2:	1f 93       	push	r17
    24f4:	cf 93       	push	r28
    24f6:	df 93       	push	r29
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	27 97       	sbiw	r28, 0x07	; 7
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	9c 83       	std	Y+4, r25	; 0x04
    250a:	8b 83       	std	Y+3, r24	; 0x03
    250c:	6d 83       	std	Y+5, r22	; 0x05
    250e:	4e 83       	std	Y+6, r20	; 0x06
    2510:	2f 83       	std	Y+7, r18	; 0x07
    2512:	8e 81       	ldd	r24, Y+6	; 0x06
    2514:	82 30       	cpi	r24, 0x02	; 2
    2516:	50 f0       	brcs	.+20     	; 0x252c <_ZN13LiquidCrystal5beginEhhh+0x3c>
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	fc 01       	movw	r30, r24
    251e:	87 85       	ldd	r24, Z+15	; 0x0f
    2520:	28 2f       	mov	r18, r24
    2522:	28 60       	ori	r18, 0x08	; 8
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	9c 81       	ldd	r25, Y+4	; 0x04
    2528:	fc 01       	movw	r30, r24
    252a:	27 87       	std	Z+15, r18	; 0x0f
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	9c 81       	ldd	r25, Y+4	; 0x04
    2530:	2e 81       	ldd	r18, Y+6	; 0x06
    2532:	fc 01       	movw	r30, r24
    2534:	23 8b       	std	Z+19, r18	; 0x13
    2536:	8d 81       	ldd	r24, Y+5	; 0x05
    2538:	88 2f       	mov	r24, r24
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	ac 01       	movw	r20, r24
    253e:	40 5c       	subi	r20, 0xC0	; 192
    2540:	5f 4f       	sbci	r21, 0xFF	; 255
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	8a 01       	movw	r16, r20
    254e:	40 e4       	ldi	r20, 0x40	; 64
    2550:	50 e0       	ldi	r21, 0x00	; 0
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	70 e0       	ldi	r23, 0x00	; 0
    2556:	ef d0       	rcall	.+478    	; 0x2736 <_ZN13LiquidCrystal13setRowOffsetsEiiii>
    2558:	8f 81       	ldd	r24, Y+7	; 0x07
    255a:	88 23       	and	r24, r24
    255c:	69 f0       	breq	.+26     	; 0x2578 <_ZN13LiquidCrystal5beginEhhh+0x88>
    255e:	8e 81       	ldd	r24, Y+6	; 0x06
    2560:	81 30       	cpi	r24, 0x01	; 1
    2562:	51 f4       	brne	.+20     	; 0x2578 <_ZN13LiquidCrystal5beginEhhh+0x88>
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	fc 01       	movw	r30, r24
    256a:	87 85       	ldd	r24, Z+15	; 0x0f
    256c:	28 2f       	mov	r18, r24
    256e:	24 60       	ori	r18, 0x04	; 4
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	9c 81       	ldd	r25, Y+4	; 0x04
    2574:	fc 01       	movw	r30, r24
    2576:	27 87       	std	Z+15, r18	; 0x0f
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	9c 81       	ldd	r25, Y+4	; 0x04
    257c:	fc 01       	movw	r30, r24
    257e:	84 81       	ldd	r24, Z+4	; 0x04
    2580:	61 e0       	ldi	r22, 0x01	; 1
    2582:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <pinMode>
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	9c 81       	ldd	r25, Y+4	; 0x04
    258a:	fc 01       	movw	r30, r24
    258c:	85 81       	ldd	r24, Z+5	; 0x05
    258e:	8f 3f       	cpi	r24, 0xFF	; 255
    2590:	39 f0       	breq	.+14     	; 0x25a0 <_ZN13LiquidCrystal5beginEhhh+0xb0>
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	fc 01       	movw	r30, r24
    2598:	85 81       	ldd	r24, Z+5	; 0x05
    259a:	61 e0       	ldi	r22, 0x01	; 1
    259c:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <pinMode>
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	fc 01       	movw	r30, r24
    25a6:	86 81       	ldd	r24, Z+6	; 0x06
    25a8:	61 e0       	ldi	r22, 0x01	; 1
    25aa:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <pinMode>
    25ae:	1a 82       	std	Y+2, r1	; 0x02
    25b0:	19 82       	std	Y+1, r1	; 0x01
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	9c 81       	ldd	r25, Y+4	; 0x04
    25b6:	fc 01       	movw	r30, r24
    25b8:	87 85       	ldd	r24, Z+15	; 0x0f
    25ba:	88 2f       	mov	r24, r24
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	80 71       	andi	r24, 0x10	; 16
    25c0:	99 27       	eor	r25, r25
    25c2:	89 2b       	or	r24, r25
    25c4:	19 f0       	breq	.+6      	; 0x25cc <_ZN13LiquidCrystal5beginEhhh+0xdc>
    25c6:	88 e0       	ldi	r24, 0x08	; 8
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <_ZN13LiquidCrystal5beginEhhh+0xe0>
    25cc:	84 e0       	ldi	r24, 0x04	; 4
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	29 81       	ldd	r18, Y+1	; 0x01
    25d2:	3a 81       	ldd	r19, Y+2	; 0x02
    25d4:	28 17       	cp	r18, r24
    25d6:	39 07       	cpc	r19, r25
    25d8:	94 f4       	brge	.+36     	; 0x25fe <_ZN13LiquidCrystal5beginEhhh+0x10e>
    25da:	2b 81       	ldd	r18, Y+3	; 0x03
    25dc:	3c 81       	ldd	r19, Y+4	; 0x04
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	9a 81       	ldd	r25, Y+2	; 0x02
    25e2:	82 0f       	add	r24, r18
    25e4:	93 1f       	adc	r25, r19
    25e6:	07 96       	adiw	r24, 0x07	; 7
    25e8:	fc 01       	movw	r30, r24
    25ea:	80 81       	ld	r24, Z
    25ec:	61 e0       	ldi	r22, 0x01	; 1
    25ee:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <pinMode>
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	9a 81       	ldd	r25, Y+2	; 0x02
    25f6:	01 96       	adiw	r24, 0x01	; 1
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	da cf       	rjmp	.-76     	; 0x25b2 <_ZN13LiquidCrystal5beginEhhh+0xc2>
    25fe:	80 e5       	ldi	r24, 0x50	; 80
    2600:	93 ec       	ldi	r25, 0xC3	; 195
    2602:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delayMicroseconds>
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	9c 81       	ldd	r25, Y+4	; 0x04
    260a:	fc 01       	movw	r30, r24
    260c:	84 81       	ldd	r24, Z+4	; 0x04
    260e:	60 e0       	ldi	r22, 0x00	; 0
    2610:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <digitalWrite>
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	fc 01       	movw	r30, r24
    261a:	86 81       	ldd	r24, Z+6	; 0x06
    261c:	60 e0       	ldi	r22, 0x00	; 0
    261e:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <digitalWrite>
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	9c 81       	ldd	r25, Y+4	; 0x04
    2626:	fc 01       	movw	r30, r24
    2628:	85 81       	ldd	r24, Z+5	; 0x05
    262a:	8f 3f       	cpi	r24, 0xFF	; 255
    262c:	39 f0       	breq	.+14     	; 0x263c <_ZN13LiquidCrystal5beginEhhh+0x14c>
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	9c 81       	ldd	r25, Y+4	; 0x04
    2632:	fc 01       	movw	r30, r24
    2634:	85 81       	ldd	r24, Z+5	; 0x05
    2636:	60 e0       	ldi	r22, 0x00	; 0
    2638:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <digitalWrite>
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	9c 81       	ldd	r25, Y+4	; 0x04
    2640:	fc 01       	movw	r30, r24
    2642:	87 85       	ldd	r24, Z+15	; 0x0f
    2644:	88 2f       	mov	r24, r24
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	80 71       	andi	r24, 0x10	; 16
    264a:	99 27       	eor	r25, r25
    264c:	89 2b       	or	r24, r25
    264e:	e9 f4       	brne	.+58     	; 0x268a <_ZN13LiquidCrystal5beginEhhh+0x19a>
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	9c 81       	ldd	r25, Y+4	; 0x04
    2654:	63 e0       	ldi	r22, 0x03	; 3
    2656:	ba d1       	rcall	.+884    	; 0x29cc <_ZN13LiquidCrystal10write4bitsEh>
    2658:	84 e9       	ldi	r24, 0x94	; 148
    265a:	91 e1       	ldi	r25, 0x11	; 17
    265c:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delayMicroseconds>
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	63 e0       	ldi	r22, 0x03	; 3
    2666:	b2 d1       	rcall	.+868    	; 0x29cc <_ZN13LiquidCrystal10write4bitsEh>
    2668:	84 e9       	ldi	r24, 0x94	; 148
    266a:	91 e1       	ldi	r25, 0x11	; 17
    266c:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delayMicroseconds>
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	63 e0       	ldi	r22, 0x03	; 3
    2676:	aa d1       	rcall	.+852    	; 0x29cc <_ZN13LiquidCrystal10write4bitsEh>
    2678:	86 e9       	ldi	r24, 0x96	; 150
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delayMicroseconds>
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	9c 81       	ldd	r25, Y+4	; 0x04
    2684:	62 e0       	ldi	r22, 0x02	; 2
    2686:	a2 d1       	rcall	.+836    	; 0x29cc <_ZN13LiquidCrystal10write4bitsEh>
    2688:	26 c0       	rjmp	.+76     	; 0x26d6 <_ZN13LiquidCrystal5beginEhhh+0x1e6>
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	9c 81       	ldd	r25, Y+4	; 0x04
    268e:	fc 01       	movw	r30, r24
    2690:	87 85       	ldd	r24, Z+15	; 0x0f
    2692:	28 2f       	mov	r18, r24
    2694:	20 62       	ori	r18, 0x20	; 32
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	9c 81       	ldd	r25, Y+4	; 0x04
    269a:	62 2f       	mov	r22, r18
    269c:	f6 d0       	rcall	.+492    	; 0x288a <_ZN13LiquidCrystal7commandEh>
    269e:	84 e9       	ldi	r24, 0x94	; 148
    26a0:	91 e1       	ldi	r25, 0x11	; 17
    26a2:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delayMicroseconds>
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	fc 01       	movw	r30, r24
    26ac:	87 85       	ldd	r24, Z+15	; 0x0f
    26ae:	28 2f       	mov	r18, r24
    26b0:	20 62       	ori	r18, 0x20	; 32
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	9c 81       	ldd	r25, Y+4	; 0x04
    26b6:	62 2f       	mov	r22, r18
    26b8:	e8 d0       	rcall	.+464    	; 0x288a <_ZN13LiquidCrystal7commandEh>
    26ba:	86 e9       	ldi	r24, 0x96	; 150
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delayMicroseconds>
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	9c 81       	ldd	r25, Y+4	; 0x04
    26c6:	fc 01       	movw	r30, r24
    26c8:	87 85       	ldd	r24, Z+15	; 0x0f
    26ca:	28 2f       	mov	r18, r24
    26cc:	20 62       	ori	r18, 0x20	; 32
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	9c 81       	ldd	r25, Y+4	; 0x04
    26d2:	62 2f       	mov	r22, r18
    26d4:	da d0       	rcall	.+436    	; 0x288a <_ZN13LiquidCrystal7commandEh>
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	fc 01       	movw	r30, r24
    26dc:	87 85       	ldd	r24, Z+15	; 0x0f
    26de:	28 2f       	mov	r18, r24
    26e0:	20 62       	ori	r18, 0x20	; 32
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	9c 81       	ldd	r25, Y+4	; 0x04
    26e6:	62 2f       	mov	r22, r18
    26e8:	d0 d0       	rcall	.+416    	; 0x288a <_ZN13LiquidCrystal7commandEh>
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	24 e0       	ldi	r18, 0x04	; 4
    26f0:	fc 01       	movw	r30, r24
    26f2:	20 8b       	std	Z+16, r18	; 0x10
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	9c 81       	ldd	r25, Y+4	; 0x04
    26f8:	a6 d0       	rcall	.+332    	; 0x2846 <_ZN13LiquidCrystal7displayEv>
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	51 d0       	rcall	.+162    	; 0x27a2 <_ZN13LiquidCrystal5clearEv>
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	9c 81       	ldd	r25, Y+4	; 0x04
    2704:	22 e0       	ldi	r18, 0x02	; 2
    2706:	fc 01       	movw	r30, r24
    2708:	21 8b       	std	Z+17, r18	; 0x11
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	9c 81       	ldd	r25, Y+4	; 0x04
    270e:	fc 01       	movw	r30, r24
    2710:	81 89       	ldd	r24, Z+17	; 0x11
    2712:	28 2f       	mov	r18, r24
    2714:	24 60       	ori	r18, 0x04	; 4
    2716:	8b 81       	ldd	r24, Y+3	; 0x03
    2718:	9c 81       	ldd	r25, Y+4	; 0x04
    271a:	62 2f       	mov	r22, r18
    271c:	b6 d0       	rcall	.+364    	; 0x288a <_ZN13LiquidCrystal7commandEh>
    271e:	00 00       	nop
    2720:	27 96       	adiw	r28, 0x07	; 7
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	1f 91       	pop	r17
    2732:	0f 91       	pop	r16
    2734:	08 95       	ret

00002736 <_ZN13LiquidCrystal13setRowOffsetsEiiii>:
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	2a 97       	sbiw	r28, 0x0a	; 10
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	7c 83       	std	Y+4, r23	; 0x04
    2754:	6b 83       	std	Y+3, r22	; 0x03
    2756:	5e 83       	std	Y+6, r21	; 0x06
    2758:	4d 83       	std	Y+5, r20	; 0x05
    275a:	38 87       	std	Y+8, r19	; 0x08
    275c:	2f 83       	std	Y+7, r18	; 0x07
    275e:	1a 87       	std	Y+10, r17	; 0x0a
    2760:	09 87       	std	Y+9, r16	; 0x09
    2762:	2b 81       	ldd	r18, Y+3	; 0x03
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	9a 81       	ldd	r25, Y+2	; 0x02
    2768:	fc 01       	movw	r30, r24
    276a:	24 8b       	std	Z+20, r18	; 0x14
    276c:	2d 81       	ldd	r18, Y+5	; 0x05
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	9a 81       	ldd	r25, Y+2	; 0x02
    2772:	fc 01       	movw	r30, r24
    2774:	25 8b       	std	Z+21, r18	; 0x15
    2776:	2f 81       	ldd	r18, Y+7	; 0x07
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	9a 81       	ldd	r25, Y+2	; 0x02
    277c:	fc 01       	movw	r30, r24
    277e:	26 8b       	std	Z+22, r18	; 0x16
    2780:	29 85       	ldd	r18, Y+9	; 0x09
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	9a 81       	ldd	r25, Y+2	; 0x02
    2786:	fc 01       	movw	r30, r24
    2788:	27 8b       	std	Z+23, r18	; 0x17
    278a:	00 00       	nop
    278c:	2a 96       	adiw	r28, 0x0a	; 10
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	df 91       	pop	r29
    279a:	cf 91       	pop	r28
    279c:	1f 91       	pop	r17
    279e:	0f 91       	pop	r16
    27a0:	08 95       	ret

000027a2 <_ZN13LiquidCrystal5clearEv>:
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
    27a6:	1f 92       	push	r1
    27a8:	1f 92       	push	r1
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	61 e0       	ldi	r22, 0x01	; 1
    27b8:	68 d0       	rcall	.+208    	; 0x288a <_ZN13LiquidCrystal7commandEh>
    27ba:	80 ed       	ldi	r24, 0xD0	; 208
    27bc:	97 e0       	ldi	r25, 0x07	; 7
    27be:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delayMicroseconds>
    27c2:	00 00       	nop
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	08 95       	ret

000027ce <_ZN13LiquidCrystal9setCursorEhh>:
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29
    27d2:	00 d0       	rcall	.+0      	; 0x27d4 <_ZN13LiquidCrystal9setCursorEhh+0x6>
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <_ZN13LiquidCrystal9setCursorEhh+0x8>
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	9c 83       	std	Y+4, r25	; 0x04
    27dc:	8b 83       	std	Y+3, r24	; 0x03
    27de:	6d 83       	std	Y+5, r22	; 0x05
    27e0:	4e 83       	std	Y+6, r20	; 0x06
    27e2:	84 e0       	ldi	r24, 0x04	; 4
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	9a 83       	std	Y+2, r25	; 0x02
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	8e 81       	ldd	r24, Y+6	; 0x06
    27ec:	84 30       	cpi	r24, 0x04	; 4
    27ee:	10 f0       	brcs	.+4      	; 0x27f4 <_ZN13LiquidCrystal9setCursorEhh+0x26>
    27f0:	83 e0       	ldi	r24, 0x03	; 3
    27f2:	8e 83       	std	Y+6, r24	; 0x06
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	9c 81       	ldd	r25, Y+4	; 0x04
    27f8:	fc 01       	movw	r30, r24
    27fa:	93 89       	ldd	r25, Z+19	; 0x13
    27fc:	8e 81       	ldd	r24, Y+6	; 0x06
    27fe:	89 17       	cp	r24, r25
    2800:	30 f0       	brcs	.+12     	; 0x280e <_ZN13LiquidCrystal9setCursorEhh+0x40>
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	fc 01       	movw	r30, r24
    2808:	83 89       	ldd	r24, Z+19	; 0x13
    280a:	81 50       	subi	r24, 0x01	; 1
    280c:	8e 83       	std	Y+6, r24	; 0x06
    280e:	8e 81       	ldd	r24, Y+6	; 0x06
    2810:	88 2f       	mov	r24, r24
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	2b 81       	ldd	r18, Y+3	; 0x03
    2816:	3c 81       	ldd	r19, Y+4	; 0x04
    2818:	82 0f       	add	r24, r18
    281a:	93 1f       	adc	r25, r19
    281c:	44 96       	adiw	r24, 0x14	; 20
    281e:	fc 01       	movw	r30, r24
    2820:	90 81       	ld	r25, Z
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	89 0f       	add	r24, r25
    2826:	80 68       	ori	r24, 0x80	; 128
    2828:	28 2f       	mov	r18, r24
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	62 2f       	mov	r22, r18
    2830:	2c d0       	rcall	.+88     	; 0x288a <_ZN13LiquidCrystal7commandEh>
    2832:	00 00       	nop
    2834:	26 96       	adiw	r28, 0x06	; 6
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	08 95       	ret

00002846 <_ZN13LiquidCrystal7displayEv>:
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	1f 92       	push	r1
    284c:	1f 92       	push	r1
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	9a 83       	std	Y+2, r25	; 0x02
    2854:	89 83       	std	Y+1, r24	; 0x01
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	9a 81       	ldd	r25, Y+2	; 0x02
    285a:	fc 01       	movw	r30, r24
    285c:	80 89       	ldd	r24, Z+16	; 0x10
    285e:	28 2f       	mov	r18, r24
    2860:	24 60       	ori	r18, 0x04	; 4
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	9a 81       	ldd	r25, Y+2	; 0x02
    2866:	fc 01       	movw	r30, r24
    2868:	20 8b       	std	Z+16, r18	; 0x10
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	9a 81       	ldd	r25, Y+2	; 0x02
    286e:	fc 01       	movw	r30, r24
    2870:	80 89       	ldd	r24, Z+16	; 0x10
    2872:	28 2f       	mov	r18, r24
    2874:	28 60       	ori	r18, 0x08	; 8
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	9a 81       	ldd	r25, Y+2	; 0x02
    287a:	62 2f       	mov	r22, r18
    287c:	06 d0       	rcall	.+12     	; 0x288a <_ZN13LiquidCrystal7commandEh>
    287e:	00 00       	nop
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	08 95       	ret

0000288a <_ZN13LiquidCrystal7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
    288e:	00 d0       	rcall	.+0      	; 0x2890 <_ZN13LiquidCrystal7commandEh+0x6>
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	9a 83       	std	Y+2, r25	; 0x02
    2896:	89 83       	std	Y+1, r24	; 0x01
    2898:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	9a 81       	ldd	r25, Y+2	; 0x02
    289e:	40 e0       	ldi	r20, 0x00	; 0
    28a0:	6b 81       	ldd	r22, Y+3	; 0x03
    28a2:	1c d0       	rcall	.+56     	; 0x28dc <_ZN13LiquidCrystal4sendEhh>
}
    28a4:	00 00       	nop
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	08 95       	ret

000028b2 <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
    28b2:	cf 93       	push	r28
    28b4:	df 93       	push	r29
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <_ZN13LiquidCrystal5writeEh+0x6>
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	9a 83       	std	Y+2, r25	; 0x02
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	9a 81       	ldd	r25, Y+2	; 0x02
    28c6:	41 e0       	ldi	r20, 0x01	; 1
    28c8:	6b 81       	ldd	r22, Y+3	; 0x03
    28ca:	08 d0       	rcall	.+16     	; 0x28dc <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	90 e0       	ldi	r25, 0x00	; 0
}
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	df 91       	pop	r29
    28d8:	cf 91       	pop	r28
    28da:	08 95       	ret

000028dc <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    28dc:	cf 93       	push	r28
    28de:	df 93       	push	r29
    28e0:	00 d0       	rcall	.+0      	; 0x28e2 <_ZN13LiquidCrystal4sendEhh+0x6>
    28e2:	1f 92       	push	r1
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	9a 83       	std	Y+2, r25	; 0x02
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	6b 83       	std	Y+3, r22	; 0x03
    28ee:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
    28f4:	fc 01       	movw	r30, r24
    28f6:	84 81       	ldd	r24, Z+4	; 0x04
    28f8:	6c 81       	ldd	r22, Y+4	; 0x04
    28fa:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	9a 81       	ldd	r25, Y+2	; 0x02
    2902:	fc 01       	movw	r30, r24
    2904:	85 81       	ldd	r24, Z+5	; 0x05
    2906:	8f 3f       	cpi	r24, 0xFF	; 255
    2908:	39 f0       	breq	.+14     	; 0x2918 <_ZN13LiquidCrystal4sendEhh+0x3c>
    digitalWrite(_rw_pin, LOW);
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	fc 01       	movw	r30, r24
    2910:	85 81       	ldd	r24, Z+5	; 0x05
    2912:	60 e0       	ldi	r22, 0x00	; 0
    2914:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	9a 81       	ldd	r25, Y+2	; 0x02
    291c:	fc 01       	movw	r30, r24
    291e:	87 85       	ldd	r24, Z+15	; 0x0f
    2920:	88 2f       	mov	r24, r24
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	80 71       	andi	r24, 0x10	; 16
    2926:	99 27       	eor	r25, r25
    2928:	89 2b       	or	r24, r25
    292a:	29 f0       	breq	.+10     	; 0x2936 <_ZN13LiquidCrystal4sendEhh+0x5a>
    write8bits(value); 
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	9a 81       	ldd	r25, Y+2	; 0x02
    2930:	6b 81       	ldd	r22, Y+3	; 0x03
    2932:	85 d0       	rcall	.+266    	; 0x2a3e <_ZN13LiquidCrystal10write8bitsEh>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
    2934:	14 c0       	rjmp	.+40     	; 0x295e <_ZN13LiquidCrystal4sendEhh+0x82>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	88 2f       	mov	r24, r24
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	95 95       	asr	r25
    293e:	87 95       	ror	r24
    2940:	95 95       	asr	r25
    2942:	87 95       	ror	r24
    2944:	95 95       	asr	r25
    2946:	87 95       	ror	r24
    2948:	95 95       	asr	r25
    294a:	87 95       	ror	r24
    294c:	28 2f       	mov	r18, r24
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	62 2f       	mov	r22, r18
    2954:	3b d0       	rcall	.+118    	; 0x29cc <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	9a 81       	ldd	r25, Y+2	; 0x02
    295a:	6b 81       	ldd	r22, Y+3	; 0x03
    295c:	37 d0       	rcall	.+110    	; 0x29cc <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    295e:	00 00       	nop
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	08 95       	ret

0000296e <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
    296e:	cf 93       	push	r28
    2970:	df 93       	push	r29
    2972:	1f 92       	push	r1
    2974:	1f 92       	push	r1
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	9a 83       	std	Y+2, r25	; 0x02
    297c:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	9a 81       	ldd	r25, Y+2	; 0x02
    2982:	fc 01       	movw	r30, r24
    2984:	86 81       	ldd	r24, Z+6	; 0x06
    2986:	60 e0       	ldi	r22, 0x00	; 0
    2988:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <digitalWrite>
  delayMicroseconds(1);    
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	9a 81       	ldd	r25, Y+2	; 0x02
    2998:	fc 01       	movw	r30, r24
    299a:	86 81       	ldd	r24, Z+6	; 0x06
    299c:	61 e0       	ldi	r22, 0x01	; 1
    299e:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	9a 81       	ldd	r25, Y+2	; 0x02
    29ae:	fc 01       	movw	r30, r24
    29b0:	86 81       	ldd	r24, Z+6	; 0x06
    29b2:	60 e0       	ldi	r22, 0x00	; 0
    29b4:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    29b8:	84 e6       	ldi	r24, 0x64	; 100
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delayMicroseconds>
}
    29c0:	00 00       	nop
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	08 95       	ret

000029cc <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
    29cc:	cf 93       	push	r28
    29ce:	df 93       	push	r29
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <_ZN13LiquidCrystal10write4bitsEh+0x6>
    29d2:	1f 92       	push	r1
    29d4:	1f 92       	push	r1
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	9c 83       	std	Y+4, r25	; 0x04
    29dc:	8b 83       	std	Y+3, r24	; 0x03
    29de:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
    29e0:	1a 82       	std	Y+2, r1	; 0x02
    29e2:	19 82       	std	Y+1, r1	; 0x01
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	04 97       	sbiw	r24, 0x04	; 4
    29ea:	ec f4       	brge	.+58     	; 0x2a26 <_ZN13LiquidCrystal10write4bitsEh+0x5a>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	88 2f       	mov	r24, r24
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	09 80       	ldd	r0, Y+1	; 0x01
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <_ZN13LiquidCrystal10write4bitsEh+0x2e>
    29f6:	95 95       	asr	r25
    29f8:	87 95       	ror	r24
    29fa:	0a 94       	dec	r0
    29fc:	e2 f7       	brpl	.-8      	; 0x29f6 <_ZN13LiquidCrystal10write4bitsEh+0x2a>
    29fe:	48 2f       	mov	r20, r24
    2a00:	41 70       	andi	r20, 0x01	; 1
    2a02:	2b 81       	ldd	r18, Y+3	; 0x03
    2a04:	3c 81       	ldd	r19, Y+4	; 0x04
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	82 0f       	add	r24, r18
    2a0c:	93 1f       	adc	r25, r19
    2a0e:	07 96       	adiw	r24, 0x07	; 7
    2a10:	fc 01       	movw	r30, r24
    2a12:	80 81       	ld	r24, Z
    2a14:	64 2f       	mov	r22, r20
    2a16:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1e:	01 96       	adiw	r24, 0x01	; 1
    2a20:	9a 83       	std	Y+2, r25	; 0x02
    2a22:	89 83       	std	Y+1, r24	; 0x01
    2a24:	df cf       	rjmp	.-66     	; 0x29e4 <_ZN13LiquidCrystal10write4bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2a:	a1 df       	rcall	.-190    	; 0x296e <_ZN13LiquidCrystal11pulseEnableEv>
}
    2a2c:	00 00       	nop
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	08 95       	ret

00002a3e <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	00 d0       	rcall	.+0      	; 0x2a44 <_ZN13LiquidCrystal10write8bitsEh+0x6>
    2a44:	1f 92       	push	r1
    2a46:	1f 92       	push	r1
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
    2a4c:	9c 83       	std	Y+4, r25	; 0x04
    2a4e:	8b 83       	std	Y+3, r24	; 0x03
    2a50:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    2a52:	1a 82       	std	Y+2, r1	; 0x02
    2a54:	19 82       	std	Y+1, r1	; 0x01
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5a:	08 97       	sbiw	r24, 0x08	; 8
    2a5c:	ec f4       	brge	.+58     	; 0x2a98 <_ZN13LiquidCrystal10write8bitsEh+0x5a>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    2a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a60:	88 2f       	mov	r24, r24
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	09 80       	ldd	r0, Y+1	; 0x01
    2a66:	02 c0       	rjmp	.+4      	; 0x2a6c <_ZN13LiquidCrystal10write8bitsEh+0x2e>
    2a68:	95 95       	asr	r25
    2a6a:	87 95       	ror	r24
    2a6c:	0a 94       	dec	r0
    2a6e:	e2 f7       	brpl	.-8      	; 0x2a68 <_ZN13LiquidCrystal10write8bitsEh+0x2a>
    2a70:	48 2f       	mov	r20, r24
    2a72:	41 70       	andi	r20, 0x01	; 1
    2a74:	2b 81       	ldd	r18, Y+3	; 0x03
    2a76:	3c 81       	ldd	r19, Y+4	; 0x04
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	82 0f       	add	r24, r18
    2a7e:	93 1f       	adc	r25, r19
    2a80:	07 96       	adiw	r24, 0x07	; 7
    2a82:	fc 01       	movw	r30, r24
    2a84:	80 81       	ld	r24, Z
    2a86:	64 2f       	mov	r22, r20
    2a88:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	01 96       	adiw	r24, 0x01	; 1
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	89 83       	std	Y+1, r24	; 0x01
    2a96:	df cf       	rjmp	.-66     	; 0x2a56 <_ZN13LiquidCrystal10write8bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9c:	68 df       	rcall	.-304    	; 0x296e <_ZN13LiquidCrystal11pulseEnableEv>
}
    2a9e:	00 00       	nop
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	df 91       	pop	r29
    2aac:	cf 91       	pop	r28
    2aae:	08 95       	ret

00002ab0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
#define SERVO_MAX() (MAX_PULSE_WIDTH - this->max * 4)  // maximum value in uS for this servo

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
    2ab0:	cf 93       	push	r28
    2ab2:	df 93       	push	r29
    2ab4:	00 d0       	rcall	.+0      	; 0x2ab6 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
    2ab6:	1f 92       	push	r1
    2ab8:	1f 92       	push	r1
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	89 83       	std	Y+1, r24	; 0x01
    2ac0:	7b 83       	std	Y+3, r23	; 0x03
    2ac2:	6a 83       	std	Y+2, r22	; 0x02
    2ac4:	5d 83       	std	Y+5, r21	; 0x05
    2ac6:	4c 83       	std	Y+4, r20	; 0x04
  if( Channel[timer] < 0 )
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	88 2f       	mov	r24, r24
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	83 52       	subi	r24, 0x23	; 35
    2ad0:	9b 4f       	sbci	r25, 0xFB	; 251
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	80 81       	ld	r24, Z
    2ad6:	88 1f       	adc	r24, r24
    2ad8:	88 27       	eor	r24, r24
    2ada:	88 1f       	adc	r24, r24
    2adc:	88 23       	and	r24, r24
    2ade:	31 f0       	breq	.+12     	; 0x2aec <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
    2ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae4:	fc 01       	movw	r30, r24
    2ae6:	11 82       	std	Z+1, r1	; 0x01
    2ae8:	10 82       	st	Z, r1
    2aea:	72 c0       	rjmp	.+228    	; 0x2bd0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	c9 01       	movw	r24, r18
    2af4:	88 0f       	add	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	82 0f       	add	r24, r18
    2afa:	93 1f       	adc	r25, r19
    2afc:	88 0f       	add	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	9c 01       	movw	r18, r24
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	88 2f       	mov	r24, r24
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	83 52       	subi	r24, 0x23	; 35
    2b0e:	9b 4f       	sbci	r25, 0xFB	; 251
    2b10:	fc 01       	movw	r30, r24
    2b12:	80 81       	ld	r24, Z
    2b14:	08 2e       	mov	r0, r24
    2b16:	00 0c       	add	r0, r0
    2b18:	99 0b       	sbc	r25, r25
    2b1a:	28 0f       	add	r18, r24
    2b1c:	39 1f       	adc	r19, r25
    2b1e:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <ServoCount>
    2b22:	88 2f       	mov	r24, r24
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	28 17       	cp	r18, r24
    2b28:	39 07       	cpc	r19, r25
    2b2a:	4c f5       	brge	.+82     	; 0x2b7e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	28 2f       	mov	r18, r24
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	c9 01       	movw	r24, r18
    2b34:	88 0f       	add	r24, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	82 0f       	add	r24, r18
    2b3a:	93 1f       	adc	r25, r19
    2b3c:	88 0f       	add	r24, r24
    2b3e:	99 1f       	adc	r25, r25
    2b40:	88 0f       	add	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	9c 01       	movw	r18, r24
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	88 2f       	mov	r24, r24
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	83 52       	subi	r24, 0x23	; 35
    2b4e:	9b 4f       	sbci	r25, 0xFB	; 251
    2b50:	fc 01       	movw	r30, r24
    2b52:	80 81       	ld	r24, Z
    2b54:	08 2e       	mov	r0, r24
    2b56:	00 0c       	add	r0, r0
    2b58:	99 0b       	sbc	r25, r25
    2b5a:	28 0f       	add	r18, r24
    2b5c:	39 1f       	adc	r19, r25
    2b5e:	c9 01       	movw	r24, r18
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	82 0f       	add	r24, r18
    2b66:	93 1f       	adc	r25, r19
    2b68:	83 5b       	subi	r24, 0xB3	; 179
    2b6a:	9b 4f       	sbci	r25, 0xFB	; 251
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	80 81       	ld	r24, Z
    2b70:	86 fb       	bst	r24, 6
    2b72:	88 27       	eor	r24, r24
    2b74:	80 f9       	bld	r24, 0
    2b76:	81 30       	cpi	r24, 0x01	; 1
    2b78:	11 f4       	brne	.+4      	; 0x2b7e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	01 c0       	rjmp	.+2      	; 0x2b80 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd0>
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	88 23       	and	r24, r24
    2b82:	31 f1       	breq	.+76     	; 0x2bd0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	c9 01       	movw	r24, r18
    2b8c:	88 0f       	add	r24, r24
    2b8e:	99 1f       	adc	r25, r25
    2b90:	82 0f       	add	r24, r18
    2b92:	93 1f       	adc	r25, r19
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	88 0f       	add	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	9c 01       	movw	r18, r24
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	88 2f       	mov	r24, r24
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	83 52       	subi	r24, 0x23	; 35
    2ba6:	9b 4f       	sbci	r25, 0xFB	; 251
    2ba8:	fc 01       	movw	r30, r24
    2baa:	80 81       	ld	r24, Z
    2bac:	08 2e       	mov	r0, r24
    2bae:	00 0c       	add	r0, r0
    2bb0:	99 0b       	sbc	r25, r25
    2bb2:	28 0f       	add	r18, r24
    2bb4:	39 1f       	adc	r19, r25
    2bb6:	c9 01       	movw	r24, r18
    2bb8:	88 0f       	add	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	82 0f       	add	r24, r18
    2bbe:	93 1f       	adc	r25, r19
    2bc0:	83 5b       	subi	r24, 0xB3	; 179
    2bc2:	9b 4f       	sbci	r25, 0xFB	; 251
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	80 81       	ld	r24, Z
    2bc8:	8f 73       	andi	r24, 0x3F	; 63
    2bca:	60 e0       	ldi	r22, 0x00	; 0
    2bcc:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <digitalWrite>
  }

  Channel[timer]++;    // increment to the next channel
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	88 2f       	mov	r24, r24
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	9c 01       	movw	r18, r24
    2bd8:	23 52       	subi	r18, 0x23	; 35
    2bda:	3b 4f       	sbci	r19, 0xFB	; 251
    2bdc:	f9 01       	movw	r30, r18
    2bde:	20 81       	ld	r18, Z
    2be0:	2f 5f       	subi	r18, 0xFF	; 255
    2be2:	83 52       	subi	r24, 0x23	; 35
    2be4:	9b 4f       	sbci	r25, 0xFB	; 251
    2be6:	fc 01       	movw	r30, r24
    2be8:	20 83       	st	Z, r18
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	c9 01       	movw	r24, r18
    2bf2:	88 0f       	add	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	82 0f       	add	r24, r18
    2bf8:	93 1f       	adc	r25, r19
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	9c 01       	movw	r18, r24
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	88 2f       	mov	r24, r24
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	83 52       	subi	r24, 0x23	; 35
    2c0c:	9b 4f       	sbci	r25, 0xFB	; 251
    2c0e:	fc 01       	movw	r30, r24
    2c10:	80 81       	ld	r24, Z
    2c12:	08 2e       	mov	r0, r24
    2c14:	00 0c       	add	r0, r0
    2c16:	99 0b       	sbc	r25, r25
    2c18:	28 0f       	add	r18, r24
    2c1a:	39 1f       	adc	r19, r25
    2c1c:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <ServoCount>
    2c20:	88 2f       	mov	r24, r24
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	28 17       	cp	r18, r24
    2c26:	39 07       	cpc	r19, r25
    2c28:	5c f4       	brge	.+22     	; 0x2c40 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	88 2f       	mov	r24, r24
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	83 52       	subi	r24, 0x23	; 35
    2c32:	9b 4f       	sbci	r25, 0xFB	; 251
    2c34:	fc 01       	movw	r30, r24
    2c36:	80 81       	ld	r24, Z
    2c38:	8c 30       	cpi	r24, 0x0C	; 12
    2c3a:	14 f4       	brge	.+4      	; 0x2c40 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	01 c0       	rjmp	.+2      	; 0x2c42 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x192>
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	88 23       	and	r24, r24
    2c44:	09 f4       	brne	.+2      	; 0x2c48 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x198>
    2c46:	7e c0       	rjmp	.+252    	; 0x2d44 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x294>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	40 81       	ld	r20, Z
    2c50:	51 81       	ldd	r21, Z+1	; 0x01
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	28 2f       	mov	r18, r24
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	c9 01       	movw	r24, r18
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	82 0f       	add	r24, r18
    2c60:	93 1f       	adc	r25, r19
    2c62:	88 0f       	add	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	88 0f       	add	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	9c 01       	movw	r18, r24
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	88 2f       	mov	r24, r24
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	83 52       	subi	r24, 0x23	; 35
    2c74:	9b 4f       	sbci	r25, 0xFB	; 251
    2c76:	fc 01       	movw	r30, r24
    2c78:	80 81       	ld	r24, Z
    2c7a:	08 2e       	mov	r0, r24
    2c7c:	00 0c       	add	r0, r0
    2c7e:	99 0b       	sbc	r25, r25
    2c80:	28 0f       	add	r18, r24
    2c82:	39 1f       	adc	r19, r25
    2c84:	c9 01       	movw	r24, r18
    2c86:	88 0f       	add	r24, r24
    2c88:	99 1f       	adc	r25, r25
    2c8a:	82 0f       	add	r24, r18
    2c8c:	93 1f       	adc	r25, r19
    2c8e:	82 5b       	subi	r24, 0xB2	; 178
    2c90:	9b 4f       	sbci	r25, 0xFB	; 251
    2c92:	fc 01       	movw	r30, r24
    2c94:	80 81       	ld	r24, Z
    2c96:	91 81       	ldd	r25, Z+1	; 0x01
    2c98:	9a 01       	movw	r18, r20
    2c9a:	28 0f       	add	r18, r24
    2c9c:	39 1f       	adc	r19, r25
    2c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	31 83       	std	Z+1, r19	; 0x01
    2ca6:	20 83       	st	Z, r18
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	28 2f       	mov	r18, r24
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	c9 01       	movw	r24, r18
    2cb0:	88 0f       	add	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	82 0f       	add	r24, r18
    2cb6:	93 1f       	adc	r25, r19
    2cb8:	88 0f       	add	r24, r24
    2cba:	99 1f       	adc	r25, r25
    2cbc:	88 0f       	add	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	9c 01       	movw	r18, r24
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	88 2f       	mov	r24, r24
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	83 52       	subi	r24, 0x23	; 35
    2cca:	9b 4f       	sbci	r25, 0xFB	; 251
    2ccc:	fc 01       	movw	r30, r24
    2cce:	80 81       	ld	r24, Z
    2cd0:	08 2e       	mov	r0, r24
    2cd2:	00 0c       	add	r0, r0
    2cd4:	99 0b       	sbc	r25, r25
    2cd6:	28 0f       	add	r18, r24
    2cd8:	39 1f       	adc	r19, r25
    2cda:	c9 01       	movw	r24, r18
    2cdc:	88 0f       	add	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	82 0f       	add	r24, r18
    2ce2:	93 1f       	adc	r25, r19
    2ce4:	83 5b       	subi	r24, 0xB3	; 179
    2ce6:	9b 4f       	sbci	r25, 0xFB	; 251
    2ce8:	fc 01       	movw	r30, r24
    2cea:	80 81       	ld	r24, Z
    2cec:	86 fb       	bst	r24, 6
    2cee:	88 27       	eor	r24, r24
    2cf0:	80 f9       	bld	r24, 0
    2cf2:	88 23       	and	r24, r24
    2cf4:	09 f4       	brne	.+2      	; 0x2cf8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x248>
    2cf6:	50 c0       	rjmp	.+160    	; 0x2d98 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2e8>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	28 2f       	mov	r18, r24
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	c9 01       	movw	r24, r18
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	82 0f       	add	r24, r18
    2d06:	93 1f       	adc	r25, r19
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	88 0f       	add	r24, r24
    2d0e:	99 1f       	adc	r25, r25
    2d10:	9c 01       	movw	r18, r24
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	88 2f       	mov	r24, r24
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	83 52       	subi	r24, 0x23	; 35
    2d1a:	9b 4f       	sbci	r25, 0xFB	; 251
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	80 81       	ld	r24, Z
    2d20:	08 2e       	mov	r0, r24
    2d22:	00 0c       	add	r0, r0
    2d24:	99 0b       	sbc	r25, r25
    2d26:	28 0f       	add	r18, r24
    2d28:	39 1f       	adc	r19, r25
    2d2a:	c9 01       	movw	r24, r18
    2d2c:	88 0f       	add	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	82 0f       	add	r24, r18
    2d32:	93 1f       	adc	r25, r19
    2d34:	83 5b       	subi	r24, 0xB3	; 179
    2d36:	9b 4f       	sbci	r25, 0xFB	; 251
    2d38:	fc 01       	movw	r30, r24
    2d3a:	80 81       	ld	r24, Z
    2d3c:	8f 73       	andi	r24, 0x3F	; 63
    2d3e:	61 e0       	ldi	r22, 0x01	; 1
    2d40:	81 d7       	rcall	.+3842   	; 0x3c44 <digitalWrite>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
    2d42:	2a c0       	rjmp	.+84     	; 0x2d98 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2e8>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	9b 81       	ldd	r25, Y+3	; 0x03
    2d48:	fc 01       	movw	r30, r24
    2d4a:	80 81       	ld	r24, Z
    2d4c:	91 81       	ldd	r25, Z+1	; 0x01
    2d4e:	04 96       	adiw	r24, 0x04	; 4
    2d50:	21 e0       	ldi	r18, 0x01	; 1
    2d52:	80 34       	cpi	r24, 0x40	; 64
    2d54:	9c 49       	sbci	r25, 0x9C	; 156
    2d56:	08 f0       	brcs	.+2      	; 0x2d5a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2aa>
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	22 23       	and	r18, r18
    2d5c:	41 f0       	breq	.+16     	; 0x2d6e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2be>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    2d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d60:	9d 81       	ldd	r25, Y+5	; 0x05
    2d62:	20 e4       	ldi	r18, 0x40	; 64
    2d64:	3c e9       	ldi	r19, 0x9C	; 156
    2d66:	fc 01       	movw	r30, r24
    2d68:	31 83       	std	Z+1, r19	; 0x01
    2d6a:	20 83       	st	Z, r18
    2d6c:	0d c0       	rjmp	.+26     	; 0x2d88 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2d8>
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	9b 81       	ldd	r25, Y+3	; 0x03
    2d72:	fc 01       	movw	r30, r24
    2d74:	80 81       	ld	r24, Z
    2d76:	91 81       	ldd	r25, Z+1	; 0x01
    2d78:	9c 01       	movw	r18, r24
    2d7a:	2c 5f       	subi	r18, 0xFC	; 252
    2d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d80:	9d 81       	ldd	r25, Y+5	; 0x05
    2d82:	fc 01       	movw	r30, r24
    2d84:	31 83       	std	Z+1, r19	; 0x01
    2d86:	20 83       	st	Z, r18
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	88 2f       	mov	r24, r24
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	83 52       	subi	r24, 0x23	; 35
    2d90:	9b 4f       	sbci	r25, 0xFB	; 251
    2d92:	2f ef       	ldi	r18, 0xFF	; 255
    2d94:	fc 01       	movw	r30, r24
    2d96:	20 83       	st	Z, r18
  }
}
    2d98:	00 00       	nop
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	df 91       	pop	r29
    2da6:	cf 91       	pop	r28
    2da8:	08 95       	ret

00002daa <__vector_17>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
    2daa:	1f 92       	push	r1
    2dac:	0f 92       	push	r0
    2dae:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    2db2:	0f 92       	push	r0
    2db4:	11 24       	eor	r1, r1
    2db6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    2dba:	0f 92       	push	r0
    2dbc:	2f 93       	push	r18
    2dbe:	3f 93       	push	r19
    2dc0:	4f 93       	push	r20
    2dc2:	5f 93       	push	r21
    2dc4:	6f 93       	push	r22
    2dc6:	7f 93       	push	r23
    2dc8:	8f 93       	push	r24
    2dca:	9f 93       	push	r25
    2dcc:	af 93       	push	r26
    2dce:	bf 93       	push	r27
    2dd0:	ef 93       	push	r30
    2dd2:	ff 93       	push	r31
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
  handle_interrupts(_timer1, &TCNT1, &OCR1A);
    2ddc:	48 e8       	ldi	r20, 0x88	; 136
    2dde:	50 e0       	ldi	r21, 0x00	; 0
    2de0:	64 e8       	ldi	r22, 0x84	; 132
    2de2:	70 e0       	ldi	r23, 0x00	; 0
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	64 de       	rcall	.-824    	; 0x2ab0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
    2de8:	00 00       	nop
    2dea:	df 91       	pop	r29
    2dec:	cf 91       	pop	r28
    2dee:	ff 91       	pop	r31
    2df0:	ef 91       	pop	r30
    2df2:	bf 91       	pop	r27
    2df4:	af 91       	pop	r26
    2df6:	9f 91       	pop	r25
    2df8:	8f 91       	pop	r24
    2dfa:	7f 91       	pop	r23
    2dfc:	6f 91       	pop	r22
    2dfe:	5f 91       	pop	r21
    2e00:	4f 91       	pop	r20
    2e02:	3f 91       	pop	r19
    2e04:	2f 91       	pop	r18
    2e06:	0f 90       	pop	r0
    2e08:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    2e0c:	0f 90       	pop	r0
    2e0e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    2e12:	0f 90       	pop	r0
    2e14:	1f 90       	pop	r1
    2e16:	18 95       	reti

00002e18 <__vector_32>:
#endif

#if defined(_useTimer3)
SIGNAL (TIMER3_COMPA_vect)
{
    2e18:	1f 92       	push	r1
    2e1a:	0f 92       	push	r0
    2e1c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    2e20:	0f 92       	push	r0
    2e22:	11 24       	eor	r1, r1
    2e24:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    2e28:	0f 92       	push	r0
    2e2a:	2f 93       	push	r18
    2e2c:	3f 93       	push	r19
    2e2e:	4f 93       	push	r20
    2e30:	5f 93       	push	r21
    2e32:	6f 93       	push	r22
    2e34:	7f 93       	push	r23
    2e36:	8f 93       	push	r24
    2e38:	9f 93       	push	r25
    2e3a:	af 93       	push	r26
    2e3c:	bf 93       	push	r27
    2e3e:	ef 93       	push	r30
    2e40:	ff 93       	push	r31
    2e42:	cf 93       	push	r28
    2e44:	df 93       	push	r29
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
  handle_interrupts(_timer3, &TCNT3, &OCR3A);
    2e4a:	48 e9       	ldi	r20, 0x98	; 152
    2e4c:	50 e0       	ldi	r21, 0x00	; 0
    2e4e:	64 e9       	ldi	r22, 0x94	; 148
    2e50:	70 e0       	ldi	r23, 0x00	; 0
    2e52:	82 e0       	ldi	r24, 0x02	; 2
    2e54:	2d de       	rcall	.-934    	; 0x2ab0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
    2e56:	00 00       	nop
    2e58:	df 91       	pop	r29
    2e5a:	cf 91       	pop	r28
    2e5c:	ff 91       	pop	r31
    2e5e:	ef 91       	pop	r30
    2e60:	bf 91       	pop	r27
    2e62:	af 91       	pop	r26
    2e64:	9f 91       	pop	r25
    2e66:	8f 91       	pop	r24
    2e68:	7f 91       	pop	r23
    2e6a:	6f 91       	pop	r22
    2e6c:	5f 91       	pop	r21
    2e6e:	4f 91       	pop	r20
    2e70:	3f 91       	pop	r19
    2e72:	2f 91       	pop	r18
    2e74:	0f 90       	pop	r0
    2e76:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    2e7a:	0f 90       	pop	r0
    2e7c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    2e80:	0f 90       	pop	r0
    2e82:	1f 90       	pop	r1
    2e84:	18 95       	reti

00002e86 <__vector_42>:
#endif

#if defined(_useTimer4)
SIGNAL (TIMER4_COMPA_vect)
{
    2e86:	1f 92       	push	r1
    2e88:	0f 92       	push	r0
    2e8a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    2e8e:	0f 92       	push	r0
    2e90:	11 24       	eor	r1, r1
    2e92:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    2e96:	0f 92       	push	r0
    2e98:	2f 93       	push	r18
    2e9a:	3f 93       	push	r19
    2e9c:	4f 93       	push	r20
    2e9e:	5f 93       	push	r21
    2ea0:	6f 93       	push	r22
    2ea2:	7f 93       	push	r23
    2ea4:	8f 93       	push	r24
    2ea6:	9f 93       	push	r25
    2ea8:	af 93       	push	r26
    2eaa:	bf 93       	push	r27
    2eac:	ef 93       	push	r30
    2eae:	ff 93       	push	r31
    2eb0:	cf 93       	push	r28
    2eb2:	df 93       	push	r29
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
  handle_interrupts(_timer4, &TCNT4, &OCR4A);
    2eb8:	48 ea       	ldi	r20, 0xA8	; 168
    2eba:	50 e0       	ldi	r21, 0x00	; 0
    2ebc:	64 ea       	ldi	r22, 0xA4	; 164
    2ebe:	70 e0       	ldi	r23, 0x00	; 0
    2ec0:	83 e0       	ldi	r24, 0x03	; 3
    2ec2:	f6 dd       	rcall	.-1044   	; 0x2ab0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
    2ec4:	00 00       	nop
    2ec6:	df 91       	pop	r29
    2ec8:	cf 91       	pop	r28
    2eca:	ff 91       	pop	r31
    2ecc:	ef 91       	pop	r30
    2ece:	bf 91       	pop	r27
    2ed0:	af 91       	pop	r26
    2ed2:	9f 91       	pop	r25
    2ed4:	8f 91       	pop	r24
    2ed6:	7f 91       	pop	r23
    2ed8:	6f 91       	pop	r22
    2eda:	5f 91       	pop	r21
    2edc:	4f 91       	pop	r20
    2ede:	3f 91       	pop	r19
    2ee0:	2f 91       	pop	r18
    2ee2:	0f 90       	pop	r0
    2ee4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    2ee8:	0f 90       	pop	r0
    2eea:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    2eee:	0f 90       	pop	r0
    2ef0:	1f 90       	pop	r1
    2ef2:	18 95       	reti

00002ef4 <__vector_47>:
#endif

#if defined(_useTimer5)
SIGNAL (TIMER5_COMPA_vect)
{
    2ef4:	1f 92       	push	r1
    2ef6:	0f 92       	push	r0
    2ef8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    2efc:	0f 92       	push	r0
    2efe:	11 24       	eor	r1, r1
    2f00:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    2f04:	0f 92       	push	r0
    2f06:	2f 93       	push	r18
    2f08:	3f 93       	push	r19
    2f0a:	4f 93       	push	r20
    2f0c:	5f 93       	push	r21
    2f0e:	6f 93       	push	r22
    2f10:	7f 93       	push	r23
    2f12:	8f 93       	push	r24
    2f14:	9f 93       	push	r25
    2f16:	af 93       	push	r26
    2f18:	bf 93       	push	r27
    2f1a:	ef 93       	push	r30
    2f1c:	ff 93       	push	r31
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
  handle_interrupts(_timer5, &TCNT5, &OCR5A);
    2f26:	48 e2       	ldi	r20, 0x28	; 40
    2f28:	51 e0       	ldi	r21, 0x01	; 1
    2f2a:	64 e2       	ldi	r22, 0x24	; 36
    2f2c:	71 e0       	ldi	r23, 0x01	; 1
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	bf dd       	rcall	.-1154   	; 0x2ab0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
    2f32:	00 00       	nop
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	ff 91       	pop	r31
    2f3a:	ef 91       	pop	r30
    2f3c:	bf 91       	pop	r27
    2f3e:	af 91       	pop	r26
    2f40:	9f 91       	pop	r25
    2f42:	8f 91       	pop	r24
    2f44:	7f 91       	pop	r23
    2f46:	6f 91       	pop	r22
    2f48:	5f 91       	pop	r21
    2f4a:	4f 91       	pop	r20
    2f4c:	3f 91       	pop	r19
    2f4e:	2f 91       	pop	r18
    2f50:	0f 90       	pop	r0
    2f52:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    2f56:	0f 90       	pop	r0
    2f58:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    2f5c:	0f 90       	pop	r0
    2f5e:	1f 90       	pop	r1
    2f60:	18 95       	reti

00002f62 <_Z13calculateTempi>:
#include "TemperatureControl.h"

float calculateTemp(int sensorValue)
{
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	2e 97       	sbiw	r28, 0x0e	; 14
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	9e 87       	std	Y+14, r25	; 0x0e
    2f78:	8d 87       	std	Y+13, r24	; 0x0d
	float temp = log(10000.0 * (1024.0 / sensorValue - 1));
    2f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7e:	09 2e       	mov	r0, r25
    2f80:	00 0c       	add	r0, r0
    2f82:	aa 0b       	sbc	r26, r26
    2f84:	bb 0b       	sbc	r27, r27
    2f86:	bc 01       	movw	r22, r24
    2f88:	cd 01       	movw	r24, r26
    2f8a:	b7 d1       	rcall	.+878    	; 0x32fa <__floatsisf>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	9c 01       	movw	r18, r24
    2f92:	ad 01       	movw	r20, r26
    2f94:	60 e0       	ldi	r22, 0x00	; 0
    2f96:	70 e0       	ldi	r23, 0x00	; 0
    2f98:	80 e8       	ldi	r24, 0x80	; 128
    2f9a:	94 e4       	ldi	r25, 0x44	; 68
    2f9c:	13 d1       	rcall	.+550    	; 0x31c4 <__divsf3>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	40 e8       	ldi	r20, 0x80	; 128
    2fa8:	5f e3       	ldi	r21, 0x3F	; 63
    2faa:	bc 01       	movw	r22, r24
    2fac:	cd 01       	movw	r24, r26
    2fae:	a5 d0       	rcall	.+330    	; 0x30fa <__subsf3>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e4       	ldi	r19, 0x40	; 64
    2fb8:	4c e1       	ldi	r20, 0x1C	; 28
    2fba:	56 e4       	ldi	r21, 0x46	; 70
    2fbc:	bc 01       	movw	r22, r24
    2fbe:	cd 01       	movw	r24, r26
    2fc0:	6d d2       	rcall	.+1242   	; 0x349c <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	28 d2       	rcall	.+1104   	; 0x341c <log>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	89 83       	std	Y+1, r24	; 0x01
    2fd2:	9a 83       	std	Y+2, r25	; 0x02
    2fd4:	ab 83       	std	Y+3, r26	; 0x03
    2fd6:	bc 83       	std	Y+4, r27	; 0x04
	float tempK = 1/(0.001129148 + (0.000234125 + (0.0000000876741 * temp * temp)) * temp);
    2fd8:	29 e5       	ldi	r18, 0x59	; 89
    2fda:	37 e4       	ldi	r19, 0x47	; 71
    2fdc:	4c eb       	ldi	r20, 0xBC	; 188
    2fde:	53 e3       	ldi	r21, 0x33	; 51
    2fe0:	69 81       	ldd	r22, Y+1	; 0x01
    2fe2:	7a 81       	ldd	r23, Y+2	; 0x02
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe8:	59 d2       	rcall	.+1202   	; 0x349c <__mulsf3>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	29 81       	ldd	r18, Y+1	; 0x01
    2ff0:	3a 81       	ldd	r19, Y+2	; 0x02
    2ff2:	4b 81       	ldd	r20, Y+3	; 0x03
    2ff4:	5c 81       	ldd	r21, Y+4	; 0x04
    2ff6:	bc 01       	movw	r22, r24
    2ff8:	cd 01       	movw	r24, r26
    2ffa:	50 d2       	rcall	.+1184   	; 0x349c <__mulsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	23 e7       	ldi	r18, 0x73	; 115
    3002:	3f e7       	ldi	r19, 0x7F	; 127
    3004:	45 e7       	ldi	r20, 0x75	; 117
    3006:	59 e3       	ldi	r21, 0x39	; 57
    3008:	bc 01       	movw	r22, r24
    300a:	cd 01       	movw	r24, r26
    300c:	77 d0       	rcall	.+238    	; 0x30fc <__addsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	29 81       	ldd	r18, Y+1	; 0x01
    3014:	3a 81       	ldd	r19, Y+2	; 0x02
    3016:	4b 81       	ldd	r20, Y+3	; 0x03
    3018:	5c 81       	ldd	r21, Y+4	; 0x04
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	3e d2       	rcall	.+1148   	; 0x349c <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	2b ee       	ldi	r18, 0xEB	; 235
    3026:	3f ef       	ldi	r19, 0xFF	; 255
    3028:	43 e9       	ldi	r20, 0x93	; 147
    302a:	5a e3       	ldi	r21, 0x3A	; 58
    302c:	bc 01       	movw	r22, r24
    302e:	cd 01       	movw	r24, r26
    3030:	65 d0       	rcall	.+202    	; 0x30fc <__addsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	9c 01       	movw	r18, r24
    3038:	ad 01       	movw	r20, r26
    303a:	60 e0       	ldi	r22, 0x00	; 0
    303c:	70 e0       	ldi	r23, 0x00	; 0
    303e:	80 e8       	ldi	r24, 0x80	; 128
    3040:	9f e3       	ldi	r25, 0x3F	; 63
    3042:	c0 d0       	rcall	.+384    	; 0x31c4 <__divsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	8d 83       	std	Y+5, r24	; 0x05
    304a:	9e 83       	std	Y+6, r25	; 0x06
    304c:	af 83       	std	Y+7, r26	; 0x07
    304e:	b8 87       	std	Y+8, r27	; 0x08
	float tempC = tempK - 273.15;
    3050:	23 e3       	ldi	r18, 0x33	; 51
    3052:	33 e9       	ldi	r19, 0x93	; 147
    3054:	48 e8       	ldi	r20, 0x88	; 136
    3056:	53 e4       	ldi	r21, 0x43	; 67
    3058:	6d 81       	ldd	r22, Y+5	; 0x05
    305a:	7e 81       	ldd	r23, Y+6	; 0x06
    305c:	8f 81       	ldd	r24, Y+7	; 0x07
    305e:	98 85       	ldd	r25, Y+8	; 0x08
    3060:	4c d0       	rcall	.+152    	; 0x30fa <__subsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	89 87       	std	Y+9, r24	; 0x09
    3068:	9a 87       	std	Y+10, r25	; 0x0a
    306a:	ab 87       	std	Y+11, r26	; 0x0b
    306c:	bc 87       	std	Y+12, r27	; 0x0c
    306e:	89 85       	ldd	r24, Y+9	; 0x09
	return tempC;
    3070:	9a 85       	ldd	r25, Y+10	; 0x0a
    3072:	ab 85       	ldd	r26, Y+11	; 0x0b
    3074:	bc 85       	ldd	r27, Y+12	; 0x0c
    3076:	bc 01       	movw	r22, r24
}
    3078:	cd 01       	movw	r24, r26
    307a:	2e 96       	adiw	r28, 0x0e	; 14
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	f8 94       	cli
    3080:	de bf       	out	0x3e, r29	; 62
    3082:	0f be       	out	0x3f, r0	; 63
    3084:	cd bf       	out	0x3d, r28	; 61
    3086:	df 91       	pop	r29
    3088:	cf 91       	pop	r28
    308a:	08 95       	ret

0000308c <_Z32GetCurrentTemperatureAndHumidityv>:
    308c:	cf 93       	push	r28
void GetCurrentTemperatureAndHumidity()
{
    308e:	df 93       	push	r29
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
	currentTemperaturesDining = calculateTemp(analogRead(A11));
    3094:	81 e4       	ldi	r24, 0x41	; 65
    3096:	20 d5       	rcall	.+2624   	; 0x3ad8 <analogRead>
    3098:	64 df       	rcall	.-312    	; 0x2f62 <_Z13calculateTempi>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	bc 01       	movw	r22, r24
    30a0:	cd 01       	movw	r24, r26
    30a2:	f8 d0       	rcall	.+496    	; 0x3294 <__fixsfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <currentTemperaturesDining+0x1>
    30ac:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <currentTemperaturesDining>
	currentTemperaturesKids = dht.readTemperature();
    30b0:	40 e0       	ldi	r20, 0x00	; 0
    30b2:	60 e0       	ldi	r22, 0x00	; 0
    30b4:	8a e3       	ldi	r24, 0x3A	; 58
    30b6:	94 e0       	ldi	r25, 0x04	; 4
    30b8:	0e 94 57 06 	call	0xcae	; 0xcae <_ZN3DHT15readTemperatureEbb>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	bc 01       	movw	r22, r24
    30c2:	cd 01       	movw	r24, r26
    30c4:	e7 d0       	rcall	.+462    	; 0x3294 <__fixsfsi>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <currentTemperaturesKids+0x1>
    30ce:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <currentTemperaturesKids>
	currentHumidity = dht.readHumidity();
    30d2:	60 e0       	ldi	r22, 0x00	; 0
    30d4:	8a e3       	ldi	r24, 0x3A	; 58
    30d6:	94 e0       	ldi	r25, 0x04	; 4
    30d8:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <_ZN3DHT12readHumidityEb>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	bc 01       	movw	r22, r24
    30e2:	cd 01       	movw	r24, r26
    30e4:	d7 d0       	rcall	.+430    	; 0x3294 <__fixsfsi>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	90 93 bc 03 	sts	0x03BC, r25	; 0x8003bc <currentHumidity+0x1>
    30ee:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <currentHumidity>
    30f2:	00 00       	nop
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	08 95       	ret

000030fa <__subsf3>:
    30fa:	50 58       	subi	r21, 0x80	; 128

000030fc <__addsf3>:
    30fc:	bb 27       	eor	r27, r27
    30fe:	aa 27       	eor	r26, r26
    3100:	0e d0       	rcall	.+28     	; 0x311e <__addsf3x>
    3102:	4d c1       	rjmp	.+666    	; 0x339e <__fp_round>
    3104:	3e d1       	rcall	.+636    	; 0x3382 <__fp_pscA>
    3106:	30 f0       	brcs	.+12     	; 0x3114 <__addsf3+0x18>
    3108:	43 d1       	rcall	.+646    	; 0x3390 <__fp_pscB>
    310a:	20 f0       	brcs	.+8      	; 0x3114 <__addsf3+0x18>
    310c:	31 f4       	brne	.+12     	; 0x311a <__addsf3+0x1e>
    310e:	9f 3f       	cpi	r25, 0xFF	; 255
    3110:	11 f4       	brne	.+4      	; 0x3116 <__addsf3+0x1a>
    3112:	1e f4       	brtc	.+6      	; 0x311a <__addsf3+0x1e>
    3114:	33 c1       	rjmp	.+614    	; 0x337c <__fp_nan>
    3116:	0e f4       	brtc	.+2      	; 0x311a <__addsf3+0x1e>
    3118:	e0 95       	com	r30
    311a:	e7 fb       	bst	r30, 7
    311c:	29 c1       	rjmp	.+594    	; 0x3370 <__fp_inf>

0000311e <__addsf3x>:
    311e:	e9 2f       	mov	r30, r25
    3120:	4f d1       	rcall	.+670    	; 0x33c0 <__fp_split3>
    3122:	80 f3       	brcs	.-32     	; 0x3104 <__addsf3+0x8>
    3124:	ba 17       	cp	r27, r26
    3126:	62 07       	cpc	r22, r18
    3128:	73 07       	cpc	r23, r19
    312a:	84 07       	cpc	r24, r20
    312c:	95 07       	cpc	r25, r21
    312e:	18 f0       	brcs	.+6      	; 0x3136 <__addsf3x+0x18>
    3130:	71 f4       	brne	.+28     	; 0x314e <__addsf3x+0x30>
    3132:	9e f5       	brtc	.+102    	; 0x319a <__addsf3x+0x7c>
    3134:	67 c1       	rjmp	.+718    	; 0x3404 <__fp_zero>
    3136:	0e f4       	brtc	.+2      	; 0x313a <__addsf3x+0x1c>
    3138:	e0 95       	com	r30
    313a:	0b 2e       	mov	r0, r27
    313c:	ba 2f       	mov	r27, r26
    313e:	a0 2d       	mov	r26, r0
    3140:	0b 01       	movw	r0, r22
    3142:	b9 01       	movw	r22, r18
    3144:	90 01       	movw	r18, r0
    3146:	0c 01       	movw	r0, r24
    3148:	ca 01       	movw	r24, r20
    314a:	a0 01       	movw	r20, r0
    314c:	11 24       	eor	r1, r1
    314e:	ff 27       	eor	r31, r31
    3150:	59 1b       	sub	r21, r25
    3152:	99 f0       	breq	.+38     	; 0x317a <__addsf3x+0x5c>
    3154:	59 3f       	cpi	r21, 0xF9	; 249
    3156:	50 f4       	brcc	.+20     	; 0x316c <__addsf3x+0x4e>
    3158:	50 3e       	cpi	r21, 0xE0	; 224
    315a:	68 f1       	brcs	.+90     	; 0x31b6 <__addsf3x+0x98>
    315c:	1a 16       	cp	r1, r26
    315e:	f0 40       	sbci	r31, 0x00	; 0
    3160:	a2 2f       	mov	r26, r18
    3162:	23 2f       	mov	r18, r19
    3164:	34 2f       	mov	r19, r20
    3166:	44 27       	eor	r20, r20
    3168:	58 5f       	subi	r21, 0xF8	; 248
    316a:	f3 cf       	rjmp	.-26     	; 0x3152 <__addsf3x+0x34>
    316c:	46 95       	lsr	r20
    316e:	37 95       	ror	r19
    3170:	27 95       	ror	r18
    3172:	a7 95       	ror	r26
    3174:	f0 40       	sbci	r31, 0x00	; 0
    3176:	53 95       	inc	r21
    3178:	c9 f7       	brne	.-14     	; 0x316c <__addsf3x+0x4e>
    317a:	7e f4       	brtc	.+30     	; 0x319a <__addsf3x+0x7c>
    317c:	1f 16       	cp	r1, r31
    317e:	ba 0b       	sbc	r27, r26
    3180:	62 0b       	sbc	r22, r18
    3182:	73 0b       	sbc	r23, r19
    3184:	84 0b       	sbc	r24, r20
    3186:	ba f0       	brmi	.+46     	; 0x31b6 <__addsf3x+0x98>
    3188:	91 50       	subi	r25, 0x01	; 1
    318a:	a1 f0       	breq	.+40     	; 0x31b4 <__addsf3x+0x96>
    318c:	ff 0f       	add	r31, r31
    318e:	bb 1f       	adc	r27, r27
    3190:	66 1f       	adc	r22, r22
    3192:	77 1f       	adc	r23, r23
    3194:	88 1f       	adc	r24, r24
    3196:	c2 f7       	brpl	.-16     	; 0x3188 <__addsf3x+0x6a>
    3198:	0e c0       	rjmp	.+28     	; 0x31b6 <__addsf3x+0x98>
    319a:	ba 0f       	add	r27, r26
    319c:	62 1f       	adc	r22, r18
    319e:	73 1f       	adc	r23, r19
    31a0:	84 1f       	adc	r24, r20
    31a2:	48 f4       	brcc	.+18     	; 0x31b6 <__addsf3x+0x98>
    31a4:	87 95       	ror	r24
    31a6:	77 95       	ror	r23
    31a8:	67 95       	ror	r22
    31aa:	b7 95       	ror	r27
    31ac:	f7 95       	ror	r31
    31ae:	9e 3f       	cpi	r25, 0xFE	; 254
    31b0:	08 f0       	brcs	.+2      	; 0x31b4 <__addsf3x+0x96>
    31b2:	b3 cf       	rjmp	.-154    	; 0x311a <__addsf3+0x1e>
    31b4:	93 95       	inc	r25
    31b6:	88 0f       	add	r24, r24
    31b8:	08 f0       	brcs	.+2      	; 0x31bc <__addsf3x+0x9e>
    31ba:	99 27       	eor	r25, r25
    31bc:	ee 0f       	add	r30, r30
    31be:	97 95       	ror	r25
    31c0:	87 95       	ror	r24
    31c2:	08 95       	ret

000031c4 <__divsf3>:
    31c4:	0c d0       	rcall	.+24     	; 0x31de <__divsf3x>
    31c6:	eb c0       	rjmp	.+470    	; 0x339e <__fp_round>
    31c8:	e3 d0       	rcall	.+454    	; 0x3390 <__fp_pscB>
    31ca:	40 f0       	brcs	.+16     	; 0x31dc <__divsf3+0x18>
    31cc:	da d0       	rcall	.+436    	; 0x3382 <__fp_pscA>
    31ce:	30 f0       	brcs	.+12     	; 0x31dc <__divsf3+0x18>
    31d0:	21 f4       	brne	.+8      	; 0x31da <__divsf3+0x16>
    31d2:	5f 3f       	cpi	r21, 0xFF	; 255
    31d4:	19 f0       	breq	.+6      	; 0x31dc <__divsf3+0x18>
    31d6:	cc c0       	rjmp	.+408    	; 0x3370 <__fp_inf>
    31d8:	51 11       	cpse	r21, r1
    31da:	15 c1       	rjmp	.+554    	; 0x3406 <__fp_szero>
    31dc:	cf c0       	rjmp	.+414    	; 0x337c <__fp_nan>

000031de <__divsf3x>:
    31de:	f0 d0       	rcall	.+480    	; 0x33c0 <__fp_split3>
    31e0:	98 f3       	brcs	.-26     	; 0x31c8 <__divsf3+0x4>

000031e2 <__divsf3_pse>:
    31e2:	99 23       	and	r25, r25
    31e4:	c9 f3       	breq	.-14     	; 0x31d8 <__divsf3+0x14>
    31e6:	55 23       	and	r21, r21
    31e8:	b1 f3       	breq	.-20     	; 0x31d6 <__divsf3+0x12>
    31ea:	95 1b       	sub	r25, r21
    31ec:	55 0b       	sbc	r21, r21
    31ee:	bb 27       	eor	r27, r27
    31f0:	aa 27       	eor	r26, r26
    31f2:	62 17       	cp	r22, r18
    31f4:	73 07       	cpc	r23, r19
    31f6:	84 07       	cpc	r24, r20
    31f8:	38 f0       	brcs	.+14     	; 0x3208 <__divsf3_pse+0x26>
    31fa:	9f 5f       	subi	r25, 0xFF	; 255
    31fc:	5f 4f       	sbci	r21, 0xFF	; 255
    31fe:	22 0f       	add	r18, r18
    3200:	33 1f       	adc	r19, r19
    3202:	44 1f       	adc	r20, r20
    3204:	aa 1f       	adc	r26, r26
    3206:	a9 f3       	breq	.-22     	; 0x31f2 <__divsf3_pse+0x10>
    3208:	33 d0       	rcall	.+102    	; 0x3270 <__divsf3_pse+0x8e>
    320a:	0e 2e       	mov	r0, r30
    320c:	3a f0       	brmi	.+14     	; 0x321c <__divsf3_pse+0x3a>
    320e:	e0 e8       	ldi	r30, 0x80	; 128
    3210:	30 d0       	rcall	.+96     	; 0x3272 <__divsf3_pse+0x90>
    3212:	91 50       	subi	r25, 0x01	; 1
    3214:	50 40       	sbci	r21, 0x00	; 0
    3216:	e6 95       	lsr	r30
    3218:	00 1c       	adc	r0, r0
    321a:	ca f7       	brpl	.-14     	; 0x320e <__divsf3_pse+0x2c>
    321c:	29 d0       	rcall	.+82     	; 0x3270 <__divsf3_pse+0x8e>
    321e:	fe 2f       	mov	r31, r30
    3220:	27 d0       	rcall	.+78     	; 0x3270 <__divsf3_pse+0x8e>
    3222:	66 0f       	add	r22, r22
    3224:	77 1f       	adc	r23, r23
    3226:	88 1f       	adc	r24, r24
    3228:	bb 1f       	adc	r27, r27
    322a:	26 17       	cp	r18, r22
    322c:	37 07       	cpc	r19, r23
    322e:	48 07       	cpc	r20, r24
    3230:	ab 07       	cpc	r26, r27
    3232:	b0 e8       	ldi	r27, 0x80	; 128
    3234:	09 f0       	breq	.+2      	; 0x3238 <__divsf3_pse+0x56>
    3236:	bb 0b       	sbc	r27, r27
    3238:	80 2d       	mov	r24, r0
    323a:	bf 01       	movw	r22, r30
    323c:	ff 27       	eor	r31, r31
    323e:	93 58       	subi	r25, 0x83	; 131
    3240:	5f 4f       	sbci	r21, 0xFF	; 255
    3242:	2a f0       	brmi	.+10     	; 0x324e <__divsf3_pse+0x6c>
    3244:	9e 3f       	cpi	r25, 0xFE	; 254
    3246:	51 05       	cpc	r21, r1
    3248:	68 f0       	brcs	.+26     	; 0x3264 <__divsf3_pse+0x82>
    324a:	92 c0       	rjmp	.+292    	; 0x3370 <__fp_inf>
    324c:	dc c0       	rjmp	.+440    	; 0x3406 <__fp_szero>
    324e:	5f 3f       	cpi	r21, 0xFF	; 255
    3250:	ec f3       	brlt	.-6      	; 0x324c <__divsf3_pse+0x6a>
    3252:	98 3e       	cpi	r25, 0xE8	; 232
    3254:	dc f3       	brlt	.-10     	; 0x324c <__divsf3_pse+0x6a>
    3256:	86 95       	lsr	r24
    3258:	77 95       	ror	r23
    325a:	67 95       	ror	r22
    325c:	b7 95       	ror	r27
    325e:	f7 95       	ror	r31
    3260:	9f 5f       	subi	r25, 0xFF	; 255
    3262:	c9 f7       	brne	.-14     	; 0x3256 <__divsf3_pse+0x74>
    3264:	88 0f       	add	r24, r24
    3266:	91 1d       	adc	r25, r1
    3268:	96 95       	lsr	r25
    326a:	87 95       	ror	r24
    326c:	97 f9       	bld	r25, 7
    326e:	08 95       	ret
    3270:	e1 e0       	ldi	r30, 0x01	; 1
    3272:	66 0f       	add	r22, r22
    3274:	77 1f       	adc	r23, r23
    3276:	88 1f       	adc	r24, r24
    3278:	bb 1f       	adc	r27, r27
    327a:	62 17       	cp	r22, r18
    327c:	73 07       	cpc	r23, r19
    327e:	84 07       	cpc	r24, r20
    3280:	ba 07       	cpc	r27, r26
    3282:	20 f0       	brcs	.+8      	; 0x328c <__divsf3_pse+0xaa>
    3284:	62 1b       	sub	r22, r18
    3286:	73 0b       	sbc	r23, r19
    3288:	84 0b       	sbc	r24, r20
    328a:	ba 0b       	sbc	r27, r26
    328c:	ee 1f       	adc	r30, r30
    328e:	88 f7       	brcc	.-30     	; 0x3272 <__divsf3_pse+0x90>
    3290:	e0 95       	com	r30
    3292:	08 95       	ret

00003294 <__fixsfsi>:
    3294:	04 d0       	rcall	.+8      	; 0x329e <__fixunssfsi>
    3296:	68 94       	set
    3298:	b1 11       	cpse	r27, r1
    329a:	b5 c0       	rjmp	.+362    	; 0x3406 <__fp_szero>
    329c:	08 95       	ret

0000329e <__fixunssfsi>:
    329e:	98 d0       	rcall	.+304    	; 0x33d0 <__fp_splitA>
    32a0:	88 f0       	brcs	.+34     	; 0x32c4 <__fixunssfsi+0x26>
    32a2:	9f 57       	subi	r25, 0x7F	; 127
    32a4:	90 f0       	brcs	.+36     	; 0x32ca <__fixunssfsi+0x2c>
    32a6:	b9 2f       	mov	r27, r25
    32a8:	99 27       	eor	r25, r25
    32aa:	b7 51       	subi	r27, 0x17	; 23
    32ac:	a0 f0       	brcs	.+40     	; 0x32d6 <__fixunssfsi+0x38>
    32ae:	d1 f0       	breq	.+52     	; 0x32e4 <__fixunssfsi+0x46>
    32b0:	66 0f       	add	r22, r22
    32b2:	77 1f       	adc	r23, r23
    32b4:	88 1f       	adc	r24, r24
    32b6:	99 1f       	adc	r25, r25
    32b8:	1a f0       	brmi	.+6      	; 0x32c0 <__fixunssfsi+0x22>
    32ba:	ba 95       	dec	r27
    32bc:	c9 f7       	brne	.-14     	; 0x32b0 <__fixunssfsi+0x12>
    32be:	12 c0       	rjmp	.+36     	; 0x32e4 <__fixunssfsi+0x46>
    32c0:	b1 30       	cpi	r27, 0x01	; 1
    32c2:	81 f0       	breq	.+32     	; 0x32e4 <__fixunssfsi+0x46>
    32c4:	9f d0       	rcall	.+318    	; 0x3404 <__fp_zero>
    32c6:	b1 e0       	ldi	r27, 0x01	; 1
    32c8:	08 95       	ret
    32ca:	9c c0       	rjmp	.+312    	; 0x3404 <__fp_zero>
    32cc:	67 2f       	mov	r22, r23
    32ce:	78 2f       	mov	r23, r24
    32d0:	88 27       	eor	r24, r24
    32d2:	b8 5f       	subi	r27, 0xF8	; 248
    32d4:	39 f0       	breq	.+14     	; 0x32e4 <__fixunssfsi+0x46>
    32d6:	b9 3f       	cpi	r27, 0xF9	; 249
    32d8:	cc f3       	brlt	.-14     	; 0x32cc <__fixunssfsi+0x2e>
    32da:	86 95       	lsr	r24
    32dc:	77 95       	ror	r23
    32de:	67 95       	ror	r22
    32e0:	b3 95       	inc	r27
    32e2:	d9 f7       	brne	.-10     	; 0x32da <__fixunssfsi+0x3c>
    32e4:	3e f4       	brtc	.+14     	; 0x32f4 <__fixunssfsi+0x56>
    32e6:	90 95       	com	r25
    32e8:	80 95       	com	r24
    32ea:	70 95       	com	r23
    32ec:	61 95       	neg	r22
    32ee:	7f 4f       	sbci	r23, 0xFF	; 255
    32f0:	8f 4f       	sbci	r24, 0xFF	; 255
    32f2:	9f 4f       	sbci	r25, 0xFF	; 255
    32f4:	08 95       	ret

000032f6 <__floatunsisf>:
    32f6:	e8 94       	clt
    32f8:	09 c0       	rjmp	.+18     	; 0x330c <__floatsisf+0x12>

000032fa <__floatsisf>:
    32fa:	97 fb       	bst	r25, 7
    32fc:	3e f4       	brtc	.+14     	; 0x330c <__floatsisf+0x12>
    32fe:	90 95       	com	r25
    3300:	80 95       	com	r24
    3302:	70 95       	com	r23
    3304:	61 95       	neg	r22
    3306:	7f 4f       	sbci	r23, 0xFF	; 255
    3308:	8f 4f       	sbci	r24, 0xFF	; 255
    330a:	9f 4f       	sbci	r25, 0xFF	; 255
    330c:	99 23       	and	r25, r25
    330e:	a9 f0       	breq	.+42     	; 0x333a <__floatsisf+0x40>
    3310:	f9 2f       	mov	r31, r25
    3312:	96 e9       	ldi	r25, 0x96	; 150
    3314:	bb 27       	eor	r27, r27
    3316:	93 95       	inc	r25
    3318:	f6 95       	lsr	r31
    331a:	87 95       	ror	r24
    331c:	77 95       	ror	r23
    331e:	67 95       	ror	r22
    3320:	b7 95       	ror	r27
    3322:	f1 11       	cpse	r31, r1
    3324:	f8 cf       	rjmp	.-16     	; 0x3316 <__floatsisf+0x1c>
    3326:	fa f4       	brpl	.+62     	; 0x3366 <__floatsisf+0x6c>
    3328:	bb 0f       	add	r27, r27
    332a:	11 f4       	brne	.+4      	; 0x3330 <__floatsisf+0x36>
    332c:	60 ff       	sbrs	r22, 0
    332e:	1b c0       	rjmp	.+54     	; 0x3366 <__floatsisf+0x6c>
    3330:	6f 5f       	subi	r22, 0xFF	; 255
    3332:	7f 4f       	sbci	r23, 0xFF	; 255
    3334:	8f 4f       	sbci	r24, 0xFF	; 255
    3336:	9f 4f       	sbci	r25, 0xFF	; 255
    3338:	16 c0       	rjmp	.+44     	; 0x3366 <__floatsisf+0x6c>
    333a:	88 23       	and	r24, r24
    333c:	11 f0       	breq	.+4      	; 0x3342 <__floatsisf+0x48>
    333e:	96 e9       	ldi	r25, 0x96	; 150
    3340:	11 c0       	rjmp	.+34     	; 0x3364 <__floatsisf+0x6a>
    3342:	77 23       	and	r23, r23
    3344:	21 f0       	breq	.+8      	; 0x334e <__floatsisf+0x54>
    3346:	9e e8       	ldi	r25, 0x8E	; 142
    3348:	87 2f       	mov	r24, r23
    334a:	76 2f       	mov	r23, r22
    334c:	05 c0       	rjmp	.+10     	; 0x3358 <__floatsisf+0x5e>
    334e:	66 23       	and	r22, r22
    3350:	71 f0       	breq	.+28     	; 0x336e <__floatsisf+0x74>
    3352:	96 e8       	ldi	r25, 0x86	; 134
    3354:	86 2f       	mov	r24, r22
    3356:	70 e0       	ldi	r23, 0x00	; 0
    3358:	60 e0       	ldi	r22, 0x00	; 0
    335a:	2a f0       	brmi	.+10     	; 0x3366 <__floatsisf+0x6c>
    335c:	9a 95       	dec	r25
    335e:	66 0f       	add	r22, r22
    3360:	77 1f       	adc	r23, r23
    3362:	88 1f       	adc	r24, r24
    3364:	da f7       	brpl	.-10     	; 0x335c <__floatsisf+0x62>
    3366:	88 0f       	add	r24, r24
    3368:	96 95       	lsr	r25
    336a:	87 95       	ror	r24
    336c:	97 f9       	bld	r25, 7
    336e:	08 95       	ret

00003370 <__fp_inf>:
    3370:	97 f9       	bld	r25, 7
    3372:	9f 67       	ori	r25, 0x7F	; 127
    3374:	80 e8       	ldi	r24, 0x80	; 128
    3376:	70 e0       	ldi	r23, 0x00	; 0
    3378:	60 e0       	ldi	r22, 0x00	; 0
    337a:	08 95       	ret

0000337c <__fp_nan>:
    337c:	9f ef       	ldi	r25, 0xFF	; 255
    337e:	80 ec       	ldi	r24, 0xC0	; 192
    3380:	08 95       	ret

00003382 <__fp_pscA>:
    3382:	00 24       	eor	r0, r0
    3384:	0a 94       	dec	r0
    3386:	16 16       	cp	r1, r22
    3388:	17 06       	cpc	r1, r23
    338a:	18 06       	cpc	r1, r24
    338c:	09 06       	cpc	r0, r25
    338e:	08 95       	ret

00003390 <__fp_pscB>:
    3390:	00 24       	eor	r0, r0
    3392:	0a 94       	dec	r0
    3394:	12 16       	cp	r1, r18
    3396:	13 06       	cpc	r1, r19
    3398:	14 06       	cpc	r1, r20
    339a:	05 06       	cpc	r0, r21
    339c:	08 95       	ret

0000339e <__fp_round>:
    339e:	09 2e       	mov	r0, r25
    33a0:	03 94       	inc	r0
    33a2:	00 0c       	add	r0, r0
    33a4:	11 f4       	brne	.+4      	; 0x33aa <__fp_round+0xc>
    33a6:	88 23       	and	r24, r24
    33a8:	52 f0       	brmi	.+20     	; 0x33be <__fp_round+0x20>
    33aa:	bb 0f       	add	r27, r27
    33ac:	40 f4       	brcc	.+16     	; 0x33be <__fp_round+0x20>
    33ae:	bf 2b       	or	r27, r31
    33b0:	11 f4       	brne	.+4      	; 0x33b6 <__fp_round+0x18>
    33b2:	60 ff       	sbrs	r22, 0
    33b4:	04 c0       	rjmp	.+8      	; 0x33be <__fp_round+0x20>
    33b6:	6f 5f       	subi	r22, 0xFF	; 255
    33b8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ba:	8f 4f       	sbci	r24, 0xFF	; 255
    33bc:	9f 4f       	sbci	r25, 0xFF	; 255
    33be:	08 95       	ret

000033c0 <__fp_split3>:
    33c0:	57 fd       	sbrc	r21, 7
    33c2:	90 58       	subi	r25, 0x80	; 128
    33c4:	44 0f       	add	r20, r20
    33c6:	55 1f       	adc	r21, r21
    33c8:	59 f0       	breq	.+22     	; 0x33e0 <__fp_splitA+0x10>
    33ca:	5f 3f       	cpi	r21, 0xFF	; 255
    33cc:	71 f0       	breq	.+28     	; 0x33ea <__fp_splitA+0x1a>
    33ce:	47 95       	ror	r20

000033d0 <__fp_splitA>:
    33d0:	88 0f       	add	r24, r24
    33d2:	97 fb       	bst	r25, 7
    33d4:	99 1f       	adc	r25, r25
    33d6:	61 f0       	breq	.+24     	; 0x33f0 <__fp_splitA+0x20>
    33d8:	9f 3f       	cpi	r25, 0xFF	; 255
    33da:	79 f0       	breq	.+30     	; 0x33fa <__fp_splitA+0x2a>
    33dc:	87 95       	ror	r24
    33de:	08 95       	ret
    33e0:	12 16       	cp	r1, r18
    33e2:	13 06       	cpc	r1, r19
    33e4:	14 06       	cpc	r1, r20
    33e6:	55 1f       	adc	r21, r21
    33e8:	f2 cf       	rjmp	.-28     	; 0x33ce <__fp_split3+0xe>
    33ea:	46 95       	lsr	r20
    33ec:	f1 df       	rcall	.-30     	; 0x33d0 <__fp_splitA>
    33ee:	08 c0       	rjmp	.+16     	; 0x3400 <__fp_splitA+0x30>
    33f0:	16 16       	cp	r1, r22
    33f2:	17 06       	cpc	r1, r23
    33f4:	18 06       	cpc	r1, r24
    33f6:	99 1f       	adc	r25, r25
    33f8:	f1 cf       	rjmp	.-30     	; 0x33dc <__fp_splitA+0xc>
    33fa:	86 95       	lsr	r24
    33fc:	71 05       	cpc	r23, r1
    33fe:	61 05       	cpc	r22, r1
    3400:	08 94       	sec
    3402:	08 95       	ret

00003404 <__fp_zero>:
    3404:	e8 94       	clt

00003406 <__fp_szero>:
    3406:	bb 27       	eor	r27, r27
    3408:	66 27       	eor	r22, r22
    340a:	77 27       	eor	r23, r23
    340c:	cb 01       	movw	r24, r22
    340e:	97 f9       	bld	r25, 7
    3410:	08 95       	ret
    3412:	0e f0       	brts	.+2      	; 0x3416 <__fp_szero+0x10>
    3414:	a6 c0       	rjmp	.+332    	; 0x3562 <__fp_mpack>
    3416:	b2 cf       	rjmp	.-156    	; 0x337c <__fp_nan>
    3418:	68 94       	set
    341a:	aa cf       	rjmp	.-172    	; 0x3370 <__fp_inf>

0000341c <log>:
    341c:	d9 df       	rcall	.-78     	; 0x33d0 <__fp_splitA>
    341e:	c8 f3       	brcs	.-14     	; 0x3412 <__fp_szero+0xc>
    3420:	99 23       	and	r25, r25
    3422:	d1 f3       	breq	.-12     	; 0x3418 <__fp_szero+0x12>
    3424:	c6 f3       	brts	.-16     	; 0x3416 <__fp_szero+0x10>
    3426:	df 93       	push	r29
    3428:	cf 93       	push	r28
    342a:	1f 93       	push	r17
    342c:	0f 93       	push	r16
    342e:	ff 92       	push	r15
    3430:	c9 2f       	mov	r28, r25
    3432:	dd 27       	eor	r29, r29
    3434:	88 23       	and	r24, r24
    3436:	2a f0       	brmi	.+10     	; 0x3442 <log+0x26>
    3438:	21 97       	sbiw	r28, 0x01	; 1
    343a:	66 0f       	add	r22, r22
    343c:	77 1f       	adc	r23, r23
    343e:	88 1f       	adc	r24, r24
    3440:	da f7       	brpl	.-10     	; 0x3438 <log+0x1c>
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	40 e8       	ldi	r20, 0x80	; 128
    3448:	5f eb       	ldi	r21, 0xBF	; 191
    344a:	9f e3       	ldi	r25, 0x3F	; 63
    344c:	88 39       	cpi	r24, 0x98	; 152
    344e:	20 f0       	brcs	.+8      	; 0x3458 <log+0x3c>
    3450:	80 3e       	cpi	r24, 0xE0	; 224
    3452:	30 f0       	brcs	.+12     	; 0x3460 <log+0x44>
    3454:	21 96       	adiw	r28, 0x01	; 1
    3456:	8f 77       	andi	r24, 0x7F	; 127
    3458:	51 de       	rcall	.-862    	; 0x30fc <__addsf3>
    345a:	ee ef       	ldi	r30, 0xFE	; 254
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	03 c0       	rjmp	.+6      	; 0x3466 <log+0x4a>
    3460:	4d de       	rcall	.-870    	; 0x30fc <__addsf3>
    3462:	eb e2       	ldi	r30, 0x2B	; 43
    3464:	f1 e0       	ldi	r31, 0x01	; 1
    3466:	8b d0       	rcall	.+278    	; 0x357e <__fp_powser>
    3468:	8b 01       	movw	r16, r22
    346a:	be 01       	movw	r22, r28
    346c:	ec 01       	movw	r28, r24
    346e:	fb 2e       	mov	r15, r27
    3470:	6f 57       	subi	r22, 0x7F	; 127
    3472:	71 09       	sbc	r23, r1
    3474:	75 95       	asr	r23
    3476:	77 1f       	adc	r23, r23
    3478:	88 0b       	sbc	r24, r24
    347a:	99 0b       	sbc	r25, r25
    347c:	3e df       	rcall	.-388    	; 0x32fa <__floatsisf>
    347e:	28 e1       	ldi	r18, 0x18	; 24
    3480:	32 e7       	ldi	r19, 0x72	; 114
    3482:	41 e3       	ldi	r20, 0x31	; 49
    3484:	5f e3       	ldi	r21, 0x3F	; 63
    3486:	16 d0       	rcall	.+44     	; 0x34b4 <__mulsf3x>
    3488:	af 2d       	mov	r26, r15
    348a:	98 01       	movw	r18, r16
    348c:	ae 01       	movw	r20, r28
    348e:	ff 90       	pop	r15
    3490:	0f 91       	pop	r16
    3492:	1f 91       	pop	r17
    3494:	cf 91       	pop	r28
    3496:	df 91       	pop	r29
    3498:	42 de       	rcall	.-892    	; 0x311e <__addsf3x>
    349a:	81 cf       	rjmp	.-254    	; 0x339e <__fp_round>

0000349c <__mulsf3>:
    349c:	0b d0       	rcall	.+22     	; 0x34b4 <__mulsf3x>
    349e:	7f cf       	rjmp	.-258    	; 0x339e <__fp_round>
    34a0:	70 df       	rcall	.-288    	; 0x3382 <__fp_pscA>
    34a2:	28 f0       	brcs	.+10     	; 0x34ae <__mulsf3+0x12>
    34a4:	75 df       	rcall	.-278    	; 0x3390 <__fp_pscB>
    34a6:	18 f0       	brcs	.+6      	; 0x34ae <__mulsf3+0x12>
    34a8:	95 23       	and	r25, r21
    34aa:	09 f0       	breq	.+2      	; 0x34ae <__mulsf3+0x12>
    34ac:	61 cf       	rjmp	.-318    	; 0x3370 <__fp_inf>
    34ae:	66 cf       	rjmp	.-308    	; 0x337c <__fp_nan>
    34b0:	11 24       	eor	r1, r1
    34b2:	a9 cf       	rjmp	.-174    	; 0x3406 <__fp_szero>

000034b4 <__mulsf3x>:
    34b4:	85 df       	rcall	.-246    	; 0x33c0 <__fp_split3>
    34b6:	a0 f3       	brcs	.-24     	; 0x34a0 <__mulsf3+0x4>

000034b8 <__mulsf3_pse>:
    34b8:	95 9f       	mul	r25, r21
    34ba:	d1 f3       	breq	.-12     	; 0x34b0 <__mulsf3+0x14>
    34bc:	95 0f       	add	r25, r21
    34be:	50 e0       	ldi	r21, 0x00	; 0
    34c0:	55 1f       	adc	r21, r21
    34c2:	62 9f       	mul	r22, r18
    34c4:	f0 01       	movw	r30, r0
    34c6:	72 9f       	mul	r23, r18
    34c8:	bb 27       	eor	r27, r27
    34ca:	f0 0d       	add	r31, r0
    34cc:	b1 1d       	adc	r27, r1
    34ce:	63 9f       	mul	r22, r19
    34d0:	aa 27       	eor	r26, r26
    34d2:	f0 0d       	add	r31, r0
    34d4:	b1 1d       	adc	r27, r1
    34d6:	aa 1f       	adc	r26, r26
    34d8:	64 9f       	mul	r22, r20
    34da:	66 27       	eor	r22, r22
    34dc:	b0 0d       	add	r27, r0
    34de:	a1 1d       	adc	r26, r1
    34e0:	66 1f       	adc	r22, r22
    34e2:	82 9f       	mul	r24, r18
    34e4:	22 27       	eor	r18, r18
    34e6:	b0 0d       	add	r27, r0
    34e8:	a1 1d       	adc	r26, r1
    34ea:	62 1f       	adc	r22, r18
    34ec:	73 9f       	mul	r23, r19
    34ee:	b0 0d       	add	r27, r0
    34f0:	a1 1d       	adc	r26, r1
    34f2:	62 1f       	adc	r22, r18
    34f4:	83 9f       	mul	r24, r19
    34f6:	a0 0d       	add	r26, r0
    34f8:	61 1d       	adc	r22, r1
    34fa:	22 1f       	adc	r18, r18
    34fc:	74 9f       	mul	r23, r20
    34fe:	33 27       	eor	r19, r19
    3500:	a0 0d       	add	r26, r0
    3502:	61 1d       	adc	r22, r1
    3504:	23 1f       	adc	r18, r19
    3506:	84 9f       	mul	r24, r20
    3508:	60 0d       	add	r22, r0
    350a:	21 1d       	adc	r18, r1
    350c:	82 2f       	mov	r24, r18
    350e:	76 2f       	mov	r23, r22
    3510:	6a 2f       	mov	r22, r26
    3512:	11 24       	eor	r1, r1
    3514:	9f 57       	subi	r25, 0x7F	; 127
    3516:	50 40       	sbci	r21, 0x00	; 0
    3518:	8a f0       	brmi	.+34     	; 0x353c <__mulsf3_pse+0x84>
    351a:	e1 f0       	breq	.+56     	; 0x3554 <__mulsf3_pse+0x9c>
    351c:	88 23       	and	r24, r24
    351e:	4a f0       	brmi	.+18     	; 0x3532 <__mulsf3_pse+0x7a>
    3520:	ee 0f       	add	r30, r30
    3522:	ff 1f       	adc	r31, r31
    3524:	bb 1f       	adc	r27, r27
    3526:	66 1f       	adc	r22, r22
    3528:	77 1f       	adc	r23, r23
    352a:	88 1f       	adc	r24, r24
    352c:	91 50       	subi	r25, 0x01	; 1
    352e:	50 40       	sbci	r21, 0x00	; 0
    3530:	a9 f7       	brne	.-22     	; 0x351c <__mulsf3_pse+0x64>
    3532:	9e 3f       	cpi	r25, 0xFE	; 254
    3534:	51 05       	cpc	r21, r1
    3536:	70 f0       	brcs	.+28     	; 0x3554 <__mulsf3_pse+0x9c>
    3538:	1b cf       	rjmp	.-458    	; 0x3370 <__fp_inf>
    353a:	65 cf       	rjmp	.-310    	; 0x3406 <__fp_szero>
    353c:	5f 3f       	cpi	r21, 0xFF	; 255
    353e:	ec f3       	brlt	.-6      	; 0x353a <__mulsf3_pse+0x82>
    3540:	98 3e       	cpi	r25, 0xE8	; 232
    3542:	dc f3       	brlt	.-10     	; 0x353a <__mulsf3_pse+0x82>
    3544:	86 95       	lsr	r24
    3546:	77 95       	ror	r23
    3548:	67 95       	ror	r22
    354a:	b7 95       	ror	r27
    354c:	f7 95       	ror	r31
    354e:	e7 95       	ror	r30
    3550:	9f 5f       	subi	r25, 0xFF	; 255
    3552:	c1 f7       	brne	.-16     	; 0x3544 <__mulsf3_pse+0x8c>
    3554:	fe 2b       	or	r31, r30
    3556:	88 0f       	add	r24, r24
    3558:	91 1d       	adc	r25, r1
    355a:	96 95       	lsr	r25
    355c:	87 95       	ror	r24
    355e:	97 f9       	bld	r25, 7
    3560:	08 95       	ret

00003562 <__fp_mpack>:
    3562:	9f 3f       	cpi	r25, 0xFF	; 255
    3564:	31 f0       	breq	.+12     	; 0x3572 <__fp_mpack_finite+0xc>

00003566 <__fp_mpack_finite>:
    3566:	91 50       	subi	r25, 0x01	; 1
    3568:	20 f4       	brcc	.+8      	; 0x3572 <__fp_mpack_finite+0xc>
    356a:	87 95       	ror	r24
    356c:	77 95       	ror	r23
    356e:	67 95       	ror	r22
    3570:	b7 95       	ror	r27
    3572:	88 0f       	add	r24, r24
    3574:	91 1d       	adc	r25, r1
    3576:	96 95       	lsr	r25
    3578:	87 95       	ror	r24
    357a:	97 f9       	bld	r25, 7
    357c:	08 95       	ret

0000357e <__fp_powser>:
    357e:	df 93       	push	r29
    3580:	cf 93       	push	r28
    3582:	1f 93       	push	r17
    3584:	0f 93       	push	r16
    3586:	ff 92       	push	r15
    3588:	ef 92       	push	r14
    358a:	df 92       	push	r13
    358c:	7b 01       	movw	r14, r22
    358e:	8c 01       	movw	r16, r24
    3590:	68 94       	set
    3592:	05 c0       	rjmp	.+10     	; 0x359e <__fp_powser+0x20>
    3594:	da 2e       	mov	r13, r26
    3596:	ef 01       	movw	r28, r30
    3598:	8d df       	rcall	.-230    	; 0x34b4 <__mulsf3x>
    359a:	fe 01       	movw	r30, r28
    359c:	e8 94       	clt
    359e:	a5 91       	lpm	r26, Z+
    35a0:	25 91       	lpm	r18, Z+
    35a2:	35 91       	lpm	r19, Z+
    35a4:	45 91       	lpm	r20, Z+
    35a6:	55 91       	lpm	r21, Z+
    35a8:	ae f3       	brts	.-22     	; 0x3594 <__fp_powser+0x16>
    35aa:	ef 01       	movw	r28, r30
    35ac:	b8 dd       	rcall	.-1168   	; 0x311e <__addsf3x>
    35ae:	fe 01       	movw	r30, r28
    35b0:	97 01       	movw	r18, r14
    35b2:	a8 01       	movw	r20, r16
    35b4:	da 94       	dec	r13
    35b6:	79 f7       	brne	.-34     	; 0x3596 <__fp_powser+0x18>
    35b8:	df 90       	pop	r13
    35ba:	ef 90       	pop	r14
    35bc:	ff 90       	pop	r15
    35be:	0f 91       	pop	r16
    35c0:	1f 91       	pop	r17
    35c2:	cf 91       	pop	r28
    35c4:	df 91       	pop	r29
    35c6:	08 95       	ret

000035c8 <__cxa_pure_virtual>:
    35c8:	c6 d4       	rcall	.+2444   	; 0x3f56 <abort>

000035ca <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    35ca:	1f 92       	push	r1
    35cc:	0f 92       	push	r0
    35ce:	0f b6       	in	r0, 0x3f	; 63
    35d0:	0f 92       	push	r0
    35d2:	11 24       	eor	r1, r1
    35d4:	0b b6       	in	r0, 0x3b	; 59
    35d6:	0f 92       	push	r0
    35d8:	2f 93       	push	r18
    35da:	8f 93       	push	r24
    35dc:	9f 93       	push	r25
    35de:	ef 93       	push	r30
    35e0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    35e2:	e0 91 f2 04 	lds	r30, 0x04F2	; 0x8004f2 <Serial+0x10>
    35e6:	f0 91 f3 04 	lds	r31, 0x04F3	; 0x8004f3 <Serial+0x11>
    35ea:	80 81       	ld	r24, Z
    35ec:	e0 91 f8 04 	lds	r30, 0x04F8	; 0x8004f8 <Serial+0x16>
    35f0:	f0 91 f9 04 	lds	r31, 0x04F9	; 0x8004f9 <Serial+0x17>
    35f4:	82 fd       	sbrc	r24, 2
    35f6:	12 c0       	rjmp	.+36     	; 0x361c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    35f8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    35fa:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <Serial+0x19>
    35fe:	8f 5f       	subi	r24, 0xFF	; 255
    3600:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3602:	20 91 fc 04 	lds	r18, 0x04FC	; 0x8004fc <Serial+0x1a>
    3606:	82 17       	cp	r24, r18
    3608:	51 f0       	breq	.+20     	; 0x361e <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    360a:	e0 91 fb 04 	lds	r30, 0x04FB	; 0x8004fb <Serial+0x19>
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	ee 51       	subi	r30, 0x1E	; 30
    3612:	fb 4f       	sbci	r31, 0xFB	; 251
    3614:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3616:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <Serial+0x19>
    361a:	01 c0       	rjmp	.+2      	; 0x361e <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    361c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    361e:	ff 91       	pop	r31
    3620:	ef 91       	pop	r30
    3622:	9f 91       	pop	r25
    3624:	8f 91       	pop	r24
    3626:	2f 91       	pop	r18
    3628:	0f 90       	pop	r0
    362a:	0b be       	out	0x3b, r0	; 59
    362c:	0f 90       	pop	r0
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	0f 90       	pop	r0
    3632:	1f 90       	pop	r1
    3634:	18 95       	reti

00003636 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3636:	1f 92       	push	r1
    3638:	0f 92       	push	r0
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	0f 92       	push	r0
    363e:	11 24       	eor	r1, r1
    3640:	0b b6       	in	r0, 0x3b	; 59
    3642:	0f 92       	push	r0
    3644:	2f 93       	push	r18
    3646:	3f 93       	push	r19
    3648:	4f 93       	push	r20
    364a:	5f 93       	push	r21
    364c:	6f 93       	push	r22
    364e:	7f 93       	push	r23
    3650:	8f 93       	push	r24
    3652:	9f 93       	push	r25
    3654:	af 93       	push	r26
    3656:	bf 93       	push	r27
    3658:	ef 93       	push	r30
    365a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    365c:	82 ee       	ldi	r24, 0xE2	; 226
    365e:	94 e0       	ldi	r25, 0x04	; 4
    3660:	c0 d3       	rcall	.+1920   	; 0x3de2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3662:	ff 91       	pop	r31
    3664:	ef 91       	pop	r30
    3666:	bf 91       	pop	r27
    3668:	af 91       	pop	r26
    366a:	9f 91       	pop	r25
    366c:	8f 91       	pop	r24
    366e:	7f 91       	pop	r23
    3670:	6f 91       	pop	r22
    3672:	5f 91       	pop	r21
    3674:	4f 91       	pop	r20
    3676:	3f 91       	pop	r19
    3678:	2f 91       	pop	r18
    367a:	0f 90       	pop	r0
    367c:	0b be       	out	0x3b, r0	; 59
    367e:	0f 90       	pop	r0
    3680:	0f be       	out	0x3f, r0	; 63
    3682:	0f 90       	pop	r0
    3684:	1f 90       	pop	r1
    3686:	18 95       	reti

00003688 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3688:	82 ee       	ldi	r24, 0xE2	; 226
    368a:	94 e0       	ldi	r25, 0x04	; 4
    368c:	31 d3       	rcall	.+1634   	; 0x3cf0 <_ZN14HardwareSerial9availableEv>
    368e:	21 e0       	ldi	r18, 0x01	; 1
    3690:	89 2b       	or	r24, r25
    3692:	09 f4       	brne	.+2      	; 0x3696 <_Z17Serial0_availablev+0xe>
    3694:	20 e0       	ldi	r18, 0x00	; 0
}
    3696:	82 2f       	mov	r24, r18
    3698:	08 95       	ret

0000369a <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    369a:	e2 ee       	ldi	r30, 0xE2	; 226
    369c:	f4 e0       	ldi	r31, 0x04	; 4
    369e:	13 82       	std	Z+3, r1	; 0x03
    36a0:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    36a2:	88 ee       	ldi	r24, 0xE8	; 232
    36a4:	93 e0       	ldi	r25, 0x03	; 3
    36a6:	a0 e0       	ldi	r26, 0x00	; 0
    36a8:	b0 e0       	ldi	r27, 0x00	; 0
    36aa:	84 83       	std	Z+4, r24	; 0x04
    36ac:	95 83       	std	Z+5, r25	; 0x05
    36ae:	a6 83       	std	Z+6, r26	; 0x06
    36b0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    36b2:	81 ea       	ldi	r24, 0xA1	; 161
    36b4:	93 e0       	ldi	r25, 0x03	; 3
    36b6:	91 83       	std	Z+1, r25	; 0x01
    36b8:	80 83       	st	Z, r24
    36ba:	85 ec       	ldi	r24, 0xC5	; 197
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	95 87       	std	Z+13, r25	; 0x0d
    36c0:	84 87       	std	Z+12, r24	; 0x0c
    36c2:	84 ec       	ldi	r24, 0xC4	; 196
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	97 87       	std	Z+15, r25	; 0x0f
    36c8:	86 87       	std	Z+14, r24	; 0x0e
    36ca:	80 ec       	ldi	r24, 0xC0	; 192
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	91 8b       	std	Z+17, r25	; 0x11
    36d0:	80 8b       	std	Z+16, r24	; 0x10
    36d2:	81 ec       	ldi	r24, 0xC1	; 193
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	93 8b       	std	Z+19, r25	; 0x13
    36d8:	82 8b       	std	Z+18, r24	; 0x12
    36da:	82 ec       	ldi	r24, 0xC2	; 194
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	95 8b       	std	Z+21, r25	; 0x15
    36e0:	84 8b       	std	Z+20, r24	; 0x14
    36e2:	86 ec       	ldi	r24, 0xC6	; 198
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	97 8b       	std	Z+23, r25	; 0x17
    36e8:	86 8b       	std	Z+22, r24	; 0x16
    36ea:	11 8e       	std	Z+25, r1	; 0x19
    36ec:	12 8e       	std	Z+26, r1	; 0x1a
    36ee:	13 8e       	std	Z+27, r1	; 0x1b
    36f0:	14 8e       	std	Z+28, r1	; 0x1c
    36f2:	08 95       	ret

000036f4 <initVariant>:
    36f4:	08 95       	ret

000036f6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    36f6:	8e d1       	rcall	.+796    	; 0x3a14 <init>

	initVariant();
    36f8:	fd df       	rcall	.-6      	; 0x36f4 <initVariant>
    36fa:	0e 94 49 05 	call	0xa92	; 0xa92 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    36fe:	c5 eb       	ldi	r28, 0xB5	; 181
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3700:	de e1       	ldi	r29, 0x1E	; 30
    3702:	0e 94 5c 05 	call	0xab8	; 0xab8 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    3706:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    3708:	e1 f3       	breq	.-8      	; 0x3702 <main+0xc>
    370a:	2f d3       	rcall	.+1630   	; 0x3d6a <_Z14serialEventRunv>
    370c:	fa cf       	rjmp	.-12     	; 0x3702 <main+0xc>

0000370e <_ZN5Print5writeEPKhj>:
    370e:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3710:	df 92       	push	r13
    3712:	ef 92       	push	r14
    3714:	ff 92       	push	r15
    3716:	0f 93       	push	r16
    3718:	1f 93       	push	r17
    371a:	cf 93       	push	r28
    371c:	df 93       	push	r29
    371e:	6c 01       	movw	r12, r24
    3720:	7a 01       	movw	r14, r20
    3722:	8b 01       	movw	r16, r22
    3724:	c0 e0       	ldi	r28, 0x00	; 0
    3726:	d0 e0       	ldi	r29, 0x00	; 0
    3728:	ce 15       	cp	r28, r14
    372a:	df 05       	cpc	r29, r15
    372c:	81 f0       	breq	.+32     	; 0x374e <_ZN5Print5writeEPKhj+0x40>
    372e:	d8 01       	movw	r26, r16
    3730:	6d 91       	ld	r22, X+
    3732:	8d 01       	movw	r16, r26
    3734:	d6 01       	movw	r26, r12
    3736:	ed 91       	ld	r30, X+
    3738:	fc 91       	ld	r31, X
    373a:	01 90       	ld	r0, Z+
    373c:	f0 81       	ld	r31, Z
    373e:	e0 2d       	mov	r30, r0
    3740:	c6 01       	movw	r24, r12
    3742:	19 95       	eicall
    3744:	89 2b       	or	r24, r25
    3746:	11 f0       	breq	.+4      	; 0x374c <_ZN5Print5writeEPKhj+0x3e>
    3748:	21 96       	adiw	r28, 0x01	; 1
    374a:	ee cf       	rjmp	.-36     	; 0x3728 <_ZN5Print5writeEPKhj+0x1a>
    374c:	7e 01       	movw	r14, r28
    374e:	c7 01       	movw	r24, r14
    3750:	df 91       	pop	r29
    3752:	cf 91       	pop	r28
    3754:	1f 91       	pop	r17
    3756:	0f 91       	pop	r16
    3758:	ff 90       	pop	r15
    375a:	ef 90       	pop	r14
    375c:	df 90       	pop	r13
    375e:	cf 90       	pop	r12
    3760:	08 95       	ret

00003762 <_ZN5Print5printEc>:
    3762:	dc 01       	movw	r26, r24
    3764:	ed 91       	ld	r30, X+
    3766:	fc 91       	ld	r31, X
    3768:	01 90       	ld	r0, Z+
    376a:	f0 81       	ld	r31, Z
    376c:	e0 2d       	mov	r30, r0
    376e:	19 94       	eijmp

00003770 <_ZN5Print11printNumberEmh>:
    3770:	8f 92       	push	r8
    3772:	9f 92       	push	r9
    3774:	af 92       	push	r10
    3776:	bf 92       	push	r11
    3778:	ef 92       	push	r14
    377a:	ff 92       	push	r15
    377c:	0f 93       	push	r16
    377e:	1f 93       	push	r17
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
    3784:	cd b7       	in	r28, 0x3d	; 61
    3786:	de b7       	in	r29, 0x3e	; 62
    3788:	a1 97       	sbiw	r28, 0x21	; 33
    378a:	0f b6       	in	r0, 0x3f	; 63
    378c:	f8 94       	cli
    378e:	de bf       	out	0x3e, r29	; 62
    3790:	0f be       	out	0x3f, r0	; 63
    3792:	cd bf       	out	0x3d, r28	; 61
    3794:	7c 01       	movw	r14, r24
    3796:	fa 01       	movw	r30, r20
    3798:	cb 01       	movw	r24, r22
    379a:	19 a2       	std	Y+33, r1	; 0x21
    379c:	22 30       	cpi	r18, 0x02	; 2
    379e:	08 f4       	brcc	.+2      	; 0x37a2 <_ZN5Print11printNumberEmh+0x32>
    37a0:	2a e0       	ldi	r18, 0x0A	; 10
    37a2:	8e 01       	movw	r16, r28
    37a4:	0f 5d       	subi	r16, 0xDF	; 223
    37a6:	1f 4f       	sbci	r17, 0xFF	; 255
    37a8:	82 2e       	mov	r8, r18
    37aa:	91 2c       	mov	r9, r1
    37ac:	a1 2c       	mov	r10, r1
    37ae:	b1 2c       	mov	r11, r1
    37b0:	bf 01       	movw	r22, r30
    37b2:	a5 01       	movw	r20, r10
    37b4:	94 01       	movw	r18, r8
    37b6:	a5 d3       	rcall	.+1866   	; 0x3f02 <__udivmodsi4>
    37b8:	f9 01       	movw	r30, r18
    37ba:	ca 01       	movw	r24, r20
    37bc:	01 50       	subi	r16, 0x01	; 1
    37be:	11 09       	sbc	r17, r1
    37c0:	6a 30       	cpi	r22, 0x0A	; 10
    37c2:	10 f4       	brcc	.+4      	; 0x37c8 <_ZN5Print11printNumberEmh+0x58>
    37c4:	60 5d       	subi	r22, 0xD0	; 208
    37c6:	01 c0       	rjmp	.+2      	; 0x37ca <_ZN5Print11printNumberEmh+0x5a>
    37c8:	69 5c       	subi	r22, 0xC9	; 201
    37ca:	d8 01       	movw	r26, r16
    37cc:	6c 93       	st	X, r22
    37ce:	23 2b       	or	r18, r19
    37d0:	24 2b       	or	r18, r20
    37d2:	25 2b       	or	r18, r21
    37d4:	69 f7       	brne	.-38     	; 0x37b0 <_ZN5Print11printNumberEmh+0x40>
    37d6:	b8 01       	movw	r22, r16
    37d8:	c7 01       	movw	r24, r14
    37da:	0e 94 82 01 	call	0x304	; 0x304 <_ZN5Print5writeEPKc>
    37de:	a1 96       	adiw	r28, 0x21	; 33
    37e0:	0f b6       	in	r0, 0x3f	; 63
    37e2:	f8 94       	cli
    37e4:	de bf       	out	0x3e, r29	; 62
    37e6:	0f be       	out	0x3f, r0	; 63
    37e8:	cd bf       	out	0x3d, r28	; 61
    37ea:	df 91       	pop	r29
    37ec:	cf 91       	pop	r28
    37ee:	1f 91       	pop	r17
    37f0:	0f 91       	pop	r16
    37f2:	ff 90       	pop	r15
    37f4:	ef 90       	pop	r14
    37f6:	bf 90       	pop	r11
    37f8:	af 90       	pop	r10
    37fa:	9f 90       	pop	r9
    37fc:	8f 90       	pop	r8
    37fe:	08 95       	ret

00003800 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    3800:	cf 92       	push	r12
    3802:	df 92       	push	r13
    3804:	ef 92       	push	r14
    3806:	ff 92       	push	r15
    3808:	0f 93       	push	r16
    380a:	1f 93       	push	r17
    380c:	cf 93       	push	r28
    380e:	df 93       	push	r29
  if (base == 0) {
    3810:	21 15       	cp	r18, r1
    3812:	31 05       	cpc	r19, r1
    3814:	81 f4       	brne	.+32     	; 0x3836 <_ZN5Print5printEli+0x36>
    return write(n);
    3816:	dc 01       	movw	r26, r24
    3818:	ed 91       	ld	r30, X+
    381a:	fc 91       	ld	r31, X
    381c:	01 90       	ld	r0, Z+
    381e:	f0 81       	ld	r31, Z
    3820:	e0 2d       	mov	r30, r0
    3822:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3824:	df 91       	pop	r29
    3826:	cf 91       	pop	r28
    3828:	1f 91       	pop	r17
    382a:	0f 91       	pop	r16
    382c:	ff 90       	pop	r15
    382e:	ef 90       	pop	r14
    3830:	df 90       	pop	r13
    3832:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    3834:	19 94       	eijmp
  } else if (base == 10) {
    3836:	2a 30       	cpi	r18, 0x0A	; 10
    3838:	31 05       	cpc	r19, r1
    383a:	f1 f4       	brne	.+60     	; 0x3878 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    383c:	77 ff       	sbrs	r23, 7
    383e:	1b c0       	rjmp	.+54     	; 0x3876 <_ZN5Print5printEli+0x76>
    3840:	6a 01       	movw	r12, r20
    3842:	7b 01       	movw	r14, r22
    3844:	ec 01       	movw	r28, r24
      int t = print('-');
    3846:	6d e2       	ldi	r22, 0x2D	; 45
    3848:	8c df       	rcall	.-232    	; 0x3762 <_ZN5Print5printEc>
    384a:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    384c:	44 27       	eor	r20, r20
    384e:	55 27       	eor	r21, r21
    3850:	ba 01       	movw	r22, r20
    3852:	4c 19       	sub	r20, r12
    3854:	5d 09       	sbc	r21, r13
    3856:	6e 09       	sbc	r22, r14
    3858:	7f 09       	sbc	r23, r15
    385a:	2a e0       	ldi	r18, 0x0A	; 10
    385c:	ce 01       	movw	r24, r28
    385e:	88 df       	rcall	.-240    	; 0x3770 <_ZN5Print11printNumberEmh>
    3860:	80 0f       	add	r24, r16
    3862:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3864:	df 91       	pop	r29
    3866:	cf 91       	pop	r28
    3868:	1f 91       	pop	r17
    386a:	0f 91       	pop	r16
    386c:	ff 90       	pop	r15
    386e:	ef 90       	pop	r14
    3870:	df 90       	pop	r13
    3872:	cf 90       	pop	r12
    3874:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    3876:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    3878:	df 91       	pop	r29
    387a:	cf 91       	pop	r28
    387c:	1f 91       	pop	r17
    387e:	0f 91       	pop	r16
    3880:	ff 90       	pop	r15
    3882:	ef 90       	pop	r14
    3884:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    3886:	cf 90       	pop	r12
    3888:	73 cf       	rjmp	.-282    	; 0x3770 <_ZN5Print11printNumberEmh>

0000388a <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    388a:	9a 01       	movw	r18, r20
  return print((long) n, base);
    388c:	ab 01       	movw	r20, r22
    388e:	77 0f       	add	r23, r23
    3890:	66 0b       	sbc	r22, r22
    3892:	77 0b       	sbc	r23, r23
    3894:	b5 cf       	rjmp	.-150    	; 0x3800 <_ZN5Print5printEli>

00003896 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3896:	1f 92       	push	r1
    3898:	0f 92       	push	r0
    389a:	0f b6       	in	r0, 0x3f	; 63
    389c:	0f 92       	push	r0
    389e:	11 24       	eor	r1, r1
    38a0:	2f 93       	push	r18
    38a2:	3f 93       	push	r19
    38a4:	8f 93       	push	r24
    38a6:	9f 93       	push	r25
    38a8:	af 93       	push	r26
    38aa:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    38ac:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <timer0_millis>
    38b0:	90 91 81 05 	lds	r25, 0x0581	; 0x800581 <timer0_millis+0x1>
    38b4:	a0 91 82 05 	lds	r26, 0x0582	; 0x800582 <timer0_millis+0x2>
    38b8:	b0 91 83 05 	lds	r27, 0x0583	; 0x800583 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    38bc:	30 91 7f 05 	lds	r19, 0x057F	; 0x80057f <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    38c0:	23 e0       	ldi	r18, 0x03	; 3
    38c2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    38c4:	2d 37       	cpi	r18, 0x7D	; 125
    38c6:	20 f4       	brcc	.+8      	; 0x38d0 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    38c8:	01 96       	adiw	r24, 0x01	; 1
    38ca:	a1 1d       	adc	r26, r1
    38cc:	b1 1d       	adc	r27, r1
    38ce:	05 c0       	rjmp	.+10     	; 0x38da <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    38d0:	26 e8       	ldi	r18, 0x86	; 134
    38d2:	23 0f       	add	r18, r19
		m += 1;
    38d4:	02 96       	adiw	r24, 0x02	; 2
    38d6:	a1 1d       	adc	r26, r1
    38d8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    38da:	20 93 7f 05 	sts	0x057F, r18	; 0x80057f <timer0_fract>
	timer0_millis = m;
    38de:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <timer0_millis>
    38e2:	90 93 81 05 	sts	0x0581, r25	; 0x800581 <timer0_millis+0x1>
    38e6:	a0 93 82 05 	sts	0x0582, r26	; 0x800582 <timer0_millis+0x2>
    38ea:	b0 93 83 05 	sts	0x0583, r27	; 0x800583 <timer0_millis+0x3>
	timer0_overflow_count++;
    38ee:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <timer0_overflow_count>
    38f2:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <timer0_overflow_count+0x1>
    38f6:	a0 91 86 05 	lds	r26, 0x0586	; 0x800586 <timer0_overflow_count+0x2>
    38fa:	b0 91 87 05 	lds	r27, 0x0587	; 0x800587 <timer0_overflow_count+0x3>
    38fe:	01 96       	adiw	r24, 0x01	; 1
    3900:	a1 1d       	adc	r26, r1
    3902:	b1 1d       	adc	r27, r1
    3904:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <timer0_overflow_count>
    3908:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <timer0_overflow_count+0x1>
    390c:	a0 93 86 05 	sts	0x0586, r26	; 0x800586 <timer0_overflow_count+0x2>
    3910:	b0 93 87 05 	sts	0x0587, r27	; 0x800587 <timer0_overflow_count+0x3>
}
    3914:	bf 91       	pop	r27
    3916:	af 91       	pop	r26
    3918:	9f 91       	pop	r25
    391a:	8f 91       	pop	r24
    391c:	3f 91       	pop	r19
    391e:	2f 91       	pop	r18
    3920:	0f 90       	pop	r0
    3922:	0f be       	out	0x3f, r0	; 63
    3924:	0f 90       	pop	r0
    3926:	1f 90       	pop	r1
    3928:	18 95       	reti

0000392a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    392a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    392c:	f8 94       	cli
	m = timer0_millis;
    392e:	60 91 80 05 	lds	r22, 0x0580	; 0x800580 <timer0_millis>
    3932:	70 91 81 05 	lds	r23, 0x0581	; 0x800581 <timer0_millis+0x1>
    3936:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <timer0_millis+0x2>
    393a:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <timer0_millis+0x3>
	SREG = oldSREG;
    393e:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    3940:	08 95       	ret

00003942 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3942:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    3944:	f8 94       	cli
	m = timer0_overflow_count;
    3946:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <timer0_overflow_count>
    394a:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <timer0_overflow_count+0x1>
    394e:	a0 91 86 05 	lds	r26, 0x0586	; 0x800586 <timer0_overflow_count+0x2>
    3952:	b0 91 87 05 	lds	r27, 0x0587	; 0x800587 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    3956:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3958:	a8 9b       	sbis	0x15, 0	; 21
    395a:	05 c0       	rjmp	.+10     	; 0x3966 <micros+0x24>
    395c:	2f 3f       	cpi	r18, 0xFF	; 255
    395e:	19 f0       	breq	.+6      	; 0x3966 <micros+0x24>
		m++;
    3960:	01 96       	adiw	r24, 0x01	; 1
    3962:	a1 1d       	adc	r26, r1
    3964:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3966:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3968:	ba 2f       	mov	r27, r26
    396a:	a9 2f       	mov	r26, r25
    396c:	98 2f       	mov	r25, r24
    396e:	88 27       	eor	r24, r24
    3970:	82 0f       	add	r24, r18
    3972:	91 1d       	adc	r25, r1
    3974:	a1 1d       	adc	r26, r1
    3976:	b1 1d       	adc	r27, r1
    3978:	bc 01       	movw	r22, r24
    397a:	cd 01       	movw	r24, r26
    397c:	42 e0       	ldi	r20, 0x02	; 2
    397e:	66 0f       	add	r22, r22
    3980:	77 1f       	adc	r23, r23
    3982:	88 1f       	adc	r24, r24
    3984:	99 1f       	adc	r25, r25
    3986:	4a 95       	dec	r20
    3988:	d1 f7       	brne	.-12     	; 0x397e <micros+0x3c>
}
    398a:	08 95       	ret

0000398c <delay>:

void delay(unsigned long ms)
{
    398c:	8f 92       	push	r8
    398e:	9f 92       	push	r9
    3990:	af 92       	push	r10
    3992:	bf 92       	push	r11
    3994:	cf 92       	push	r12
    3996:	df 92       	push	r13
    3998:	ef 92       	push	r14
    399a:	ff 92       	push	r15
    399c:	6b 01       	movw	r12, r22
    399e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    39a0:	d0 df       	rcall	.-96     	; 0x3942 <micros>
    39a2:	4b 01       	movw	r8, r22
    39a4:	5c 01       	movw	r10, r24

	while (ms > 0) {
    39a6:	c1 14       	cp	r12, r1
    39a8:	d1 04       	cpc	r13, r1
    39aa:	e1 04       	cpc	r14, r1
    39ac:	f1 04       	cpc	r15, r1
		yield();
    39ae:	f1 f0       	breq	.+60     	; 0x39ec <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    39b0:	a7 d2       	rcall	.+1358   	; 0x3f00 <yield>
    39b2:	c7 df       	rcall	.-114    	; 0x3942 <micros>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	88 19       	sub	r24, r8
    39ba:	99 09       	sbc	r25, r9
    39bc:	aa 09       	sbc	r26, r10
    39be:	bb 09       	sbc	r27, r11
    39c0:	88 3e       	cpi	r24, 0xE8	; 232
    39c2:	93 40       	sbci	r25, 0x03	; 3
    39c4:	a1 05       	cpc	r26, r1
    39c6:	b1 05       	cpc	r27, r1
    39c8:	70 f3       	brcs	.-36     	; 0x39a6 <delay+0x1a>
			ms--;
    39ca:	21 e0       	ldi	r18, 0x01	; 1
    39cc:	c2 1a       	sub	r12, r18
    39ce:	d1 08       	sbc	r13, r1
    39d0:	e1 08       	sbc	r14, r1
    39d2:	f1 08       	sbc	r15, r1
			start += 1000;
    39d4:	88 ee       	ldi	r24, 0xE8	; 232
    39d6:	88 0e       	add	r8, r24
    39d8:	83 e0       	ldi	r24, 0x03	; 3
    39da:	98 1e       	adc	r9, r24
    39dc:	a1 1c       	adc	r10, r1
    39de:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    39e0:	c1 14       	cp	r12, r1
    39e2:	d1 04       	cpc	r13, r1
    39e4:	e1 04       	cpc	r14, r1
    39e6:	f1 04       	cpc	r15, r1
    39e8:	21 f7       	brne	.-56     	; 0x39b2 <delay+0x26>
    39ea:	dd cf       	rjmp	.-70     	; 0x39a6 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    39ec:	ff 90       	pop	r15
    39ee:	ef 90       	pop	r14
    39f0:	df 90       	pop	r13
    39f2:	cf 90       	pop	r12
    39f4:	bf 90       	pop	r11
    39f6:	af 90       	pop	r10
    39f8:	9f 90       	pop	r9
    39fa:	8f 90       	pop	r8
    39fc:	08 95       	ret

000039fe <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    39fe:	82 30       	cpi	r24, 0x02	; 2
    3a00:	91 05       	cpc	r25, r1
    3a02:	38 f0       	brcs	.+14     	; 0x3a12 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    3a04:	88 0f       	add	r24, r24
    3a06:	99 1f       	adc	r25, r25
    3a08:	88 0f       	add	r24, r24
    3a0a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    3a0c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3a0e:	01 97       	sbiw	r24, 0x01	; 1
    3a10:	f1 f7       	brne	.-4      	; 0x3a0e <delayMicroseconds+0x10>
    3a12:	08 95       	ret

00003a14 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3a14:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3a16:	84 b5       	in	r24, 0x24	; 36
    3a18:	82 60       	ori	r24, 0x02	; 2
    3a1a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3a1c:	84 b5       	in	r24, 0x24	; 36
    3a1e:	81 60       	ori	r24, 0x01	; 1
    3a20:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3a22:	85 b5       	in	r24, 0x25	; 37
    3a24:	82 60       	ori	r24, 0x02	; 2
    3a26:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3a28:	85 b5       	in	r24, 0x25	; 37
    3a2a:	81 60       	ori	r24, 0x01	; 1
    3a2c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3a2e:	ee e6       	ldi	r30, 0x6E	; 110
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	80 81       	ld	r24, Z
    3a34:	81 60       	ori	r24, 0x01	; 1
    3a36:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3a38:	e1 e8       	ldi	r30, 0x81	; 129
    3a3a:	f0 e0       	ldi	r31, 0x00	; 0
    3a3c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3a3e:	80 81       	ld	r24, Z
    3a40:	82 60       	ori	r24, 0x02	; 2
    3a42:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3a44:	80 81       	ld	r24, Z
    3a46:	81 60       	ori	r24, 0x01	; 1
    3a48:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3a4a:	e0 e8       	ldi	r30, 0x80	; 128
    3a4c:	f0 e0       	ldi	r31, 0x00	; 0
    3a4e:	80 81       	ld	r24, Z
    3a50:	81 60       	ori	r24, 0x01	; 1
    3a52:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3a54:	e1 eb       	ldi	r30, 0xB1	; 177
    3a56:	f0 e0       	ldi	r31, 0x00	; 0
    3a58:	80 81       	ld	r24, Z
    3a5a:	84 60       	ori	r24, 0x04	; 4
    3a5c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3a5e:	e0 eb       	ldi	r30, 0xB0	; 176
    3a60:	f0 e0       	ldi	r31, 0x00	; 0
    3a62:	80 81       	ld	r24, Z
    3a64:	81 60       	ori	r24, 0x01	; 1
    3a66:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    3a68:	e1 e9       	ldi	r30, 0x91	; 145
    3a6a:	f0 e0       	ldi	r31, 0x00	; 0
    3a6c:	80 81       	ld	r24, Z
    3a6e:	82 60       	ori	r24, 0x02	; 2
    3a70:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    3a72:	80 81       	ld	r24, Z
    3a74:	81 60       	ori	r24, 0x01	; 1
    3a76:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    3a78:	e0 e9       	ldi	r30, 0x90	; 144
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	80 81       	ld	r24, Z
    3a7e:	81 60       	ori	r24, 0x01	; 1
    3a80:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    3a82:	e1 ea       	ldi	r30, 0xA1	; 161
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	80 81       	ld	r24, Z
    3a88:	82 60       	ori	r24, 0x02	; 2
    3a8a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    3a8c:	80 81       	ld	r24, Z
    3a8e:	81 60       	ori	r24, 0x01	; 1
    3a90:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    3a92:	e0 ea       	ldi	r30, 0xA0	; 160
    3a94:	f0 e0       	ldi	r31, 0x00	; 0
    3a96:	80 81       	ld	r24, Z
    3a98:	81 60       	ori	r24, 0x01	; 1
    3a9a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    3a9c:	e1 e2       	ldi	r30, 0x21	; 33
    3a9e:	f1 e0       	ldi	r31, 0x01	; 1
    3aa0:	80 81       	ld	r24, Z
    3aa2:	82 60       	ori	r24, 0x02	; 2
    3aa4:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    3aa6:	80 81       	ld	r24, Z
    3aa8:	81 60       	ori	r24, 0x01	; 1
    3aaa:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    3aac:	e0 e2       	ldi	r30, 0x20	; 32
    3aae:	f1 e0       	ldi	r31, 0x01	; 1
    3ab0:	80 81       	ld	r24, Z
    3ab2:	81 60       	ori	r24, 0x01	; 1
    3ab4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3ab6:	ea e7       	ldi	r30, 0x7A	; 122
    3ab8:	f0 e0       	ldi	r31, 0x00	; 0
    3aba:	80 81       	ld	r24, Z
    3abc:	84 60       	ori	r24, 0x04	; 4
    3abe:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3ac0:	80 81       	ld	r24, Z
    3ac2:	82 60       	ori	r24, 0x02	; 2
    3ac4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3ac6:	80 81       	ld	r24, Z
    3ac8:	81 60       	ori	r24, 0x01	; 1
    3aca:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3acc:	80 81       	ld	r24, Z
    3ace:	80 68       	ori	r24, 0x80	; 128
    3ad0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3ad2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    3ad6:	08 95       	ret

00003ad8 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    3ad8:	86 33       	cpi	r24, 0x36	; 54
    3ada:	08 f0       	brcs	.+2      	; 0x3ade <analogRead+0x6>
    3adc:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    3ade:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
    3ae2:	28 2f       	mov	r18, r24
    3ae4:	28 70       	andi	r18, 0x08	; 8
    3ae6:	97 7f       	andi	r25, 0xF7	; 247
    3ae8:	92 2b       	or	r25, r18
    3aea:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3aee:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <analog_reference>
    3af2:	90 e4       	ldi	r25, 0x40	; 64
    3af4:	29 9f       	mul	r18, r25
    3af6:	90 01       	movw	r18, r0
    3af8:	11 24       	eor	r1, r1
    3afa:	87 70       	andi	r24, 0x07	; 7
    3afc:	82 2b       	or	r24, r18
    3afe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3b02:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    3b06:	80 64       	ori	r24, 0x40	; 64
    3b08:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3b0c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    3b10:	86 fd       	sbrc	r24, 6
    3b12:	fc cf       	rjmp	.-8      	; 0x3b0c <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3b14:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	high = ADCH;
    3b18:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
}
    3b1e:	92 2b       	or	r25, r18
    3b20:	08 95       	ret

00003b22 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	fc 01       	movw	r30, r24
    3b26:	31 97       	sbiw	r30, 0x01	; 1
    3b28:	e2 31       	cpi	r30, 0x12	; 18
    3b2a:	f1 05       	cpc	r31, r1
    3b2c:	08 f0       	brcs	.+2      	; 0x3b30 <turnOffPWM+0xe>
    3b2e:	4d c0       	rjmp	.+154    	; 0x3bca <turnOffPWM+0xa8>
    3b30:	88 27       	eor	r24, r24
    3b32:	e4 55       	subi	r30, 0x54	; 84
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	8f 4f       	sbci	r24, 0xFF	; 255
    3b38:	06 c2       	rjmp	.+1036   	; 0x3f46 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3b3a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    3b3e:	8f 77       	andi	r24, 0x7F	; 127
    3b40:	03 c0       	rjmp	.+6      	; 0x3b48 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3b42:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    3b46:	8f 7d       	andi	r24, 0xDF	; 223
    3b48:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    3b4c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    3b4e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    3b52:	87 7f       	andi	r24, 0xF7	; 247
    3b54:	f9 cf       	rjmp	.-14     	; 0x3b48 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3b56:	84 b5       	in	r24, 0x24	; 36
    3b58:	8f 77       	andi	r24, 0x7F	; 127
    3b5a:	02 c0       	rjmp	.+4      	; 0x3b60 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3b5c:	84 b5       	in	r24, 0x24	; 36
    3b5e:	8f 7d       	andi	r24, 0xDF	; 223
    3b60:	84 bd       	out	0x24, r24	; 36
    3b62:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3b64:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    3b68:	8f 77       	andi	r24, 0x7F	; 127
    3b6a:	03 c0       	rjmp	.+6      	; 0x3b72 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3b6c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    3b70:	8f 7d       	andi	r24, 0xDF	; 223
    3b72:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    3b76:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3b78:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    3b7c:	8f 77       	andi	r24, 0x7F	; 127
    3b7e:	07 c0       	rjmp	.+14     	; 0x3b8e <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    3b80:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    3b84:	8f 7d       	andi	r24, 0xDF	; 223
    3b86:	03 c0       	rjmp	.+6      	; 0x3b8e <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    3b88:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    3b8c:	87 7f       	andi	r24, 0xF7	; 247
    3b8e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    3b92:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    3b94:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    3b98:	8f 77       	andi	r24, 0x7F	; 127
    3b9a:	07 c0       	rjmp	.+14     	; 0x3baa <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    3b9c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    3ba0:	8f 7d       	andi	r24, 0xDF	; 223
    3ba2:	03 c0       	rjmp	.+6      	; 0x3baa <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    3ba4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    3ba8:	87 7f       	andi	r24, 0xF7	; 247
    3baa:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    3bae:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    3bb0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    3bb4:	8f 77       	andi	r24, 0x7F	; 127
    3bb6:	07 c0       	rjmp	.+14     	; 0x3bc6 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    3bb8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    3bbc:	8f 7d       	andi	r24, 0xDF	; 223
    3bbe:	03 c0       	rjmp	.+6      	; 0x3bc6 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    3bc0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    3bc4:	87 7f       	andi	r24, 0xF7	; 247
    3bc6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    3bca:	08 95       	ret

00003bcc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3bcc:	cf 93       	push	r28
    3bce:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	ee 53       	subi	r30, 0x3E	; 62
    3bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3bda:	fc 01       	movw	r30, r24
    3bdc:	e8 5f       	subi	r30, 0xF8	; 248
    3bde:	fd 4f       	sbci	r31, 0xFD	; 253
    3be0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3be2:	88 23       	and	r24, r24
    3be4:	61 f1       	breq	.+88     	; 0x3c3e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	88 0f       	add	r24, r24
    3bea:	99 1f       	adc	r25, r25
    3bec:	fc 01       	movw	r30, r24
    3bee:	ee 57       	subi	r30, 0x7E	; 126
    3bf0:	fd 4f       	sbci	r31, 0xFD	; 253
    3bf2:	c5 91       	lpm	r28, Z+
    3bf4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	e8 59       	subi	r30, 0x98	; 152
    3bfa:	fd 4f       	sbci	r31, 0xFD	; 253
    3bfc:	a5 91       	lpm	r26, Z+
    3bfe:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3c00:	61 11       	cpse	r22, r1
    3c02:	09 c0       	rjmp	.+18     	; 0x3c16 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3c04:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3c06:	f8 94       	cli
		*reg &= ~bit;
    3c08:	88 81       	ld	r24, Y
    3c0a:	20 95       	com	r18
    3c0c:	82 23       	and	r24, r18
    3c0e:	88 83       	st	Y, r24
		*out &= ~bit;
    3c10:	ec 91       	ld	r30, X
    3c12:	2e 23       	and	r18, r30
    3c14:	0b c0       	rjmp	.+22     	; 0x3c2c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3c16:	62 30       	cpi	r22, 0x02	; 2
    3c18:	61 f4       	brne	.+24     	; 0x3c32 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3c1a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3c1c:	f8 94       	cli
		*reg &= ~bit;
    3c1e:	88 81       	ld	r24, Y
    3c20:	32 2f       	mov	r19, r18
    3c22:	30 95       	com	r19
    3c24:	83 23       	and	r24, r19
    3c26:	88 83       	st	Y, r24
		*out |= bit;
    3c28:	ec 91       	ld	r30, X
    3c2a:	2e 2b       	or	r18, r30
    3c2c:	2c 93       	st	X, r18
		SREG = oldSREG;
    3c2e:	9f bf       	out	0x3f, r25	; 63
    3c30:	06 c0       	rjmp	.+12     	; 0x3c3e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3c32:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3c34:	f8 94       	cli
		*reg |= bit;
    3c36:	e8 81       	ld	r30, Y
    3c38:	2e 2b       	or	r18, r30
    3c3a:	28 83       	st	Y, r18
		SREG = oldSREG;
    3c3c:	8f bf       	out	0x3f, r24	; 63
	}
}
    3c3e:	df 91       	pop	r29
    3c40:	cf 91       	pop	r28
    3c42:	08 95       	ret

00003c44 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3c44:	1f 93       	push	r17
    3c46:	cf 93       	push	r28
    3c48:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3c4a:	28 2f       	mov	r18, r24
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	f9 01       	movw	r30, r18
    3c50:	e4 58       	subi	r30, 0x84	; 132
    3c52:	fe 4f       	sbci	r31, 0xFE	; 254
    3c54:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3c56:	f9 01       	movw	r30, r18
    3c58:	ee 53       	subi	r30, 0x3E	; 62
    3c5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c5c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3c5e:	f9 01       	movw	r30, r18
    3c60:	e8 5f       	subi	r30, 0xF8	; 248
    3c62:	fd 4f       	sbci	r31, 0xFD	; 253
    3c64:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3c66:	cc 23       	and	r28, r28
    3c68:	b9 f0       	breq	.+46     	; 0x3c98 <digitalWrite+0x54>
    3c6a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3c6c:	81 11       	cpse	r24, r1
    3c6e:	59 df       	rcall	.-334    	; 0x3b22 <turnOffPWM>

	out = portOutputRegister(port);
    3c70:	ec 2f       	mov	r30, r28
    3c72:	f0 e0       	ldi	r31, 0x00	; 0
    3c74:	ee 0f       	add	r30, r30
    3c76:	ff 1f       	adc	r31, r31
    3c78:	e8 59       	subi	r30, 0x98	; 152
    3c7a:	fd 4f       	sbci	r31, 0xFD	; 253
    3c7c:	a5 91       	lpm	r26, Z+
    3c7e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3c80:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3c82:	f8 94       	cli

	if (val == LOW) {
    3c84:	11 11       	cpse	r17, r1
    3c86:	04 c0       	rjmp	.+8      	; 0x3c90 <digitalWrite+0x4c>
		*out &= ~bit;
    3c88:	8c 91       	ld	r24, X
    3c8a:	d0 95       	com	r29
    3c8c:	d8 23       	and	r29, r24
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <digitalWrite+0x50>
	} else {
		*out |= bit;
    3c90:	ec 91       	ld	r30, X
    3c92:	de 2b       	or	r29, r30
    3c94:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3c96:	9f bf       	out	0x3f, r25	; 63
}
    3c98:	df 91       	pop	r29
    3c9a:	cf 91       	pop	r28
    3c9c:	1f 91       	pop	r17
    3c9e:	08 95       	ret

00003ca0 <digitalRead>:

int digitalRead(uint8_t pin)
{
    3ca0:	cf 93       	push	r28
    3ca2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3ca4:	28 2f       	mov	r18, r24
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	f9 01       	movw	r30, r18
    3caa:	e4 58       	subi	r30, 0x84	; 132
    3cac:	fe 4f       	sbci	r31, 0xFE	; 254
    3cae:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3cb0:	f9 01       	movw	r30, r18
    3cb2:	ee 53       	subi	r30, 0x3E	; 62
    3cb4:	fe 4f       	sbci	r31, 0xFE	; 254
    3cb6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3cb8:	f9 01       	movw	r30, r18
    3cba:	e8 5f       	subi	r30, 0xF8	; 248
    3cbc:	fd 4f       	sbci	r31, 0xFD	; 253
    3cbe:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    3cc0:	cc 23       	and	r28, r28
    3cc2:	89 f0       	breq	.+34     	; 0x3ce6 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3cc4:	81 11       	cpse	r24, r1
    3cc6:	2d df       	rcall	.-422    	; 0x3b22 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    3cc8:	ec 2f       	mov	r30, r28
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	ee 0f       	add	r30, r30
    3cce:	ff 1f       	adc	r31, r31
    3cd0:	e2 5b       	subi	r30, 0xB2	; 178
    3cd2:	fd 4f       	sbci	r31, 0xFD	; 253
    3cd4:	a5 91       	lpm	r26, Z+
    3cd6:	b4 91       	lpm	r27, Z
    3cd8:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    3cda:	ed 23       	and	r30, r29
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	21 f4       	brne	.+8      	; 0x3cea <digitalRead+0x4a>
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	02 c0       	rjmp	.+4      	; 0x3cea <digitalRead+0x4a>
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	08 95       	ret

00003cf0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3cf0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3cf2:	91 8d       	ldd	r25, Z+25	; 0x19
    3cf4:	22 8d       	ldd	r18, Z+26	; 0x1a
    3cf6:	89 2f       	mov	r24, r25
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	80 5c       	subi	r24, 0xC0	; 192
    3cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    3cfe:	82 1b       	sub	r24, r18
    3d00:	91 09       	sbc	r25, r1
}
    3d02:	8f 73       	andi	r24, 0x3F	; 63
    3d04:	99 27       	eor	r25, r25
    3d06:	08 95       	ret

00003d08 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3d08:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3d0a:	91 8d       	ldd	r25, Z+25	; 0x19
    3d0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d0e:	98 17       	cp	r25, r24
    3d10:	31 f0       	breq	.+12     	; 0x3d1e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3d12:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d14:	e8 0f       	add	r30, r24
    3d16:	f1 1d       	adc	r31, r1
    3d18:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3d1e:	8f ef       	ldi	r24, 0xFF	; 255
    3d20:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3d22:	08 95       	ret

00003d24 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3d24:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3d26:	91 8d       	ldd	r25, Z+25	; 0x19
    3d28:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d2a:	98 17       	cp	r25, r24
    3d2c:	61 f0       	breq	.+24     	; 0x3d46 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3d2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d30:	df 01       	movw	r26, r30
    3d32:	a8 0f       	add	r26, r24
    3d34:	b1 1d       	adc	r27, r1
    3d36:	5d 96       	adiw	r26, 0x1d	; 29
    3d38:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3d3a:	92 8d       	ldd	r25, Z+26	; 0x1a
    3d3c:	9f 5f       	subi	r25, 0xFF	; 255
    3d3e:	9f 73       	andi	r25, 0x3F	; 63
    3d40:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3d46:	8f ef       	ldi	r24, 0xFF	; 255
    3d48:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3d4a:	08 95       	ret

00003d4c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    3d4c:	fc 01       	movw	r30, r24
    3d4e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    3d50:	44 8d       	ldd	r20, Z+28	; 0x1c
    3d52:	25 2f       	mov	r18, r21
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	84 2f       	mov	r24, r20
    3d58:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3d5a:	82 1b       	sub	r24, r18
    3d5c:	93 0b       	sbc	r25, r19
    3d5e:	54 17       	cp	r21, r20
    3d60:	10 f0       	brcs	.+4      	; 0x3d66 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3d62:	cf 96       	adiw	r24, 0x3f	; 63
    3d64:	08 95       	ret
  return tail - head - 1;
    3d66:	01 97       	sbiw	r24, 0x01	; 1
}
    3d68:	08 95       	ret

00003d6a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3d6a:	84 e4       	ldi	r24, 0x44	; 68
    3d6c:	9b e1       	ldi	r25, 0x1B	; 27
    3d6e:	89 2b       	or	r24, r25
    3d70:	39 f0       	breq	.+14     	; 0x3d80 <_Z14serialEventRunv+0x16>
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	89 2b       	or	r24, r25
    3d78:	19 f0       	breq	.+6      	; 0x3d80 <_Z14serialEventRunv+0x16>
    3d7a:	86 dc       	rcall	.-1780   	; 0x3688 <_Z17Serial0_availablev>
    3d7c:	81 11       	cpse	r24, r1
    3d7e:	25 c0       	rjmp	.+74     	; 0x3dca <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    3d80:	80 e0       	ldi	r24, 0x00	; 0
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	89 2b       	or	r24, r25
    3d86:	41 f0       	breq	.+16     	; 0x3d98 <_Z14serialEventRunv+0x2e>
    3d88:	80 e0       	ldi	r24, 0x00	; 0
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	89 2b       	or	r24, r25
    3d8e:	21 f0       	breq	.+8      	; 0x3d98 <_Z14serialEventRunv+0x2e>
    3d90:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3d94:	81 11       	cpse	r24, r1
    3d96:	1c c0       	rjmp	.+56     	; 0x3dd0 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    3d98:	80 e0       	ldi	r24, 0x00	; 0
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	89 2b       	or	r24, r25
    3d9e:	41 f0       	breq	.+16     	; 0x3db0 <_Z14serialEventRunv+0x46>
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	89 2b       	or	r24, r25
    3da6:	21 f0       	breq	.+8      	; 0x3db0 <_Z14serialEventRunv+0x46>
    3da8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3dac:	81 11       	cpse	r24, r1
    3dae:	13 c0       	rjmp	.+38     	; 0x3dd6 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	89 2b       	or	r24, r25
    3db6:	a1 f0       	breq	.+40     	; 0x3de0 <_Z14serialEventRunv+0x76>
    3db8:	80 e0       	ldi	r24, 0x00	; 0
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	89 2b       	or	r24, r25
    3dbe:	81 f0       	breq	.+32     	; 0x3de0 <_Z14serialEventRunv+0x76>
    3dc0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3dc4:	81 11       	cpse	r24, r1
    3dc6:	0a c0       	rjmp	.+20     	; 0x3ddc <_Z14serialEventRunv+0x72>
    3dc8:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3dca:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3dce:	d8 cf       	rjmp	.-80     	; 0x3d80 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    3dd0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3dd4:	e1 cf       	rjmp	.-62     	; 0x3d98 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    3dd6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3dda:	ea cf       	rjmp	.-44     	; 0x3db0 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    3ddc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3de0:	08 95       	ret

00003de2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3de2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3de4:	84 8d       	ldd	r24, Z+28	; 0x1c
    3de6:	df 01       	movw	r26, r30
    3de8:	a8 0f       	add	r26, r24
    3dea:	b1 1d       	adc	r27, r1
    3dec:	a3 5a       	subi	r26, 0xA3	; 163
    3dee:	bf 4f       	sbci	r27, 0xFF	; 255
    3df0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3df2:	84 8d       	ldd	r24, Z+28	; 0x1c
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	01 96       	adiw	r24, 0x01	; 1
    3df8:	8f 73       	andi	r24, 0x3F	; 63
    3dfa:	99 27       	eor	r25, r25
    3dfc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3dfe:	a6 89       	ldd	r26, Z+22	; 0x16
    3e00:	b7 89       	ldd	r27, Z+23	; 0x17
    3e02:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3e04:	a0 89       	ldd	r26, Z+16	; 0x10
    3e06:	b1 89       	ldd	r27, Z+17	; 0x11
    3e08:	8c 91       	ld	r24, X
    3e0a:	83 70       	andi	r24, 0x03	; 3
    3e0c:	80 64       	ori	r24, 0x40	; 64
    3e0e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3e10:	93 8d       	ldd	r25, Z+27	; 0x1b
    3e12:	84 8d       	ldd	r24, Z+28	; 0x1c
    3e14:	98 13       	cpse	r25, r24
    3e16:	06 c0       	rjmp	.+12     	; 0x3e24 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3e18:	02 88       	ldd	r0, Z+18	; 0x12
    3e1a:	f3 89       	ldd	r31, Z+19	; 0x13
    3e1c:	e0 2d       	mov	r30, r0
    3e1e:	80 81       	ld	r24, Z
    3e20:	8f 7d       	andi	r24, 0xDF	; 223
    3e22:	80 83       	st	Z, r24
    3e24:	08 95       	ret

00003e26 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3e26:	ef 92       	push	r14
    3e28:	ff 92       	push	r15
    3e2a:	0f 93       	push	r16
    3e2c:	1f 93       	push	r17
    3e2e:	cf 93       	push	r28
    3e30:	df 93       	push	r29
    3e32:	ec 01       	movw	r28, r24
  _written = true;
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3e38:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3e3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e3c:	98 13       	cpse	r25, r24
    3e3e:	05 c0       	rjmp	.+10     	; 0x3e4a <_ZN14HardwareSerial5writeEh+0x24>
    3e40:	e8 89       	ldd	r30, Y+16	; 0x10
    3e42:	f9 89       	ldd	r31, Y+17	; 0x11
    3e44:	80 81       	ld	r24, Z
    3e46:	85 fd       	sbrc	r24, 5
    3e48:	25 c0       	rjmp	.+74     	; 0x3e94 <_ZN14HardwareSerial5writeEh+0x6e>
    3e4a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3e4c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3e4e:	10 e0       	ldi	r17, 0x00	; 0
    3e50:	0f 5f       	subi	r16, 0xFF	; 255
    3e52:	1f 4f       	sbci	r17, 0xFF	; 255
    3e54:	0f 73       	andi	r16, 0x3F	; 63
    3e56:	11 27       	eor	r17, r17
    3e58:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3e5a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e5c:	e8 12       	cpse	r14, r24
    3e5e:	0b c0       	rjmp	.+22     	; 0x3e76 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    3e60:	0f b6       	in	r0, 0x3f	; 63
    3e62:	07 fc       	sbrc	r0, 7
    3e64:	fa cf       	rjmp	.-12     	; 0x3e5a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3e66:	e8 89       	ldd	r30, Y+16	; 0x10
    3e68:	f9 89       	ldd	r31, Y+17	; 0x11
    3e6a:	80 81       	ld	r24, Z
    3e6c:	85 ff       	sbrs	r24, 5
    3e6e:	f5 cf       	rjmp	.-22     	; 0x3e5a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3e70:	ce 01       	movw	r24, r28
    3e72:	b7 df       	rcall	.-146    	; 0x3de2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3e74:	f2 cf       	rjmp	.-28     	; 0x3e5a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e78:	fe 01       	movw	r30, r28
    3e7a:	e8 0f       	add	r30, r24
    3e7c:	f1 1d       	adc	r31, r1
    3e7e:	e3 5a       	subi	r30, 0xA3	; 163
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3e84:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3e86:	f8 94       	cli
    _tx_buffer_head = i;
    3e88:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3e8a:	ea 89       	ldd	r30, Y+18	; 0x12
    3e8c:	fb 89       	ldd	r31, Y+19	; 0x13
    3e8e:	80 81       	ld	r24, Z
    3e90:	80 62       	ori	r24, 0x20	; 32
    3e92:	0a c0       	rjmp	.+20     	; 0x3ea8 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3e94:	9f b7       	in	r25, 0x3f	; 63
    3e96:	f8 94       	cli
      *_udr = c;
    3e98:	ee 89       	ldd	r30, Y+22	; 0x16
    3e9a:	ff 89       	ldd	r31, Y+23	; 0x17
    3e9c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3e9e:	e8 89       	ldd	r30, Y+16	; 0x10
    3ea0:	f9 89       	ldd	r31, Y+17	; 0x11
    3ea2:	80 81       	ld	r24, Z
    3ea4:	83 70       	andi	r24, 0x03	; 3
    3ea6:	80 64       	ori	r24, 0x40	; 64
    3ea8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3eaa:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	df 91       	pop	r29
    3eb2:	cf 91       	pop	r28
    3eb4:	1f 91       	pop	r17
    3eb6:	0f 91       	pop	r16
    3eb8:	ff 90       	pop	r15
    3eba:	ef 90       	pop	r14
    3ebc:	08 95       	ret

00003ebe <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3ebe:	cf 93       	push	r28
    3ec0:	df 93       	push	r29
    3ec2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3ec4:	88 8d       	ldd	r24, Y+24	; 0x18
    3ec6:	88 23       	and	r24, r24
    3ec8:	c1 f0       	breq	.+48     	; 0x3efa <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3eca:	ea 89       	ldd	r30, Y+18	; 0x12
    3ecc:	fb 89       	ldd	r31, Y+19	; 0x13
    3ece:	80 81       	ld	r24, Z
    3ed0:	85 fd       	sbrc	r24, 5
    3ed2:	05 c0       	rjmp	.+10     	; 0x3ede <_ZN14HardwareSerial5flushEv+0x20>
    3ed4:	a8 89       	ldd	r26, Y+16	; 0x10
    3ed6:	b9 89       	ldd	r27, Y+17	; 0x11
    3ed8:	8c 91       	ld	r24, X
    3eda:	86 fd       	sbrc	r24, 6
    3edc:	0e c0       	rjmp	.+28     	; 0x3efa <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	07 fc       	sbrc	r0, 7
    3ee2:	f5 cf       	rjmp	.-22     	; 0x3ece <_ZN14HardwareSerial5flushEv+0x10>
    3ee4:	80 81       	ld	r24, Z
    3ee6:	85 ff       	sbrs	r24, 5
    3ee8:	f2 cf       	rjmp	.-28     	; 0x3ece <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3eea:	a8 89       	ldd	r26, Y+16	; 0x10
    3eec:	b9 89       	ldd	r27, Y+17	; 0x11
    3eee:	8c 91       	ld	r24, X
    3ef0:	85 ff       	sbrs	r24, 5
    3ef2:	ed cf       	rjmp	.-38     	; 0x3ece <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3ef4:	ce 01       	movw	r24, r28
    3ef6:	75 df       	rcall	.-278    	; 0x3de2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3ef8:	e8 cf       	rjmp	.-48     	; 0x3eca <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3efa:	df 91       	pop	r29
    3efc:	cf 91       	pop	r28
    3efe:	08 95       	ret

00003f00 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3f00:	08 95       	ret

00003f02 <__udivmodsi4>:
    3f02:	a1 e2       	ldi	r26, 0x21	; 33
    3f04:	1a 2e       	mov	r1, r26
    3f06:	aa 1b       	sub	r26, r26
    3f08:	bb 1b       	sub	r27, r27
    3f0a:	fd 01       	movw	r30, r26
    3f0c:	0d c0       	rjmp	.+26     	; 0x3f28 <__udivmodsi4_ep>

00003f0e <__udivmodsi4_loop>:
    3f0e:	aa 1f       	adc	r26, r26
    3f10:	bb 1f       	adc	r27, r27
    3f12:	ee 1f       	adc	r30, r30
    3f14:	ff 1f       	adc	r31, r31
    3f16:	a2 17       	cp	r26, r18
    3f18:	b3 07       	cpc	r27, r19
    3f1a:	e4 07       	cpc	r30, r20
    3f1c:	f5 07       	cpc	r31, r21
    3f1e:	20 f0       	brcs	.+8      	; 0x3f28 <__udivmodsi4_ep>
    3f20:	a2 1b       	sub	r26, r18
    3f22:	b3 0b       	sbc	r27, r19
    3f24:	e4 0b       	sbc	r30, r20
    3f26:	f5 0b       	sbc	r31, r21

00003f28 <__udivmodsi4_ep>:
    3f28:	66 1f       	adc	r22, r22
    3f2a:	77 1f       	adc	r23, r23
    3f2c:	88 1f       	adc	r24, r24
    3f2e:	99 1f       	adc	r25, r25
    3f30:	1a 94       	dec	r1
    3f32:	69 f7       	brne	.-38     	; 0x3f0e <__udivmodsi4_loop>
    3f34:	60 95       	com	r22
    3f36:	70 95       	com	r23
    3f38:	80 95       	com	r24
    3f3a:	90 95       	com	r25
    3f3c:	9b 01       	movw	r18, r22
    3f3e:	ac 01       	movw	r20, r24
    3f40:	bd 01       	movw	r22, r26
    3f42:	cf 01       	movw	r24, r30
    3f44:	08 95       	ret

00003f46 <__tablejump2__>:
    3f46:	ee 0f       	add	r30, r30
    3f48:	ff 1f       	adc	r31, r31
    3f4a:	88 1f       	adc	r24, r24
    3f4c:	8b bf       	out	0x3b, r24	; 59
    3f4e:	07 90       	elpm	r0, Z+
    3f50:	f6 91       	elpm	r31, Z
    3f52:	e0 2d       	mov	r30, r0
    3f54:	19 94       	eijmp

00003f56 <abort>:
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	f8 94       	cli
    3f5c:	09 c0       	rjmp	.+18     	; 0x3f70 <_exit>

00003f5e <strlen>:
    3f5e:	fc 01       	movw	r30, r24
    3f60:	01 90       	ld	r0, Z+
    3f62:	00 20       	and	r0, r0
    3f64:	e9 f7       	brne	.-6      	; 0x3f60 <strlen+0x2>
    3f66:	80 95       	com	r24
    3f68:	90 95       	com	r25
    3f6a:	8e 0f       	add	r24, r30
    3f6c:	9f 1f       	adc	r25, r31
    3f6e:	08 95       	ret

00003f70 <_exit>:
    3f70:	f8 94       	cli

00003f72 <__stop_program>:
    3f72:	ff cf       	rjmp	.-2      	; 0x3f72 <__stop_program>
